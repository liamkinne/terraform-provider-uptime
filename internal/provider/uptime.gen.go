// Package provider provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package provider

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

// Defines values for CheckMaintenanceScheduleType.
const (
	CheckMaintenanceScheduleTypeMONTHLY CheckMaintenanceScheduleType = "MONTHLY"
	CheckMaintenanceScheduleTypeWEEKLY  CheckMaintenanceScheduleType = "WEEKLY"
)

// Defines values for CheckMaintenanceState.
const (
	CheckMaintenanceStateACTIVE     CheckMaintenanceState = "ACTIVE"
	CheckMaintenanceStateSCHEDULED  CheckMaintenanceState = "SCHEDULED"
	CheckMaintenanceStateSUPPRESSED CheckMaintenanceState = "SUPPRESSED"
)

// Defines values for ChecksMspDnsRecordType.
const (
	ChecksMspDnsRecordTypeA     ChecksMspDnsRecordType = "A"
	ChecksMspDnsRecordTypeAAAA  ChecksMspDnsRecordType = "AAAA"
	ChecksMspDnsRecordTypeANY   ChecksMspDnsRecordType = "ANY"
	ChecksMspDnsRecordTypeCNAME ChecksMspDnsRecordType = "CNAME"
	ChecksMspDnsRecordTypeMX    ChecksMspDnsRecordType = "MX"
	ChecksMspDnsRecordTypeNS    ChecksMspDnsRecordType = "NS"
	ChecksMspDnsRecordTypePTR   ChecksMspDnsRecordType = "PTR"
	ChecksMspDnsRecordTypeSOA   ChecksMspDnsRecordType = "SOA"
	ChecksMspDnsRecordTypeTXT   ChecksMspDnsRecordType = "TXT"
)

// Defines values for ChecksMspEncryption.
const (
	ChecksMspEncryptionEmpty  ChecksMspEncryption = ""
	ChecksMspEncryptionSSLTLS ChecksMspEncryption = "SSL_TLS"
)

// Defines values for ChecksMspExpectStringType.
const (
	ChecksMspExpectStringTypeINVERSEREGEX ChecksMspExpectStringType = "INVERSE_REGEX"
	ChecksMspExpectStringTypeREGEX        ChecksMspExpectStringType = "REGEX"
	ChecksMspExpectStringTypeSTRING       ChecksMspExpectStringType = "STRING"
)

// Defines values for ChecksMspProtocol.
const (
	ChecksMspProtocolFtp  ChecksMspProtocol = "ftp"
	ChecksMspProtocolHttp ChecksMspProtocol = "http"
	ChecksMspProtocolImap ChecksMspProtocol = "imap"
	ChecksMspProtocolIrc  ChecksMspProtocol = "irc"
	ChecksMspProtocolLdap ChecksMspProtocol = "ldap"
	ChecksMspProtocolPop3 ChecksMspProtocol = "pop3"
	ChecksMspProtocolSmtp ChecksMspProtocol = "smtp"
	ChecksMspProtocolXmpp ChecksMspProtocol = "xmpp"
)

// Defines values for ChecksMspUseIpVersion.
const (
	ChecksMspUseIpVersionEmpty ChecksMspUseIpVersion = ""
	ChecksMspUseIpVersionIPV4  ChecksMspUseIpVersion = "IPV4"
	ChecksMspUseIpVersionIPV6  ChecksMspUseIpVersion = "IPV6"
)

// Defines values for ChecksAPIMspUseIpVersion.
const (
	ChecksAPIMspUseIpVersionEmpty ChecksAPIMspUseIpVersion = ""
	ChecksAPIMspUseIpVersionIPV4  ChecksAPIMspUseIpVersion = "IPV4"
	ChecksAPIMspUseIpVersionIPV6  ChecksAPIMspUseIpVersion = "IPV6"
)

// Defines values for ChecksBulkUpdateFieldsMspDnsRecordType.
const (
	ChecksBulkUpdateFieldsMspDnsRecordTypeA     ChecksBulkUpdateFieldsMspDnsRecordType = "A"
	ChecksBulkUpdateFieldsMspDnsRecordTypeAAAA  ChecksBulkUpdateFieldsMspDnsRecordType = "AAAA"
	ChecksBulkUpdateFieldsMspDnsRecordTypeANY   ChecksBulkUpdateFieldsMspDnsRecordType = "ANY"
	ChecksBulkUpdateFieldsMspDnsRecordTypeCNAME ChecksBulkUpdateFieldsMspDnsRecordType = "CNAME"
	ChecksBulkUpdateFieldsMspDnsRecordTypeMX    ChecksBulkUpdateFieldsMspDnsRecordType = "MX"
	ChecksBulkUpdateFieldsMspDnsRecordTypeNS    ChecksBulkUpdateFieldsMspDnsRecordType = "NS"
	ChecksBulkUpdateFieldsMspDnsRecordTypePTR   ChecksBulkUpdateFieldsMspDnsRecordType = "PTR"
	ChecksBulkUpdateFieldsMspDnsRecordTypeSOA   ChecksBulkUpdateFieldsMspDnsRecordType = "SOA"
	ChecksBulkUpdateFieldsMspDnsRecordTypeTXT   ChecksBulkUpdateFieldsMspDnsRecordType = "TXT"
)

// Defines values for ChecksBulkUpdateFieldsMspEncryption.
const (
	ChecksBulkUpdateFieldsMspEncryptionEmpty  ChecksBulkUpdateFieldsMspEncryption = ""
	ChecksBulkUpdateFieldsMspEncryptionSSLTLS ChecksBulkUpdateFieldsMspEncryption = "SSL_TLS"
)

// Defines values for ChecksBulkUpdateFieldsMspExpectStringType.
const (
	ChecksBulkUpdateFieldsMspExpectStringTypeINVERSEREGEX ChecksBulkUpdateFieldsMspExpectStringType = "INVERSE_REGEX"
	ChecksBulkUpdateFieldsMspExpectStringTypeREGEX        ChecksBulkUpdateFieldsMspExpectStringType = "REGEX"
	ChecksBulkUpdateFieldsMspExpectStringTypeSTRING       ChecksBulkUpdateFieldsMspExpectStringType = "STRING"
)

// Defines values for ChecksBulkUpdateFieldsMspProtocol.
const (
	ChecksBulkUpdateFieldsMspProtocolFtp  ChecksBulkUpdateFieldsMspProtocol = "ftp"
	ChecksBulkUpdateFieldsMspProtocolHttp ChecksBulkUpdateFieldsMspProtocol = "http"
	ChecksBulkUpdateFieldsMspProtocolImap ChecksBulkUpdateFieldsMspProtocol = "imap"
	ChecksBulkUpdateFieldsMspProtocolIrc  ChecksBulkUpdateFieldsMspProtocol = "irc"
	ChecksBulkUpdateFieldsMspProtocolLdap ChecksBulkUpdateFieldsMspProtocol = "ldap"
	ChecksBulkUpdateFieldsMspProtocolPop3 ChecksBulkUpdateFieldsMspProtocol = "pop3"
	ChecksBulkUpdateFieldsMspProtocolSmtp ChecksBulkUpdateFieldsMspProtocol = "smtp"
	ChecksBulkUpdateFieldsMspProtocolXmpp ChecksBulkUpdateFieldsMspProtocol = "xmpp"
)

// Defines values for ChecksBulkUpdateFieldsMspUseIpVersion.
const (
	ChecksBulkUpdateFieldsMspUseIpVersionEmpty ChecksBulkUpdateFieldsMspUseIpVersion = ""
	ChecksBulkUpdateFieldsMspUseIpVersionIPV4  ChecksBulkUpdateFieldsMspUseIpVersion = "IPV4"
	ChecksBulkUpdateFieldsMspUseIpVersionIPV6  ChecksBulkUpdateFieldsMspUseIpVersion = "IPV6"
)

// Defines values for ChecksBulkUpdateMaintenanceFieldsScheduleType.
const (
	ChecksBulkUpdateMaintenanceFieldsScheduleTypeMONTHLY ChecksBulkUpdateMaintenanceFieldsScheduleType = "MONTHLY"
	ChecksBulkUpdateMaintenanceFieldsScheduleTypeWEEKLY  ChecksBulkUpdateMaintenanceFieldsScheduleType = "WEEKLY"
)

// Defines values for ChecksBulkUpdateMaintenanceFieldsState.
const (
	ChecksBulkUpdateMaintenanceFieldsStateACTIVE     ChecksBulkUpdateMaintenanceFieldsState = "ACTIVE"
	ChecksBulkUpdateMaintenanceFieldsStateSCHEDULED  ChecksBulkUpdateMaintenanceFieldsState = "SCHEDULED"
	ChecksBulkUpdateMaintenanceFieldsStateSUPPRESSED ChecksBulkUpdateMaintenanceFieldsState = "SUPPRESSED"
)

// Defines values for ChecksDNSMspDnsRecordType.
const (
	ChecksDNSMspDnsRecordTypeA     ChecksDNSMspDnsRecordType = "A"
	ChecksDNSMspDnsRecordTypeAAAA  ChecksDNSMspDnsRecordType = "AAAA"
	ChecksDNSMspDnsRecordTypeANY   ChecksDNSMspDnsRecordType = "ANY"
	ChecksDNSMspDnsRecordTypeCNAME ChecksDNSMspDnsRecordType = "CNAME"
	ChecksDNSMspDnsRecordTypeMX    ChecksDNSMspDnsRecordType = "MX"
	ChecksDNSMspDnsRecordTypeNS    ChecksDNSMspDnsRecordType = "NS"
	ChecksDNSMspDnsRecordTypePTR   ChecksDNSMspDnsRecordType = "PTR"
	ChecksDNSMspDnsRecordTypeSOA   ChecksDNSMspDnsRecordType = "SOA"
	ChecksDNSMspDnsRecordTypeTXT   ChecksDNSMspDnsRecordType = "TXT"
)

// Defines values for ChecksGROUPGroupcheckconfigGroupCheckDownCondition.
const (
	ChecksGROUPGroupcheckconfigGroupCheckDownConditionALL           ChecksGROUPGroupcheckconfigGroupCheckDownCondition = "ALL"
	ChecksGROUPGroupcheckconfigGroupCheckDownConditionANY           ChecksGROUPGroupcheckconfigGroupCheckDownCondition = "ANY"
	ChecksGROUPGroupcheckconfigGroupCheckDownConditionFIFTYPCT      ChecksGROUPGroupcheckconfigGroupCheckDownCondition = "FIFTY_PCT"
	ChecksGROUPGroupcheckconfigGroupCheckDownConditionFIVE          ChecksGROUPGroupcheckconfigGroupCheckDownCondition = "FIVE"
	ChecksGROUPGroupcheckconfigGroupCheckDownConditionFIVEPCT       ChecksGROUPGroupcheckconfigGroupCheckDownCondition = "FIVE_PCT"
	ChecksGROUPGroupcheckconfigGroupCheckDownConditionFOUR          ChecksGROUPGroupcheckconfigGroupCheckDownCondition = "FOUR"
	ChecksGROUPGroupcheckconfigGroupCheckDownConditionONEPCT        ChecksGROUPGroupcheckconfigGroupCheckDownCondition = "ONE_PCT"
	ChecksGROUPGroupcheckconfigGroupCheckDownConditionTEN           ChecksGROUPGroupcheckconfigGroupCheckDownCondition = "TEN"
	ChecksGROUPGroupcheckconfigGroupCheckDownConditionTENPCT        ChecksGROUPGroupcheckconfigGroupCheckDownCondition = "TEN_PCT"
	ChecksGROUPGroupcheckconfigGroupCheckDownConditionTHREE         ChecksGROUPGroupcheckconfigGroupCheckDownCondition = "THREE"
	ChecksGROUPGroupcheckconfigGroupCheckDownConditionTHREEPCT      ChecksGROUPGroupcheckconfigGroupCheckDownCondition = "THREE_PCT"
	ChecksGROUPGroupcheckconfigGroupCheckDownConditionTWENTYFIVEPCT ChecksGROUPGroupcheckconfigGroupCheckDownCondition = "TWENTYFIVE_PCT"
	ChecksGROUPGroupcheckconfigGroupCheckDownConditionTWO           ChecksGROUPGroupcheckconfigGroupCheckDownCondition = "TWO"
)

// Defines values for ChecksGROUPGroupcheckconfigGroupUptimePercentCalculation.
const (
	ChecksGROUPGroupcheckconfigGroupUptimePercentCalculationAVERAGE      ChecksGROUPGroupcheckconfigGroupUptimePercentCalculation = "AVERAGE"
	ChecksGROUPGroupcheckconfigGroupUptimePercentCalculationUPDOWNSTATES ChecksGROUPGroupcheckconfigGroupUptimePercentCalculation = "UP_DOWN_STATES"
)

// Defines values for ChecksHTTPMspEncryption.
const (
	ChecksHTTPMspEncryptionEmpty  ChecksHTTPMspEncryption = ""
	ChecksHTTPMspEncryptionSSLTLS ChecksHTTPMspEncryption = "SSL_TLS"
)

// Defines values for ChecksHTTPMspExpectStringType.
const (
	ChecksHTTPMspExpectStringTypeINVERSEREGEX ChecksHTTPMspExpectStringType = "INVERSE_REGEX"
	ChecksHTTPMspExpectStringTypeREGEX        ChecksHTTPMspExpectStringType = "REGEX"
	ChecksHTTPMspExpectStringTypeSTRING       ChecksHTTPMspExpectStringType = "STRING"
)

// Defines values for ChecksHTTPMspUseIpVersion.
const (
	ChecksHTTPMspUseIpVersionEmpty ChecksHTTPMspUseIpVersion = ""
	ChecksHTTPMspUseIpVersionIPV4  ChecksHTTPMspUseIpVersion = "IPV4"
	ChecksHTTPMspUseIpVersionIPV6  ChecksHTTPMspUseIpVersion = "IPV6"
)

// Defines values for ChecksICMPMspUseIpVersion.
const (
	ChecksICMPMspUseIpVersionEmpty ChecksICMPMspUseIpVersion = ""
	ChecksICMPMspUseIpVersionIPV4  ChecksICMPMspUseIpVersion = "IPV4"
	ChecksICMPMspUseIpVersionIPV6  ChecksICMPMspUseIpVersion = "IPV6"
)

// Defines values for ChecksIMAPMspEncryption.
const (
	ChecksIMAPMspEncryptionEmpty  ChecksIMAPMspEncryption = ""
	ChecksIMAPMspEncryptionSSLTLS ChecksIMAPMspEncryption = "SSL_TLS"
)

// Defines values for ChecksIMAPMspUseIpVersion.
const (
	ChecksIMAPMspUseIpVersionEmpty ChecksIMAPMspUseIpVersion = ""
	ChecksIMAPMspUseIpVersionIPV4  ChecksIMAPMspUseIpVersion = "IPV4"
	ChecksIMAPMspUseIpVersionIPV6  ChecksIMAPMspUseIpVersion = "IPV6"
)

// Defines values for ChecksNTPMspUseIpVersion.
const (
	ChecksNTPMspUseIpVersionEmpty ChecksNTPMspUseIpVersion = ""
	ChecksNTPMspUseIpVersionIPV4  ChecksNTPMspUseIpVersion = "IPV4"
	ChecksNTPMspUseIpVersionIPV6  ChecksNTPMspUseIpVersion = "IPV6"
)

// Defines values for ChecksPOPMspEncryption.
const (
	ChecksPOPMspEncryptionEmpty  ChecksPOPMspEncryption = ""
	ChecksPOPMspEncryptionSSLTLS ChecksPOPMspEncryption = "SSL_TLS"
)

// Defines values for ChecksPOPMspUseIpVersion.
const (
	ChecksPOPMspUseIpVersionEmpty ChecksPOPMspUseIpVersion = ""
	ChecksPOPMspUseIpVersionIPV4  ChecksPOPMspUseIpVersion = "IPV4"
	ChecksPOPMspUseIpVersionIPV6  ChecksPOPMspUseIpVersion = "IPV6"
)

// Defines values for ChecksSMTPMspEncryption.
const (
	ChecksSMTPMspEncryptionEmpty  ChecksSMTPMspEncryption = ""
	ChecksSMTPMspEncryptionSSLTLS ChecksSMTPMspEncryption = "SSL_TLS"
)

// Defines values for ChecksSMTPMspUseIpVersion.
const (
	ChecksSMTPMspUseIpVersionEmpty ChecksSMTPMspUseIpVersion = ""
	ChecksSMTPMspUseIpVersionIPV4  ChecksSMTPMspUseIpVersion = "IPV4"
	ChecksSMTPMspUseIpVersionIPV6  ChecksSMTPMspUseIpVersion = "IPV6"
)

// Defines values for ChecksSSHMspUseIpVersion.
const (
	ChecksSSHMspUseIpVersionEmpty ChecksSSHMspUseIpVersion = ""
	ChecksSSHMspUseIpVersionIPV4  ChecksSSHMspUseIpVersion = "IPV4"
	ChecksSSHMspUseIpVersionIPV6  ChecksSSHMspUseIpVersion = "IPV6"
)

// Defines values for ChecksSSLCERTMspProtocol.
const (
	ChecksSSLCERTMspProtocolFtp  ChecksSSLCERTMspProtocol = "ftp"
	ChecksSSLCERTMspProtocolHttp ChecksSSLCERTMspProtocol = "http"
	ChecksSSLCERTMspProtocolImap ChecksSSLCERTMspProtocol = "imap"
	ChecksSSLCERTMspProtocolIrc  ChecksSSLCERTMspProtocol = "irc"
	ChecksSSLCERTMspProtocolLdap ChecksSSLCERTMspProtocol = "ldap"
	ChecksSSLCERTMspProtocolPop3 ChecksSSLCERTMspProtocol = "pop3"
	ChecksSSLCERTMspProtocolSmtp ChecksSSLCERTMspProtocol = "smtp"
	ChecksSSLCERTMspProtocolXmpp ChecksSSLCERTMspProtocol = "xmpp"
)

// Defines values for ChecksTCPMspUseIpVersion.
const (
	ChecksTCPMspUseIpVersionEmpty ChecksTCPMspUseIpVersion = ""
	ChecksTCPMspUseIpVersionIPV4  ChecksTCPMspUseIpVersion = "IPV4"
	ChecksTCPMspUseIpVersionIPV6  ChecksTCPMspUseIpVersion = "IPV6"
)

// Defines values for ChecksUDPMspUseIpVersion.
const (
	ChecksUDPMspUseIpVersionEmpty ChecksUDPMspUseIpVersion = ""
	ChecksUDPMspUseIpVersionIPV4  ChecksUDPMspUseIpVersion = "IPV4"
	ChecksUDPMspUseIpVersionIPV6  ChecksUDPMspUseIpVersion = "IPV6"
)

// Defines values for ComponentAutoSetStatus.
const (
	ComponentAutoSetStatusDegradedPerformance ComponentAutoSetStatus = "degraded-performance"
	ComponentAutoSetStatusMajorOutage         ComponentAutoSetStatus = "major-outage"
	ComponentAutoSetStatusPartialOutage       ComponentAutoSetStatus = "partial-outage"
	ComponentAutoSetStatusUnderMaintenance    ComponentAutoSetStatus = "under-maintenance"
)

// Defines values for ComponentStatus.
const (
	ComponentStatusDegradedPerformance ComponentStatus = "degraded-performance"
	ComponentStatusMajorOutage         ComponentStatus = "major-outage"
	ComponentStatusOperational         ComponentStatus = "operational"
	ComponentStatusPartialOutage       ComponentStatus = "partial-outage"
	ComponentStatusUnderMaintenance    ComponentStatus = "under-maintenance"
)

// Defines values for ContactGroupOnCallScheduleScheduleType.
const (
	ContactGroupOnCallScheduleScheduleTypeMONTHLY ContactGroupOnCallScheduleScheduleType = "MONTHLY"
	ContactGroupOnCallScheduleScheduleTypeWEEKLY  ContactGroupOnCallScheduleScheduleType = "WEEKLY"
)

// Defines values for ContactGroupOnCallScheduleState.
const (
	ContactGroupOnCallScheduleStateACTIVE     ContactGroupOnCallScheduleState = "ACTIVE"
	ContactGroupOnCallScheduleStateSCHEDULED  ContactGroupOnCallScheduleState = "SCHEDULED"
	ContactGroupOnCallScheduleStateSUPPRESSED ContactGroupOnCallScheduleState = "SUPPRESSED"
)

// Defines values for DashboardAlertsNumToShow.
const (
	DashboardAlertsNumToShowN10 DashboardAlertsNumToShow = 10
	DashboardAlertsNumToShowN15 DashboardAlertsNumToShow = 15
	DashboardAlertsNumToShowN5  DashboardAlertsNumToShow = 5
)

// Defines values for DashboardServicesNumToShow.
const (
	DashboardServicesNumToShowN12 DashboardServicesNumToShow = 12
	DashboardServicesNumToShowN16 DashboardServicesNumToShow = 16
	DashboardServicesNumToShowN20 DashboardServicesNumToShow = 20
	DashboardServicesNumToShowN4  DashboardServicesNumToShow = 4
	DashboardServicesNumToShowN8  DashboardServicesNumToShow = 8
)

// Defines values for DashboardServicesPrimarySort.
const (
	DashboardServicesPrimarySortCachedOrdering             DashboardServicesPrimarySort = "cached_ordering"
	DashboardServicesPrimarySortDeviceAddress              DashboardServicesPrimarySort = "device__address"
	DashboardServicesPrimarySortIsPausedcachedStateIsUp    DashboardServicesPrimarySort = "is_paused,cached_state_is_up"
	DashboardServicesPrimarySortMinusCachedLastDownAlertAt DashboardServicesPrimarySort = "-cached_last_down_alert_at"
	DashboardServicesPrimarySortMinusCachedResponseTime    DashboardServicesPrimarySort = "-cached_response_time"
	DashboardServicesPrimarySortMinusCreatedAt             DashboardServicesPrimarySort = "-created_at"
)

// Defines values for DashboardServicesSecondarySort.
const (
	DashboardServicesSecondarySortCachedOrdering             DashboardServicesSecondarySort = "cached_ordering"
	DashboardServicesSecondarySortDeviceAddress              DashboardServicesSecondarySort = "device__address"
	DashboardServicesSecondarySortIsPausedcachedStateIsUp    DashboardServicesSecondarySort = "is_paused,cached_state_is_up"
	DashboardServicesSecondarySortMinusCachedLastDownAlertAt DashboardServicesSecondarySort = "-cached_last_down_alert_at"
	DashboardServicesSecondarySortMinusCachedResponseTime    DashboardServicesSecondarySort = "-cached_response_time"
	DashboardServicesSecondarySortMinusCreatedAt             DashboardServicesSecondarySort = "-created_at"
)

// Defines values for IncidentAffectedComponentsStatus.
const (
	IncidentAffectedComponentsStatusDegradedPerformance IncidentAffectedComponentsStatus = "degraded-performance"
	IncidentAffectedComponentsStatusMajorOutage         IncidentAffectedComponentsStatus = "major-outage"
	IncidentAffectedComponentsStatusPartialOutage       IncidentAffectedComponentsStatus = "partial-outage"
	IncidentAffectedComponentsStatusUnderMaintenance    IncidentAffectedComponentsStatus = "under-maintenance"
)

// Defines values for IncidentIncidentType.
const (
	IncidentIncidentTypeINCIDENT             IncidentIncidentType = "INCIDENT"
	IncidentIncidentTypeSCHEDULEDMAINTENANCE IncidentIncidentType = "SCHEDULED_MAINTENANCE"
)

// Defines values for IncidentUpdatesIncidentState.
const (
	IncidentUpdatesIncidentStateIdentified    IncidentUpdatesIncidentState = "identified"
	IncidentUpdatesIncidentStateInvestigating IncidentUpdatesIncidentState = "investigating"
	IncidentUpdatesIncidentStateMaintenance   IncidentUpdatesIncidentState = "maintenance"
	IncidentUpdatesIncidentStateMonitoring    IncidentUpdatesIncidentState = "monitoring"
	IncidentUpdatesIncidentStateNotification  IncidentUpdatesIncidentState = "notification"
	IncidentUpdatesIncidentStateResolved      IncidentUpdatesIncidentState = "resolved"
)

// Defines values for IntegrationDatadogRegion.
const (
	IntegrationDatadogRegionEU IntegrationDatadogRegion = "EU"
	IntegrationDatadogRegionUS IntegrationDatadogRegion = "US"
)

// Defines values for IntegrationPushoverPriority.
const (
	IntegrationPushoverPriorityMinus1 IntegrationPushoverPriority = -1
	IntegrationPushoverPriorityMinus2 IntegrationPushoverPriority = -2
	IntegrationPushoverPriorityN0     IntegrationPushoverPriority = 0
	IntegrationPushoverPriorityN1     IntegrationPushoverPriority = 1
	IntegrationPushoverPriorityN2     IntegrationPushoverPriority = 2
)

// Defines values for SLAReportDefaultDateRange.
const (
	SLAReportDefaultDateRangeLAST30D   SLAReportDefaultDateRange = "LAST_30D"
	SLAReportDefaultDateRangeLAST7D    SLAReportDefaultDateRange = "LAST_7D"
	SLAReportDefaultDateRangeLASTMONTH SLAReportDefaultDateRange = "LAST_MONTH"
	SLAReportDefaultDateRangeLASTWEEK  SLAReportDefaultDateRange = "LAST_WEEK"
	SLAReportDefaultDateRangeTHISMONTH SLAReportDefaultDateRange = "THIS_MONTH"
	SLAReportDefaultDateRangeTHISWEEK  SLAReportDefaultDateRange = "THIS_WEEK"
	SLAReportDefaultDateRangeTODAY     SLAReportDefaultDateRange = "TODAY"
	SLAReportDefaultDateRangeYESTERDAY SLAReportDefaultDateRange = "YESTERDAY"
)

// Defines values for SLAReportResponseTimeSectionSort.
const (
	SLAReportResponseTimeSectionSortBYRESPONSETIME SLAReportResponseTimeSectionSort = "BY_RESPONSE_TIME"
	SLAReportResponseTimeSectionSortBYSLA          SLAReportResponseTimeSectionSort = "BY_SLA"
)

// Defines values for SLAReportUptimeSectionSort.
const (
	SLAReportUptimeSectionSortBYSLA    SLAReportUptimeSectionSort = "BY_SLA"
	SLAReportUptimeSectionSortBYUPTIME SLAReportUptimeSectionSort = "BY_UPTIME"
)

// Defines values for SLAReportStatsOutput.
const (
	SLAReportStatsOutputJson SLAReportStatsOutput = "json"
	SLAReportStatsOutputPdf  SLAReportStatsOutput = "pdf"
	SLAReportStatsOutputXls  SLAReportStatsOutput = "xls"
)

// Defines values for ScheduledReportAtTime.
const (
	ScheduledReportAtTimeN0  ScheduledReportAtTime = 0
	ScheduledReportAtTimeN1  ScheduledReportAtTime = 1
	ScheduledReportAtTimeN10 ScheduledReportAtTime = 10
	ScheduledReportAtTimeN11 ScheduledReportAtTime = 11
	ScheduledReportAtTimeN12 ScheduledReportAtTime = 12
	ScheduledReportAtTimeN13 ScheduledReportAtTime = 13
	ScheduledReportAtTimeN14 ScheduledReportAtTime = 14
	ScheduledReportAtTimeN15 ScheduledReportAtTime = 15
	ScheduledReportAtTimeN16 ScheduledReportAtTime = 16
	ScheduledReportAtTimeN17 ScheduledReportAtTime = 17
	ScheduledReportAtTimeN18 ScheduledReportAtTime = 18
	ScheduledReportAtTimeN19 ScheduledReportAtTime = 19
	ScheduledReportAtTimeN2  ScheduledReportAtTime = 2
	ScheduledReportAtTimeN20 ScheduledReportAtTime = 20
	ScheduledReportAtTimeN21 ScheduledReportAtTime = 21
	ScheduledReportAtTimeN22 ScheduledReportAtTime = 22
	ScheduledReportAtTimeN23 ScheduledReportAtTime = 23
	ScheduledReportAtTimeN3  ScheduledReportAtTime = 3
	ScheduledReportAtTimeN4  ScheduledReportAtTime = 4
	ScheduledReportAtTimeN5  ScheduledReportAtTime = 5
	ScheduledReportAtTimeN6  ScheduledReportAtTime = 6
	ScheduledReportAtTimeN7  ScheduledReportAtTime = 7
	ScheduledReportAtTimeN8  ScheduledReportAtTime = 8
	ScheduledReportAtTimeN9  ScheduledReportAtTime = 9
)

// Defines values for ScheduledReportFileType.
const (
	ScheduledReportFileTypePDF ScheduledReportFileType = "PDF"
	ScheduledReportFileTypeXLS ScheduledReportFileType = "XLS"
)

// Defines values for ScheduledReportOnWeekday.
const (
	ScheduledReportOnWeekdayN1 ScheduledReportOnWeekday = 1
	ScheduledReportOnWeekdayN2 ScheduledReportOnWeekday = 2
	ScheduledReportOnWeekdayN3 ScheduledReportOnWeekday = 3
	ScheduledReportOnWeekdayN4 ScheduledReportOnWeekday = 4
	ScheduledReportOnWeekdayN5 ScheduledReportOnWeekday = 5
	ScheduledReportOnWeekdayN6 ScheduledReportOnWeekday = 6
	ScheduledReportOnWeekdayN7 ScheduledReportOnWeekday = 7
)

// Defines values for ScheduledReportRecurrence.
const (
	ScheduledReportRecurrenceDAILY     ScheduledReportRecurrence = "DAILY"
	ScheduledReportRecurrenceMONTHLY   ScheduledReportRecurrence = "MONTHLY"
	ScheduledReportRecurrenceQUARTERLY ScheduledReportRecurrence = "QUARTERLY"
	ScheduledReportRecurrenceWEEKLY    ScheduledReportRecurrence = "WEEKLY"
	ScheduledReportRecurrenceYEARLY    ScheduledReportRecurrence = "YEARLY"
)

// Defines values for StatusPagePageType.
const (
	StatusPagePageTypeINTERNAL  StatusPagePageType = "INTERNAL"
	StatusPagePageTypePUBLIC    StatusPagePageType = "PUBLIC"
	StatusPagePageTypePUBLICSLA StatusPagePageType = "PUBLIC_SLA"
)

// Defines values for StatusPageUptimeCalculationType.
const (
	StatusPageUptimeCalculationTypeBYCHECKS    StatusPageUptimeCalculationType = "BY_CHECKS"
	StatusPageUptimeCalculationTypeBYINCIDENTS StatusPageUptimeCalculationType = "BY_INCIDENTS"
)

// Defines values for StatusPageCurrentStatusActiveIncidentsAffectedComponentsStatus.
const (
	StatusPageCurrentStatusActiveIncidentsAffectedComponentsStatusDegradedPerformance StatusPageCurrentStatusActiveIncidentsAffectedComponentsStatus = "degraded-performance"
	StatusPageCurrentStatusActiveIncidentsAffectedComponentsStatusMajorOutage         StatusPageCurrentStatusActiveIncidentsAffectedComponentsStatus = "major-outage"
	StatusPageCurrentStatusActiveIncidentsAffectedComponentsStatusPartialOutage       StatusPageCurrentStatusActiveIncidentsAffectedComponentsStatus = "partial-outage"
	StatusPageCurrentStatusActiveIncidentsAffectedComponentsStatusUnderMaintenance    StatusPageCurrentStatusActiveIncidentsAffectedComponentsStatus = "under-maintenance"
)

// Defines values for StatusPageCurrentStatusActiveIncidentsIncidentType.
const (
	StatusPageCurrentStatusActiveIncidentsIncidentTypeINCIDENT             StatusPageCurrentStatusActiveIncidentsIncidentType = "INCIDENT"
	StatusPageCurrentStatusActiveIncidentsIncidentTypeSCHEDULEDMAINTENANCE StatusPageCurrentStatusActiveIncidentsIncidentType = "SCHEDULED_MAINTENANCE"
)

// Defines values for StatusPageCurrentStatusActiveIncidentsUpdatesIncidentState.
const (
	StatusPageCurrentStatusActiveIncidentsUpdatesIncidentStateIdentified    StatusPageCurrentStatusActiveIncidentsUpdatesIncidentState = "identified"
	StatusPageCurrentStatusActiveIncidentsUpdatesIncidentStateInvestigating StatusPageCurrentStatusActiveIncidentsUpdatesIncidentState = "investigating"
	StatusPageCurrentStatusActiveIncidentsUpdatesIncidentStateMaintenance   StatusPageCurrentStatusActiveIncidentsUpdatesIncidentState = "maintenance"
	StatusPageCurrentStatusActiveIncidentsUpdatesIncidentStateMonitoring    StatusPageCurrentStatusActiveIncidentsUpdatesIncidentState = "monitoring"
	StatusPageCurrentStatusActiveIncidentsUpdatesIncidentStateNotification  StatusPageCurrentStatusActiveIncidentsUpdatesIncidentState = "notification"
	StatusPageCurrentStatusActiveIncidentsUpdatesIncidentStateResolved      StatusPageCurrentStatusActiveIncidentsUpdatesIncidentState = "resolved"
)

// Defines values for StatusPageCurrentStatusComponentsAutoSetStatus.
const (
	StatusPageCurrentStatusComponentsAutoSetStatusDegradedPerformance StatusPageCurrentStatusComponentsAutoSetStatus = "degraded-performance"
	StatusPageCurrentStatusComponentsAutoSetStatusMajorOutage         StatusPageCurrentStatusComponentsAutoSetStatus = "major-outage"
	StatusPageCurrentStatusComponentsAutoSetStatusPartialOutage       StatusPageCurrentStatusComponentsAutoSetStatus = "partial-outage"
	StatusPageCurrentStatusComponentsAutoSetStatusUnderMaintenance    StatusPageCurrentStatusComponentsAutoSetStatus = "under-maintenance"
)

// Defines values for StatusPageCurrentStatusComponentsStatus.
const (
	StatusPageCurrentStatusComponentsStatusDegradedPerformance StatusPageCurrentStatusComponentsStatus = "degraded-performance"
	StatusPageCurrentStatusComponentsStatusMajorOutage         StatusPageCurrentStatusComponentsStatus = "major-outage"
	StatusPageCurrentStatusComponentsStatusOperational         StatusPageCurrentStatusComponentsStatus = "operational"
	StatusPageCurrentStatusComponentsStatusPartialOutage       StatusPageCurrentStatusComponentsStatus = "partial-outage"
	StatusPageCurrentStatusComponentsStatusUnderMaintenance    StatusPageCurrentStatusComponentsStatus = "under-maintenance"
)

// Defines values for StatusPageCurrentStatusPageType.
const (
	StatusPageCurrentStatusPageTypeINTERNAL  StatusPageCurrentStatusPageType = "INTERNAL"
	StatusPageCurrentStatusPageTypePUBLIC    StatusPageCurrentStatusPageType = "PUBLIC"
	StatusPageCurrentStatusPageTypePUBLICSLA StatusPageCurrentStatusPageType = "PUBLIC_SLA"
)

// Defines values for StatusPageCurrentStatusUpcomingMaintenanceAffectedComponentsStatus.
const (
	StatusPageCurrentStatusUpcomingMaintenanceAffectedComponentsStatusDegradedPerformance StatusPageCurrentStatusUpcomingMaintenanceAffectedComponentsStatus = "degraded-performance"
	StatusPageCurrentStatusUpcomingMaintenanceAffectedComponentsStatusMajorOutage         StatusPageCurrentStatusUpcomingMaintenanceAffectedComponentsStatus = "major-outage"
	StatusPageCurrentStatusUpcomingMaintenanceAffectedComponentsStatusPartialOutage       StatusPageCurrentStatusUpcomingMaintenanceAffectedComponentsStatus = "partial-outage"
	StatusPageCurrentStatusUpcomingMaintenanceAffectedComponentsStatusUnderMaintenance    StatusPageCurrentStatusUpcomingMaintenanceAffectedComponentsStatus = "under-maintenance"
)

// Defines values for StatusPageCurrentStatusUpcomingMaintenanceIncidentType.
const (
	StatusPageCurrentStatusUpcomingMaintenanceIncidentTypeINCIDENT             StatusPageCurrentStatusUpcomingMaintenanceIncidentType = "INCIDENT"
	StatusPageCurrentStatusUpcomingMaintenanceIncidentTypeSCHEDULEDMAINTENANCE StatusPageCurrentStatusUpcomingMaintenanceIncidentType = "SCHEDULED_MAINTENANCE"
)

// Defines values for StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentState.
const (
	StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentStateIdentified    StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentState = "identified"
	StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentStateInvestigating StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentState = "investigating"
	StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentStateMaintenance   StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentState = "maintenance"
	StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentStateMonitoring    StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentState = "monitoring"
	StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentStateNotification  StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentState = "notification"
	StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentStateResolved      StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentState = "resolved"
)

// Defines values for StatusPageHistoryPageType.
const (
	StatusPageHistoryPageTypeINTERNAL  StatusPageHistoryPageType = "INTERNAL"
	StatusPageHistoryPageTypePUBLIC    StatusPageHistoryPageType = "PUBLIC"
	StatusPageHistoryPageTypePUBLICSLA StatusPageHistoryPageType = "PUBLIC_SLA"
)

// Defines values for StatusPageHistoryPastIncidentsAffectedComponentsStatus.
const (
	StatusPageHistoryPastIncidentsAffectedComponentsStatusDegradedPerformance StatusPageHistoryPastIncidentsAffectedComponentsStatus = "degraded-performance"
	StatusPageHistoryPastIncidentsAffectedComponentsStatusMajorOutage         StatusPageHistoryPastIncidentsAffectedComponentsStatus = "major-outage"
	StatusPageHistoryPastIncidentsAffectedComponentsStatusPartialOutage       StatusPageHistoryPastIncidentsAffectedComponentsStatus = "partial-outage"
	StatusPageHistoryPastIncidentsAffectedComponentsStatusUnderMaintenance    StatusPageHistoryPastIncidentsAffectedComponentsStatus = "under-maintenance"
)

// Defines values for StatusPageHistoryPastIncidentsIncidentType.
const (
	StatusPageHistoryPastIncidentsIncidentTypeINCIDENT             StatusPageHistoryPastIncidentsIncidentType = "INCIDENT"
	StatusPageHistoryPastIncidentsIncidentTypeSCHEDULEDMAINTENANCE StatusPageHistoryPastIncidentsIncidentType = "SCHEDULED_MAINTENANCE"
)

// Defines values for StatusPageHistoryPastIncidentsUpdatesIncidentState.
const (
	StatusPageHistoryPastIncidentsUpdatesIncidentStateIdentified    StatusPageHistoryPastIncidentsUpdatesIncidentState = "identified"
	StatusPageHistoryPastIncidentsUpdatesIncidentStateInvestigating StatusPageHistoryPastIncidentsUpdatesIncidentState = "investigating"
	StatusPageHistoryPastIncidentsUpdatesIncidentStateMaintenance   StatusPageHistoryPastIncidentsUpdatesIncidentState = "maintenance"
	StatusPageHistoryPastIncidentsUpdatesIncidentStateMonitoring    StatusPageHistoryPastIncidentsUpdatesIncidentState = "monitoring"
	StatusPageHistoryPastIncidentsUpdatesIncidentStateNotification  StatusPageHistoryPastIncidentsUpdatesIncidentState = "notification"
	StatusPageHistoryPastIncidentsUpdatesIncidentStateResolved      StatusPageHistoryPastIncidentsUpdatesIncidentState = "resolved"
)

// Defines values for StatusPageHistoryUptimeCalculationType.
const (
	StatusPageHistoryUptimeCalculationTypeBYCHECKS    StatusPageHistoryUptimeCalculationType = "BY_CHECKS"
	StatusPageHistoryUptimeCalculationTypeBYINCIDENTS StatusPageHistoryUptimeCalculationType = "BY_INCIDENTS"
)

// Defines values for UserAccessLevel.
const (
	UserAccessLevelN10READ  UserAccessLevel = "10-READ"
	UserAccessLevelN30WRITE UserAccessLevel = "30-WRITE"
	UserAccessLevelN50ADMIN UserAccessLevel = "50-ADMIN"
)

// Defines values for UserRequireTwoFactor.
const (
	UserRequireTwoFactorACCOUNTDEFAULT UserRequireTwoFactor = "ACCOUNT_DEFAULT"
	UserRequireTwoFactorDONOTREQUIRE   UserRequireTwoFactor = "DO_NOT_REQUIRE"
	UserRequireTwoFactorREQUIRE        UserRequireTwoFactor = "REQUIRE"
)

// AuthTokenWithTOTP defines model for AuthTokenWithTOTP.
type AuthTokenWithTOTP struct {
	// Enter your two-factor authentication (2FA) code from your authenticator.
	Code *int `json:"code,omitempty"`

	// Email address for login.
	Email    *string `json:"email,omitempty"`
	Password *string `json:"password,omitempty"`
	Token    *string `json:"token,omitempty"`
}

// BulkChecksAction defines model for BulkChecksAction.
type BulkChecksAction struct {
	Pk *[]int `json:"pk,omitempty"`
}

// CheckContactGroups defines model for CheckContactGroups.
type CheckContactGroups struct {
	// An array of contact group names or IDs to set on this check
	ContactGroups *[]string `json:"contact_groups,omitempty"`
}

// CheckEscalations defines model for CheckEscalations.
type CheckEscalations struct {
	// A list of escalations to set on this check; see example above.
	Escalations *[]struct {
		ContactGroups []string `json:"contact_groups"`
		WaitTime      int      `json:"wait_time"`
	} `json:"escalations,omitempty"`
}

// CheckLocations defines model for CheckLocations.
type CheckLocations struct {
	// An array of location names to add to this check
	Locations *[]string `json:"locations,omitempty"`
}

// CheckMaintenance defines model for CheckMaintenance.
type CheckMaintenance struct {
	// The schedule entries for maintenance windows; see example above.
	Schedule *[]struct {
		FromTime     string                       `json:"from_time"`
		Id           *int                         `json:"id,omitempty"`
		Monthday     *int                         `json:"monthday,omitempty"`
		MonthdayFrom *int                         `json:"monthday_from,omitempty"`
		MonthdayTo   *int                         `json:"monthday_to,omitempty"`
		ToTime       string                       `json:"to_time"`
		Type         CheckMaintenanceScheduleType `json:"type"`
		Weekdays     *[]int                       `json:"weekdays,omitempty"`
	} `json:"schedule,omitempty"`

	// Current state of the check; ACTIVE (alerts sent normally), SUPPRESSED (under maintenance), SCHEDULED (maintenance windows as defined in the schedule)
	State *CheckMaintenanceState `json:"state,omitempty"`
}

// CheckMaintenanceScheduleType defines model for CheckMaintenance.Schedule.Type.
type CheckMaintenanceScheduleType string

// Current state of the check; ACTIVE (alerts sent normally), SUPPRESSED (under maintenance), SCHEDULED (maintenance windows as defined in the schedule)
type CheckMaintenanceState string

// CheckStats defines model for CheckStats.
type CheckStats struct {
	AvailableLocations *[]interface{} `json:"available_locations,omitempty"`

	// Set this paramater to download an XLS containing the stats.
	Download *bool `json:"download,omitempty"`

	// The last day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	EndDate *time.Time `json:"end_date,omitempty"`

	// Include alert data for each outage in the period.
	IncludeAlerts *bool `json:"include_alerts,omitempty"`

	// Show response time for specified location only.
	Location *string `json:"location,omitempty"`

	// Include response time datapoints for all locations.
	LocationsResponseTimes *bool `json:"locations_response_times,omitempty"`

	// Set this paramater to download a PDF report.
	Pdf *bool `json:"pdf,omitempty"`
	Pk  *int  `json:"pk,omitempty"`

	// The first day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	StartDate  *time.Time                `json:"start_date,omitempty"`
	Statistics *[]map[string]interface{} `json:"statistics,omitempty"`
	Totals     *map[string]interface{}   `json:"totals,omitempty"`
}

// CheckTag defines model for CheckTag.
type CheckTag struct {
	// The CSS color code of the tag, eg. #334455
	ColorHex string `json:"color_hex"`
	Pk       *int   `json:"pk,omitempty"`

	// The name of this tag
	Tag string  `json:"tag"`
	Url *string `json:"url,omitempty"`
}

// CheckTags defines model for CheckTags.
type CheckTags struct {
	// An array of tags names or IDs to set on this check
	Tags *[]string `json:"tags,omitempty"`
}

// Checks defines model for Checks.
type Checks struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Array of locations associated with this check
	Locations                 *[]string                  `json:"locations,omitempty"`
	Maintenance               *string                    `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time                 `json:"modified_at,omitempty"`
	MonitoringServiceType     *string                    `json:"monitoring_service_type,omitempty"`
	MspAddress                string                     `json:"msp_address"`
	MspDnsRecordType          *ChecksMspDnsRecordType    `json:"msp_dns_record_type,omitempty"`
	MspDnsServer              *string                    `json:"msp_dns_server,omitempty"`
	MspEncryption             *ChecksMspEncryption       `json:"msp_encryption,omitempty"`
	MspExpectString           *string                    `json:"msp_expect_string,omitempty"`
	MspExpectStringType       *ChecksMspExpectStringType `json:"msp_expect_string_type,omitempty"`
	MspHeaders                *string                    `json:"msp_headers,omitempty"`
	MspIncludeInGlobalMetrics *bool                      `json:"msp_include_in_global_metrics,omitempty"`
	MspInterval               *int                       `json:"msp_interval,omitempty"`
	MspNotes                  *string                    `json:"msp_notes,omitempty"`
	MspNumRetries             *int                       `json:"msp_num_retries,omitempty"`
	MspPassword               *string                    `json:"msp_password,omitempty"`
	MspPort                   *int                       `json:"msp_port"`
	MspProtocol               *ChecksMspProtocol         `json:"msp_protocol,omitempty"`
	MspProxy                  *string                    `json:"msp_proxy,omitempty"`
	MspResponseTimeSla        *string                    `json:"msp_response_time_sla"`
	MspScript                 *string                    `json:"msp_script,omitempty"`
	MspSendString             *string                    `json:"msp_send_string,omitempty"`
	MspSensitivity            *int                       `json:"msp_sensitivity,omitempty"`
	MspStatusCode             *string                    `json:"msp_status_code,omitempty"`
	MspThreshold              *int                       `json:"msp_threshold"`
	MspUptimeSla              *string                    `json:"msp_uptime_sla,omitempty"`
	MspUseIpVersion           *ChecksMspUseIpVersion     `json:"msp_use_ip_version,omitempty"`
	MspUsername               *string                    `json:"msp_username,omitempty"`
	MspVersion                *int                       `json:"msp_version,omitempty"`
	Name                      *string                    `json:"name,omitempty"`
	Pk                        *int                       `json:"pk,omitempty"`
	StateChangedAt            *time.Time                 `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool                      `json:"state_is_up,omitempty"`
	StatsUrl                  *string                    `json:"stats_url,omitempty"`

	// Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksMspDnsRecordType defines model for Checks.MspDnsRecordType.
type ChecksMspDnsRecordType string

// ChecksMspEncryption defines model for Checks.MspEncryption.
type ChecksMspEncryption string

// ChecksMspExpectStringType defines model for Checks.MspExpectStringType.
type ChecksMspExpectStringType string

// ChecksMspProtocol defines model for Checks.MspProtocol.
type ChecksMspProtocol string

// ChecksMspUseIpVersion defines model for Checks.MspUseIpVersion.
type ChecksMspUseIpVersion string

// ChecksAPI defines model for ChecksAPI.
type ChecksAPI struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Array of locations associated with this check
	Locations                 *[]string                 `json:"locations,omitempty"`
	Maintenance               *string                   `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time                `json:"modified_at,omitempty"`
	MonitoringServiceType     *string                   `json:"monitoring_service_type,omitempty"`
	MspAddress                string                    `json:"msp_address"`
	MspIncludeInGlobalMetrics *bool                     `json:"msp_include_in_global_metrics,omitempty"`
	MspInterval               int                       `json:"msp_interval"`
	MspNotes                  *string                   `json:"msp_notes,omitempty"`
	MspNumRetries             *int                      `json:"msp_num_retries,omitempty"`
	MspResponseTimeSla        *string                   `json:"msp_response_time_sla"`
	MspScript                 string                    `json:"msp_script"`
	MspSensitivity            *int                      `json:"msp_sensitivity,omitempty"`
	MspThreshold              *int                      `json:"msp_threshold"`
	MspUptimeSla              *string                   `json:"msp_uptime_sla,omitempty"`
	MspUseIpVersion           *ChecksAPIMspUseIpVersion `json:"msp_use_ip_version,omitempty"`
	Name                      *string                   `json:"name,omitempty"`
	Pk                        *int                      `json:"pk,omitempty"`
	StateChangedAt            *time.Time                `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool                     `json:"state_is_up,omitempty"`
	StatsUrl                  *string                   `json:"stats_url,omitempty"`

	// Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksAPIMspUseIpVersion defines model for ChecksAPI.MspUseIpVersion.
type ChecksAPIMspUseIpVersion string

// ChecksBLACKLIST defines model for ChecksBLACKLIST.
type ChecksBLACKLIST struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Array of locations associated with this check
	Locations             *[]string  `json:"locations,omitempty"`
	Maintenance           *string    `json:"maintenance,omitempty"`
	ModifiedAt            *time.Time `json:"modified_at,omitempty"`
	MonitoringServiceType *string    `json:"monitoring_service_type,omitempty"`
	MspAddress            string     `json:"msp_address"`
	MspNotes              *string    `json:"msp_notes,omitempty"`
	MspNumRetries         *int       `json:"msp_num_retries,omitempty"`
	MspUptimeSla          *string    `json:"msp_uptime_sla,omitempty"`
	Name                  *string    `json:"name,omitempty"`
	Pk                    *int       `json:"pk,omitempty"`
	StateChangedAt        *time.Time `json:"state_changed_at,omitempty"`
	StateIsUp             *bool      `json:"state_is_up,omitempty"`
	StatsUrl              *string    `json:"stats_url,omitempty"`

	// Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksBulkStats defines model for ChecksBulkStats.
type ChecksBulkStats struct {
	Checks *[]map[string]interface{} `json:"checks,omitempty"`

	// The last day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	EndDate *time.Time `json:"end_date,omitempty"`

	// Include alert data for each outage in the period.
	IncludeAlerts *bool  `json:"include_alerts,omitempty"`
	Pk            *[]int `json:"pk,omitempty"`

	// The first day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	StartDate *time.Time              `json:"start_date,omitempty"`
	Totals    *map[string]interface{} `json:"totals,omitempty"`
}

// ChecksBulkUpdate defines model for ChecksBulkUpdate.
type ChecksBulkUpdate struct {
	Fields *struct {
		AlertsUrl          *string  `json:"alerts_url,omitempty"`
		CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
		CheckType          *string  `json:"check_type,omitempty"`

		// Array of contact names or IDs associated with this check
		ContactGroups      []string   `json:"contact_groups"`
		CreatedAt          *time.Time `json:"created_at,omitempty"`
		Escalations        *string    `json:"escalations,omitempty"`
		IsPaused           *bool      `json:"is_paused,omitempty"`
		IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

		// Array of locations associated with this check
		Locations                 *[]string                                  `json:"locations,omitempty"`
		Maintenance               *string                                    `json:"maintenance,omitempty"`
		ModifiedAt                *time.Time                                 `json:"modified_at,omitempty"`
		MonitoringServiceType     *string                                    `json:"monitoring_service_type,omitempty"`
		MspAddress                string                                     `json:"msp_address"`
		MspDnsRecordType          *ChecksBulkUpdateFieldsMspDnsRecordType    `json:"msp_dns_record_type,omitempty"`
		MspDnsServer              *string                                    `json:"msp_dns_server,omitempty"`
		MspEncryption             *ChecksBulkUpdateFieldsMspEncryption       `json:"msp_encryption,omitempty"`
		MspExpectString           *string                                    `json:"msp_expect_string,omitempty"`
		MspExpectStringType       *ChecksBulkUpdateFieldsMspExpectStringType `json:"msp_expect_string_type,omitempty"`
		MspHeaders                *string                                    `json:"msp_headers,omitempty"`
		MspIncludeInGlobalMetrics *bool                                      `json:"msp_include_in_global_metrics,omitempty"`
		MspInterval               *int                                       `json:"msp_interval,omitempty"`
		MspNotes                  *string                                    `json:"msp_notes,omitempty"`
		MspNumRetries             *int                                       `json:"msp_num_retries,omitempty"`
		MspPassword               *string                                    `json:"msp_password,omitempty"`
		MspPort                   *int                                       `json:"msp_port"`
		MspProtocol               *ChecksBulkUpdateFieldsMspProtocol         `json:"msp_protocol,omitempty"`
		MspProxy                  *string                                    `json:"msp_proxy,omitempty"`
		MspResponseTimeSla        *string                                    `json:"msp_response_time_sla"`
		MspScript                 *string                                    `json:"msp_script,omitempty"`
		MspSendString             *string                                    `json:"msp_send_string,omitempty"`
		MspSensitivity            *int                                       `json:"msp_sensitivity,omitempty"`
		MspStatusCode             *string                                    `json:"msp_status_code,omitempty"`
		MspThreshold              *int                                       `json:"msp_threshold"`
		MspUptimeSla              *string                                    `json:"msp_uptime_sla,omitempty"`
		MspUseIpVersion           *ChecksBulkUpdateFieldsMspUseIpVersion     `json:"msp_use_ip_version,omitempty"`
		MspUsername               *string                                    `json:"msp_username,omitempty"`
		MspVersion                *int                                       `json:"msp_version,omitempty"`
		Name                      *string                                    `json:"name,omitempty"`
		Pk                        *int                                       `json:"pk,omitempty"`
		StateChangedAt            *time.Time                                 `json:"state_changed_at,omitempty"`
		StateIsUp                 *bool                                      `json:"state_is_up,omitempty"`
		StatsUrl                  *string                                    `json:"stats_url,omitempty"`

		// Array of tag names or IDs associated with this check
		Tags *[]string `json:"tags,omitempty"`
		Url  *string   `json:"url,omitempty"`
	} `json:"fields,omitempty"`
	Pk *[]int `json:"pk,omitempty"`
}

// ChecksBulkUpdateFieldsMspDnsRecordType defines model for ChecksBulkUpdate.Fields.MspDnsRecordType.
type ChecksBulkUpdateFieldsMspDnsRecordType string

// ChecksBulkUpdateFieldsMspEncryption defines model for ChecksBulkUpdate.Fields.MspEncryption.
type ChecksBulkUpdateFieldsMspEncryption string

// ChecksBulkUpdateFieldsMspExpectStringType defines model for ChecksBulkUpdate.Fields.MspExpectStringType.
type ChecksBulkUpdateFieldsMspExpectStringType string

// ChecksBulkUpdateFieldsMspProtocol defines model for ChecksBulkUpdate.Fields.MspProtocol.
type ChecksBulkUpdateFieldsMspProtocol string

// ChecksBulkUpdateFieldsMspUseIpVersion defines model for ChecksBulkUpdate.Fields.MspUseIpVersion.
type ChecksBulkUpdateFieldsMspUseIpVersion string

// ChecksBulkUpdateEscalations defines model for ChecksBulkUpdateEscalations.
type ChecksBulkUpdateEscalations struct {
	Fields *struct {
		// A list of escalations to set on this check; see example above.
		Escalations *[]struct {
			ContactGroups []string `json:"contact_groups"`
			WaitTime      int      `json:"wait_time"`
		} `json:"escalations,omitempty"`
	} `json:"fields,omitempty"`
	Pk *[]int `json:"pk,omitempty"`
}

// ChecksBulkUpdateMaintenance defines model for ChecksBulkUpdateMaintenance.
type ChecksBulkUpdateMaintenance struct {
	Fields *struct {
		// The schedule entries for maintenance windows; see example above.
		Schedule *[]struct {
			FromTime     string                                        `json:"from_time"`
			Id           *int                                          `json:"id,omitempty"`
			Monthday     *int                                          `json:"monthday,omitempty"`
			MonthdayFrom *int                                          `json:"monthday_from,omitempty"`
			MonthdayTo   *int                                          `json:"monthday_to,omitempty"`
			ToTime       string                                        `json:"to_time"`
			Type         ChecksBulkUpdateMaintenanceFieldsScheduleType `json:"type"`
			Weekdays     *[]int                                        `json:"weekdays,omitempty"`
		} `json:"schedule,omitempty"`

		// Current state of the check; ACTIVE (alerts sent normally), SUPPRESSED (under maintenance), SCHEDULED (maintenance windows as defined in the schedule)
		State *ChecksBulkUpdateMaintenanceFieldsState `json:"state,omitempty"`
	} `json:"fields,omitempty"`
	Pk *[]int `json:"pk,omitempty"`
}

// ChecksBulkUpdateMaintenanceFieldsScheduleType defines model for ChecksBulkUpdateMaintenance.Fields.Schedule.Type.
type ChecksBulkUpdateMaintenanceFieldsScheduleType string

// Current state of the check; ACTIVE (alerts sent normally), SUPPRESSED (under maintenance), SCHEDULED (maintenance windows as defined in the schedule)
type ChecksBulkUpdateMaintenanceFieldsState string

// ChecksDNS defines model for ChecksDNS.
type ChecksDNS struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Array of locations associated with this check
	Locations                 *[]string                 `json:"locations,omitempty"`
	Maintenance               *string                   `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time                `json:"modified_at,omitempty"`
	MonitoringServiceType     *string                   `json:"monitoring_service_type,omitempty"`
	MspAddress                string                    `json:"msp_address"`
	MspDnsRecordType          ChecksDNSMspDnsRecordType `json:"msp_dns_record_type"`
	MspDnsServer              *string                   `json:"msp_dns_server,omitempty"`
	MspExpectString           *string                   `json:"msp_expect_string,omitempty"`
	MspIncludeInGlobalMetrics *bool                     `json:"msp_include_in_global_metrics,omitempty"`
	MspInterval               int                       `json:"msp_interval"`
	MspNotes                  *string                   `json:"msp_notes,omitempty"`
	MspNumRetries             *int                      `json:"msp_num_retries,omitempty"`
	MspResponseTimeSla        *string                   `json:"msp_response_time_sla"`
	MspSensitivity            *int                      `json:"msp_sensitivity,omitempty"`
	MspThreshold              *int                      `json:"msp_threshold"`
	MspUptimeSla              *string                   `json:"msp_uptime_sla,omitempty"`
	Name                      *string                   `json:"name,omitempty"`
	Pk                        *int                      `json:"pk,omitempty"`
	StateChangedAt            *time.Time                `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool                     `json:"state_is_up,omitempty"`
	StatsUrl                  *string                   `json:"stats_url,omitempty"`

	// Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksDNSMspDnsRecordType defines model for ChecksDNS.MspDnsRecordType.
type ChecksDNSMspDnsRecordType string

// ChecksGROUP defines model for ChecksGROUP.
type ChecksGROUP struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// Array of contact names or IDs associated with this check
	ContactGroups    []string   `json:"contact_groups"`
	CreatedAt        *time.Time `json:"created_at,omitempty"`
	Escalations      *string    `json:"escalations,omitempty"`
	Groupcheckconfig *struct {
		GroupCheckDownCondition *ChecksGROUPGroupcheckconfigGroupCheckDownCondition `json:"group_check_down_condition,omitempty"`

		// Include checks from this list
		GroupCheckServices *[]string `json:"group_check_services,omitempty"`

		// Include checks with one or more of the selected tags
		GroupCheckTags                *[]string                                                 `json:"group_check_tags,omitempty"`
		GroupUptimePercentCalculation *ChecksGROUPGroupcheckconfigGroupUptimePercentCalculation `json:"group_uptime_percent_calculation,omitempty"`
	} `json:"groupcheckconfig"`
	IsPaused           *bool `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool `json:"is_under_maintenance,omitempty"`

	// Array of locations associated with this check
	Locations                 *[]string  `json:"locations,omitempty"`
	Maintenance               *string    `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time `json:"modified_at,omitempty"`
	MonitoringServiceType     *string    `json:"monitoring_service_type,omitempty"`
	MspIncludeInGlobalMetrics *bool      `json:"msp_include_in_global_metrics,omitempty"`
	MspNotes                  *string    `json:"msp_notes,omitempty"`
	MspResponseTimeSla        *string    `json:"msp_response_time_sla"`
	MspUptimeSla              *string    `json:"msp_uptime_sla,omitempty"`
	Name                      *string    `json:"name,omitempty"`
	Pk                        *int       `json:"pk,omitempty"`
	StateChangedAt            *time.Time `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool      `json:"state_is_up,omitempty"`
	StatsUrl                  *string    `json:"stats_url,omitempty"`

	// Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksGROUPGroupcheckconfigGroupCheckDownCondition defines model for ChecksGROUP.Groupcheckconfig.GroupCheckDownCondition.
type ChecksGROUPGroupcheckconfigGroupCheckDownCondition string

// ChecksGROUPGroupcheckconfigGroupUptimePercentCalculation defines model for ChecksGROUP.Groupcheckconfig.GroupUptimePercentCalculation.
type ChecksGROUPGroupcheckconfigGroupUptimePercentCalculation string

// ChecksHEARTBEAT defines model for ChecksHEARTBEAT.
type ChecksHEARTBEAT struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	HeartbeatUrl       *string    `json:"heartbeat_url,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Array of locations associated with this check
	Locations                 *[]string  `json:"locations,omitempty"`
	Maintenance               *string    `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time `json:"modified_at,omitempty"`
	MonitoringServiceType     *string    `json:"monitoring_service_type,omitempty"`
	MspIncludeInGlobalMetrics *bool      `json:"msp_include_in_global_metrics,omitempty"`
	MspInterval               int        `json:"msp_interval"`
	MspNotes                  *string    `json:"msp_notes,omitempty"`
	MspResponseTimeSla        *string    `json:"msp_response_time_sla"`
	MspUptimeSla              *string    `json:"msp_uptime_sla,omitempty"`
	Name                      *string    `json:"name,omitempty"`
	Pk                        *int       `json:"pk,omitempty"`
	StateChangedAt            *time.Time `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool      `json:"state_is_up,omitempty"`
	StatsUrl                  *string    `json:"stats_url,omitempty"`

	// Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksHTTP defines model for ChecksHTTP.
type ChecksHTTP struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Array of locations associated with this check
	Locations                 *[]string                      `json:"locations,omitempty"`
	Maintenance               *string                        `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time                     `json:"modified_at,omitempty"`
	MonitoringServiceType     *string                        `json:"monitoring_service_type,omitempty"`
	MspAddress                string                         `json:"msp_address"`
	MspEncryption             *ChecksHTTPMspEncryption       `json:"msp_encryption,omitempty"`
	MspExpectString           *string                        `json:"msp_expect_string,omitempty"`
	MspExpectStringType       *ChecksHTTPMspExpectStringType `json:"msp_expect_string_type,omitempty"`
	MspHeaders                *string                        `json:"msp_headers,omitempty"`
	MspIncludeInGlobalMetrics *bool                          `json:"msp_include_in_global_metrics,omitempty"`
	MspInterval               int                            `json:"msp_interval"`
	MspNotes                  *string                        `json:"msp_notes,omitempty"`
	MspNumRetries             *int                           `json:"msp_num_retries,omitempty"`
	MspPassword               *string                        `json:"msp_password,omitempty"`
	MspPort                   *int                           `json:"msp_port"`
	MspProxy                  *string                        `json:"msp_proxy,omitempty"`
	MspResponseTimeSla        *string                        `json:"msp_response_time_sla"`
	MspSendString             *string                        `json:"msp_send_string,omitempty"`
	MspSensitivity            *int                           `json:"msp_sensitivity,omitempty"`
	MspStatusCode             *string                        `json:"msp_status_code,omitempty"`
	MspThreshold              *int                           `json:"msp_threshold"`
	MspUptimeSla              *string                        `json:"msp_uptime_sla,omitempty"`
	MspUseIpVersion           *ChecksHTTPMspUseIpVersion     `json:"msp_use_ip_version,omitempty"`
	MspUsername               *string                        `json:"msp_username,omitempty"`
	MspVersion                *int                           `json:"msp_version,omitempty"`
	Name                      *string                        `json:"name,omitempty"`
	Pk                        *int                           `json:"pk,omitempty"`
	StateChangedAt            *time.Time                     `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool                          `json:"state_is_up,omitempty"`
	StatsUrl                  *string                        `json:"stats_url,omitempty"`

	// Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksHTTPMspEncryption defines model for ChecksHTTP.MspEncryption.
type ChecksHTTPMspEncryption string

// ChecksHTTPMspExpectStringType defines model for ChecksHTTP.MspExpectStringType.
type ChecksHTTPMspExpectStringType string

// ChecksHTTPMspUseIpVersion defines model for ChecksHTTP.MspUseIpVersion.
type ChecksHTTPMspUseIpVersion string

// ChecksICMP defines model for ChecksICMP.
type ChecksICMP struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Array of locations associated with this check
	Locations                 *[]string                  `json:"locations,omitempty"`
	Maintenance               *string                    `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time                 `json:"modified_at,omitempty"`
	MonitoringServiceType     *string                    `json:"monitoring_service_type,omitempty"`
	MspAddress                string                     `json:"msp_address"`
	MspIncludeInGlobalMetrics *bool                      `json:"msp_include_in_global_metrics,omitempty"`
	MspInterval               int                        `json:"msp_interval"`
	MspNotes                  *string                    `json:"msp_notes,omitempty"`
	MspNumRetries             *int                       `json:"msp_num_retries,omitempty"`
	MspResponseTimeSla        *string                    `json:"msp_response_time_sla"`
	MspSensitivity            *int                       `json:"msp_sensitivity,omitempty"`
	MspUptimeSla              *string                    `json:"msp_uptime_sla,omitempty"`
	MspUseIpVersion           *ChecksICMPMspUseIpVersion `json:"msp_use_ip_version,omitempty"`
	Name                      *string                    `json:"name,omitempty"`
	Pk                        *int                       `json:"pk,omitempty"`
	StateChangedAt            *time.Time                 `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool                      `json:"state_is_up,omitempty"`
	StatsUrl                  *string                    `json:"stats_url,omitempty"`

	// Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksICMPMspUseIpVersion defines model for ChecksICMP.MspUseIpVersion.
type ChecksICMPMspUseIpVersion string

// ChecksIMAP defines model for ChecksIMAP.
type ChecksIMAP struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Array of locations associated with this check
	Locations                 *[]string                  `json:"locations,omitempty"`
	Maintenance               *string                    `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time                 `json:"modified_at,omitempty"`
	MonitoringServiceType     *string                    `json:"monitoring_service_type,omitempty"`
	MspAddress                string                     `json:"msp_address"`
	MspEncryption             *ChecksIMAPMspEncryption   `json:"msp_encryption,omitempty"`
	MspExpectString           *string                    `json:"msp_expect_string,omitempty"`
	MspIncludeInGlobalMetrics *bool                      `json:"msp_include_in_global_metrics,omitempty"`
	MspInterval               int                        `json:"msp_interval"`
	MspNotes                  *string                    `json:"msp_notes,omitempty"`
	MspNumRetries             *int                       `json:"msp_num_retries,omitempty"`
	MspPort                   *int                       `json:"msp_port"`
	MspResponseTimeSla        *string                    `json:"msp_response_time_sla"`
	MspSensitivity            *int                       `json:"msp_sensitivity,omitempty"`
	MspUptimeSla              *string                    `json:"msp_uptime_sla,omitempty"`
	MspUseIpVersion           *ChecksIMAPMspUseIpVersion `json:"msp_use_ip_version,omitempty"`
	Name                      *string                    `json:"name,omitempty"`
	Pk                        *int                       `json:"pk,omitempty"`
	StateChangedAt            *time.Time                 `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool                      `json:"state_is_up,omitempty"`
	StatsUrl                  *string                    `json:"stats_url,omitempty"`

	// Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksIMAPMspEncryption defines model for ChecksIMAP.MspEncryption.
type ChecksIMAPMspEncryption string

// ChecksIMAPMspUseIpVersion defines model for ChecksIMAP.MspUseIpVersion.
type ChecksIMAPMspUseIpVersion string

// ChecksMALWARE defines model for ChecksMALWARE.
type ChecksMALWARE struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Array of locations associated with this check
	Locations             *[]string  `json:"locations,omitempty"`
	Maintenance           *string    `json:"maintenance,omitempty"`
	ModifiedAt            *time.Time `json:"modified_at,omitempty"`
	MonitoringServiceType *string    `json:"monitoring_service_type,omitempty"`
	MspAddress            string     `json:"msp_address"`
	MspNotes              *string    `json:"msp_notes,omitempty"`
	MspNumRetries         *int       `json:"msp_num_retries,omitempty"`
	MspUptimeSla          *string    `json:"msp_uptime_sla,omitempty"`
	Name                  *string    `json:"name,omitempty"`
	Pk                    *int       `json:"pk,omitempty"`
	StateChangedAt        *time.Time `json:"state_changed_at,omitempty"`
	StateIsUp             *bool      `json:"state_is_up,omitempty"`
	StatsUrl              *string    `json:"stats_url,omitempty"`

	// Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksNTP defines model for ChecksNTP.
type ChecksNTP struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Array of locations associated with this check
	Locations                 *[]string                 `json:"locations,omitempty"`
	Maintenance               *string                   `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time                `json:"modified_at,omitempty"`
	MonitoringServiceType     *string                   `json:"monitoring_service_type,omitempty"`
	MspAddress                string                    `json:"msp_address"`
	MspIncludeInGlobalMetrics *bool                     `json:"msp_include_in_global_metrics,omitempty"`
	MspInterval               int                       `json:"msp_interval"`
	MspNotes                  *string                   `json:"msp_notes,omitempty"`
	MspNumRetries             *int                      `json:"msp_num_retries,omitempty"`
	MspPort                   *int                      `json:"msp_port"`
	MspResponseTimeSla        *string                   `json:"msp_response_time_sla"`
	MspSensitivity            *int                      `json:"msp_sensitivity,omitempty"`
	MspThreshold              *int                      `json:"msp_threshold"`
	MspUptimeSla              *string                   `json:"msp_uptime_sla,omitempty"`
	MspUseIpVersion           *ChecksNTPMspUseIpVersion `json:"msp_use_ip_version,omitempty"`
	Name                      *string                   `json:"name,omitempty"`
	Pk                        *int                      `json:"pk,omitempty"`
	StateChangedAt            *time.Time                `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool                     `json:"state_is_up,omitempty"`
	StatsUrl                  *string                   `json:"stats_url,omitempty"`

	// Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksNTPMspUseIpVersion defines model for ChecksNTP.MspUseIpVersion.
type ChecksNTPMspUseIpVersion string

// ChecksPOP defines model for ChecksPOP.
type ChecksPOP struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Array of locations associated with this check
	Locations                 *[]string                 `json:"locations,omitempty"`
	Maintenance               *string                   `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time                `json:"modified_at,omitempty"`
	MonitoringServiceType     *string                   `json:"monitoring_service_type,omitempty"`
	MspAddress                string                    `json:"msp_address"`
	MspEncryption             *ChecksPOPMspEncryption   `json:"msp_encryption,omitempty"`
	MspExpectString           *string                   `json:"msp_expect_string,omitempty"`
	MspIncludeInGlobalMetrics *bool                     `json:"msp_include_in_global_metrics,omitempty"`
	MspInterval               int                       `json:"msp_interval"`
	MspNotes                  *string                   `json:"msp_notes,omitempty"`
	MspNumRetries             *int                      `json:"msp_num_retries,omitempty"`
	MspPort                   *int                      `json:"msp_port"`
	MspResponseTimeSla        *string                   `json:"msp_response_time_sla"`
	MspSensitivity            *int                      `json:"msp_sensitivity,omitempty"`
	MspUptimeSla              *string                   `json:"msp_uptime_sla,omitempty"`
	MspUseIpVersion           *ChecksPOPMspUseIpVersion `json:"msp_use_ip_version,omitempty"`
	Name                      *string                   `json:"name,omitempty"`
	Pk                        *int                      `json:"pk,omitempty"`
	StateChangedAt            *time.Time                `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool                     `json:"state_is_up,omitempty"`
	StatsUrl                  *string                   `json:"stats_url,omitempty"`

	// Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksPOPMspEncryption defines model for ChecksPOP.MspEncryption.
type ChecksPOPMspEncryption string

// ChecksPOPMspUseIpVersion defines model for ChecksPOP.MspUseIpVersion.
type ChecksPOPMspUseIpVersion string

// ChecksRUM defines model for ChecksRUM.
type ChecksRUM struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Array of locations associated with this check
	Locations                 *[]string  `json:"locations,omitempty"`
	Maintenance               *string    `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time `json:"modified_at,omitempty"`
	MonitoringServiceType     *string    `json:"monitoring_service_type,omitempty"`
	MspAddress                string     `json:"msp_address"`
	MspIncludeInGlobalMetrics *bool      `json:"msp_include_in_global_metrics,omitempty"`
	MspNotes                  *string    `json:"msp_notes,omitempty"`
	MspThreshold              *int       `json:"msp_threshold"`
	MspUptimeSla              *string    `json:"msp_uptime_sla,omitempty"`
	Name                      *string    `json:"name,omitempty"`
	Pk                        *int       `json:"pk,omitempty"`
	StateChangedAt            *time.Time `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool      `json:"state_is_up,omitempty"`
	StatsUrl                  *string    `json:"stats_url,omitempty"`

	// Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksRUM2 defines model for ChecksRUM2.
type ChecksRUM2 struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Array of locations associated with this check
	Locations                 *[]string  `json:"locations,omitempty"`
	Maintenance               *string    `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time `json:"modified_at,omitempty"`
	MonitoringServiceType     *string    `json:"monitoring_service_type,omitempty"`
	MspAddress                string     `json:"msp_address"`
	MspIncludeInGlobalMetrics *bool      `json:"msp_include_in_global_metrics,omitempty"`
	MspNotes                  *string    `json:"msp_notes,omitempty"`
	MspUptimeSla              *string    `json:"msp_uptime_sla,omitempty"`
	Name                      *string    `json:"name,omitempty"`
	Pk                        *int       `json:"pk,omitempty"`
	StateChangedAt            *time.Time `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool      `json:"state_is_up,omitempty"`
	StatsUrl                  *string    `json:"stats_url,omitempty"`

	// Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksSMTP defines model for ChecksSMTP.
type ChecksSMTP struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Array of locations associated with this check
	Locations                 *[]string                  `json:"locations,omitempty"`
	Maintenance               *string                    `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time                 `json:"modified_at,omitempty"`
	MonitoringServiceType     *string                    `json:"monitoring_service_type,omitempty"`
	MspAddress                string                     `json:"msp_address"`
	MspEncryption             *ChecksSMTPMspEncryption   `json:"msp_encryption,omitempty"`
	MspExpectString           *string                    `json:"msp_expect_string,omitempty"`
	MspIncludeInGlobalMetrics *bool                      `json:"msp_include_in_global_metrics,omitempty"`
	MspInterval               int                        `json:"msp_interval"`
	MspNotes                  *string                    `json:"msp_notes,omitempty"`
	MspNumRetries             *int                       `json:"msp_num_retries,omitempty"`
	MspPassword               *string                    `json:"msp_password,omitempty"`
	MspPort                   *int                       `json:"msp_port"`
	MspResponseTimeSla        *string                    `json:"msp_response_time_sla"`
	MspSensitivity            *int                       `json:"msp_sensitivity,omitempty"`
	MspUptimeSla              *string                    `json:"msp_uptime_sla,omitempty"`
	MspUseIpVersion           *ChecksSMTPMspUseIpVersion `json:"msp_use_ip_version,omitempty"`
	MspUsername               *string                    `json:"msp_username,omitempty"`
	Name                      *string                    `json:"name,omitempty"`
	Pk                        *int                       `json:"pk,omitempty"`
	StateChangedAt            *time.Time                 `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool                      `json:"state_is_up,omitempty"`
	StatsUrl                  *string                    `json:"stats_url,omitempty"`

	// Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksSMTPMspEncryption defines model for ChecksSMTP.MspEncryption.
type ChecksSMTPMspEncryption string

// ChecksSMTPMspUseIpVersion defines model for ChecksSMTP.MspUseIpVersion.
type ChecksSMTPMspUseIpVersion string

// ChecksSSH defines model for ChecksSSH.
type ChecksSSH struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Array of locations associated with this check
	Locations                 *[]string                 `json:"locations,omitempty"`
	Maintenance               *string                   `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time                `json:"modified_at,omitempty"`
	MonitoringServiceType     *string                   `json:"monitoring_service_type,omitempty"`
	MspAddress                string                    `json:"msp_address"`
	MspIncludeInGlobalMetrics *bool                     `json:"msp_include_in_global_metrics,omitempty"`
	MspInterval               int                       `json:"msp_interval"`
	MspNotes                  *string                   `json:"msp_notes,omitempty"`
	MspNumRetries             *int                      `json:"msp_num_retries,omitempty"`
	MspPort                   *int                      `json:"msp_port"`
	MspResponseTimeSla        *string                   `json:"msp_response_time_sla"`
	MspSensitivity            *int                      `json:"msp_sensitivity,omitempty"`
	MspUptimeSla              *string                   `json:"msp_uptime_sla,omitempty"`
	MspUseIpVersion           *ChecksSSHMspUseIpVersion `json:"msp_use_ip_version,omitempty"`
	Name                      *string                   `json:"name,omitempty"`
	Pk                        *int                      `json:"pk,omitempty"`
	StateChangedAt            *time.Time                `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool                     `json:"state_is_up,omitempty"`
	StatsUrl                  *string                   `json:"stats_url,omitempty"`

	// Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksSSHMspUseIpVersion defines model for ChecksSSH.MspUseIpVersion.
type ChecksSSHMspUseIpVersion string

// ChecksSSLCERT defines model for ChecksSSL_CERT.
type ChecksSSLCERT struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Array of locations associated with this check
	Locations             *[]string                `json:"locations,omitempty"`
	Maintenance           *string                  `json:"maintenance,omitempty"`
	ModifiedAt            *time.Time               `json:"modified_at,omitempty"`
	MonitoringServiceType *string                  `json:"monitoring_service_type,omitempty"`
	MspAddress            string                   `json:"msp_address"`
	MspNotes              *string                  `json:"msp_notes,omitempty"`
	MspNumRetries         *int                     `json:"msp_num_retries,omitempty"`
	MspPort               *int                     `json:"msp_port"`
	MspProtocol           ChecksSSLCERTMspProtocol `json:"msp_protocol"`
	MspThreshold          *int                     `json:"msp_threshold"`
	MspUptimeSla          *string                  `json:"msp_uptime_sla,omitempty"`
	Name                  *string                  `json:"name,omitempty"`
	Pk                    *int                     `json:"pk,omitempty"`
	StateChangedAt        *time.Time               `json:"state_changed_at,omitempty"`
	StateIsUp             *bool                    `json:"state_is_up,omitempty"`
	StatsUrl              *string                  `json:"stats_url,omitempty"`

	// Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksSSLCERTMspProtocol defines model for ChecksSSLCERT.MspProtocol.
type ChecksSSLCERTMspProtocol string

// ChecksTCP defines model for ChecksTCP.
type ChecksTCP struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Array of locations associated with this check
	Locations                 *[]string                 `json:"locations,omitempty"`
	Maintenance               *string                   `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time                `json:"modified_at,omitempty"`
	MonitoringServiceType     *string                   `json:"monitoring_service_type,omitempty"`
	MspAddress                string                    `json:"msp_address"`
	MspExpectString           *string                   `json:"msp_expect_string,omitempty"`
	MspIncludeInGlobalMetrics *bool                     `json:"msp_include_in_global_metrics,omitempty"`
	MspInterval               int                       `json:"msp_interval"`
	MspNotes                  *string                   `json:"msp_notes,omitempty"`
	MspNumRetries             *int                      `json:"msp_num_retries,omitempty"`
	MspPort                   *int                      `json:"msp_port"`
	MspResponseTimeSla        *string                   `json:"msp_response_time_sla"`
	MspSendString             *string                   `json:"msp_send_string,omitempty"`
	MspSensitivity            *int                      `json:"msp_sensitivity,omitempty"`
	MspUptimeSla              *string                   `json:"msp_uptime_sla,omitempty"`
	MspUseIpVersion           *ChecksTCPMspUseIpVersion `json:"msp_use_ip_version,omitempty"`
	Name                      *string                   `json:"name,omitempty"`
	Pk                        *int                      `json:"pk,omitempty"`
	StateChangedAt            *time.Time                `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool                     `json:"state_is_up,omitempty"`
	StatsUrl                  *string                   `json:"stats_url,omitempty"`

	// Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksTCPMspUseIpVersion defines model for ChecksTCP.MspUseIpVersion.
type ChecksTCPMspUseIpVersion string

// ChecksTRANSACTION defines model for ChecksTRANSACTION.
type ChecksTRANSACTION struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Array of locations associated with this check
	Locations                 *[]string  `json:"locations,omitempty"`
	Maintenance               *string    `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time `json:"modified_at,omitempty"`
	MonitoringServiceType     *string    `json:"monitoring_service_type,omitempty"`
	MspAddress                string     `json:"msp_address"`
	MspIncludeInGlobalMetrics *bool      `json:"msp_include_in_global_metrics,omitempty"`
	MspInterval               int        `json:"msp_interval"`
	MspNotes                  *string    `json:"msp_notes,omitempty"`
	MspNumRetries             *int       `json:"msp_num_retries,omitempty"`
	MspResponseTimeSla        *string    `json:"msp_response_time_sla"`
	MspScript                 string     `json:"msp_script"`
	MspSensitivity            *int       `json:"msp_sensitivity,omitempty"`
	MspThreshold              *int       `json:"msp_threshold"`
	MspUptimeSla              *string    `json:"msp_uptime_sla,omitempty"`
	Name                      *string    `json:"name,omitempty"`
	Pk                        *int       `json:"pk,omitempty"`
	StateChangedAt            *time.Time `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool      `json:"state_is_up,omitempty"`
	StatsUrl                  *string    `json:"stats_url,omitempty"`

	// Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksUDP defines model for ChecksUDP.
type ChecksUDP struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Array of locations associated with this check
	Locations                 *[]string                 `json:"locations,omitempty"`
	Maintenance               *string                   `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time                `json:"modified_at,omitempty"`
	MonitoringServiceType     *string                   `json:"monitoring_service_type,omitempty"`
	MspAddress                string                    `json:"msp_address"`
	MspExpectString           string                    `json:"msp_expect_string"`
	MspIncludeInGlobalMetrics *bool                     `json:"msp_include_in_global_metrics,omitempty"`
	MspInterval               int                       `json:"msp_interval"`
	MspNotes                  *string                   `json:"msp_notes,omitempty"`
	MspNumRetries             *int                      `json:"msp_num_retries,omitempty"`
	MspPort                   *int                      `json:"msp_port"`
	MspResponseTimeSla        *string                   `json:"msp_response_time_sla"`
	MspSendString             string                    `json:"msp_send_string"`
	MspSensitivity            *int                      `json:"msp_sensitivity,omitempty"`
	MspUptimeSla              *string                   `json:"msp_uptime_sla,omitempty"`
	MspUseIpVersion           *ChecksUDPMspUseIpVersion `json:"msp_use_ip_version,omitempty"`
	Name                      *string                   `json:"name,omitempty"`
	Pk                        *int                      `json:"pk,omitempty"`
	StateChangedAt            *time.Time                `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool                     `json:"state_is_up,omitempty"`
	StatsUrl                  *string                   `json:"stats_url,omitempty"`

	// Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksUDPMspUseIpVersion defines model for ChecksUDP.MspUseIpVersion.
type ChecksUDPMspUseIpVersion string

// ChecksWEBHOOK defines model for ChecksWEBHOOK.
type ChecksWEBHOOK struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Array of locations associated with this check
	Locations                 *[]string  `json:"locations,omitempty"`
	Maintenance               *string    `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time `json:"modified_at,omitempty"`
	MonitoringServiceType     *string    `json:"monitoring_service_type,omitempty"`
	MspIncludeInGlobalMetrics *bool      `json:"msp_include_in_global_metrics,omitempty"`
	MspNotes                  *string    `json:"msp_notes,omitempty"`
	MspResponseTimeSla        *string    `json:"msp_response_time_sla"`
	MspUptimeSla              *string    `json:"msp_uptime_sla,omitempty"`
	Name                      *string    `json:"name,omitempty"`
	Pk                        *int       `json:"pk,omitempty"`
	StateChangedAt            *time.Time `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool      `json:"state_is_up,omitempty"`
	StatsUrl                  *string    `json:"stats_url,omitempty"`

	// Array of tag names or IDs associated with this check
	Tags       *[]string `json:"tags,omitempty"`
	Url        *string   `json:"url,omitempty"`
	WebhookUrl *string   `json:"webhook_url,omitempty"`
}

// ChecksWHOIS defines model for ChecksWHOIS.
type ChecksWHOIS struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Array of locations associated with this check
	Locations             *[]string  `json:"locations,omitempty"`
	Maintenance           *string    `json:"maintenance,omitempty"`
	ModifiedAt            *time.Time `json:"modified_at,omitempty"`
	MonitoringServiceType *string    `json:"monitoring_service_type,omitempty"`
	MspAddress            string     `json:"msp_address"`
	MspExpectString       string     `json:"msp_expect_string"`
	MspNotes              *string    `json:"msp_notes,omitempty"`
	MspNumRetries         *int       `json:"msp_num_retries,omitempty"`
	MspThreshold          *int       `json:"msp_threshold"`
	MspUptimeSla          *string    `json:"msp_uptime_sla,omitempty"`
	Name                  *string    `json:"name,omitempty"`
	Pk                    *int       `json:"pk,omitempty"`
	StateChangedAt        *time.Time `json:"state_changed_at,omitempty"`
	StateIsUp             *bool      `json:"state_is_up,omitempty"`
	StatsUrl              *string    `json:"stats_url,omitempty"`

	// Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// Component defines model for Component.
type Component struct {
	AutoSetStatus *ComponentAutoSetStatus `json:"auto_set_status,omitempty"`
	CreatedAt     *time.Time              `json:"created_at,omitempty"`
	Description   *string                 `json:"description,omitempty"`
	GroupId       *int                    `json:"group_id"`
	IsGroup       *bool                   `json:"is_group,omitempty"`
	Name          string                  `json:"name"`
	Pk            *int                    `json:"pk,omitempty"`
	ServiceId     *int                    `json:"service_id"`
	ServiceUrl    *string                 `json:"service_url,omitempty"`
	Status        *ComponentStatus        `json:"status,omitempty"`
	Url           *string                 `json:"url,omitempty"`
}

// ComponentAutoSetStatus defines model for Component.AutoSetStatus.
type ComponentAutoSetStatus string

// ComponentStatus defines model for Component.Status.
type ComponentStatus string

// ContactGroup defines model for ContactGroup.
type ContactGroup struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Array of email addresses to receive alerts
	EmailList *[]openapi_types.Email `json:"email_list,omitempty"`

	// Array of integration names or IDs associated with this contact
	Integrations *[]string  `json:"integrations,omitempty"`
	ModifiedAt   *time.Time `json:"modified_at,omitempty"`

	// Name of this contact
	Name string `json:"name"`

	// The on-call hours schedule for this contact
	OncallSchedule *string `json:"oncall_schedule,omitempty"`

	// Array of cellphone numbers for voice call alerts (valid international phone number starting with +)
	PhonecallList *[]string `json:"phonecall_list,omitempty"`
	Pk            *int      `json:"pk,omitempty"`

	// Array of integration names or IDs associated with this contact
	PushNotificationProfiles *[]string `json:"push_notification_profiles,omitempty"`

	// Array of cellphone numbers for SMS alerts (valid international phone number starting with +)
	SmsList *[]string `json:"sms_list,omitempty"`
	Url     *string   `json:"url,omitempty"`
}

// ContactGroupOnCallSchedule defines model for ContactGroupOnCallSchedule.
type ContactGroupOnCallSchedule struct {
	// The schedule entries for when the contact is on-call; see example above.
	Schedule *[]struct {
		FromTime     string                                 `json:"from_time"`
		Id           *int                                   `json:"id,omitempty"`
		MonthdayFrom *int                                   `json:"monthday_from,omitempty"`
		MonthdayTo   *int                                   `json:"monthday_to,omitempty"`
		ToTime       string                                 `json:"to_time"`
		Type         ContactGroupOnCallScheduleScheduleType `json:"type"`
		Weekdays     []int                                  `json:"weekdays"`
	} `json:"schedule,omitempty"`

	// Whether to use an on-call schedule. Either ACTIVE (always on call) or SCHEDULED (use defined schedule).
	State *ContactGroupOnCallScheduleState `json:"state,omitempty"`
}

// ContactGroupOnCallScheduleScheduleType defines model for ContactGroupOnCallSchedule.Schedule.Type.
type ContactGroupOnCallScheduleScheduleType string

// Whether to use an on-call schedule. Either ACTIVE (always on call) or SCHEDULED (use defined schedule).
type ContactGroupOnCallScheduleState string

// Dashboard defines model for Dashboard.
type Dashboard struct {
	// Show/hide alerts globally across all checks, rather than only for checks selected in the Checks tab
	AlertsForAllChecks *bool `json:"alerts_for_all_checks,omitempty"`

	// Include/exclude alerts marked as "ignored" in the alerts listing
	AlertsIncludeIgnored *bool `json:"alerts_include_ignored,omitempty"`

	// Include/exclude alerts that are no longer down in the alerts listing
	AlertsIncludeResolved *bool `json:"alerts_include_resolved,omitempty"`

	// Number of alerts to show in the Latest Alerts section
	AlertsNumToShow *DashboardAlertsNumToShow `json:"alerts_num_to_show,omitempty"`

	// Show/hide the Latest Alerts section from this dashboard
	AlertsShowSection *bool      `json:"alerts_show_section,omitempty"`
	CreatedAt         *time.Time `json:"created_at,omitempty"`

	// Whether this dashboard is pinned to the sidebar
	IsPinned *bool `json:"is_pinned,omitempty"`

	// Include metrics from all checks, not just the selected checks
	MetricsForAllChecks *bool `json:"metrics_for_all_checks,omitempty"`

	// Show/hide the Summary Metrics section at the top of this dashboard
	MetricsShowSection *bool `json:"metrics_show_section,omitempty"`

	// The displayed name for this dashboard
	Name *string `json:"name,omitempty"`

	// Sidebar ordering for this dashboard
	Ordering *int `json:"ordering,omitempty"`
	Pk       *int `json:"pk,omitempty"`

	// Include/exclude checks which are currently down
	ServicesIncludeDown *bool `json:"services_include_down,omitempty"`

	// Include/exclude checks which are manually marked for maintenance
	ServicesIncludeMaintenance *bool `json:"services_include_maintenance,omitempty"`

	// Include/exclude checks which are currently paused
	ServicesIncludePaused *bool `json:"services_include_paused,omitempty"`

	// Include/exclude checks which are currently up
	ServicesIncludeUp *bool `json:"services_include_up,omitempty"`

	// Number of check cards to show in the Checks section
	ServicesNumToShow *DashboardServicesNumToShow `json:"services_num_to_show,omitempty"`

	// The primary value for ordering the checks
	ServicesPrimarySort *DashboardServicesPrimarySort `json:"services_primary_sort,omitempty"`

	// The secondary value for ordering the checks, if the primary value is the same
	ServicesSecondarySort *DashboardServicesSecondarySort `json:"services_secondary_sort,omitempty"`

	// Include checks from this list
	ServicesSelected *[]string `json:"services_selected,omitempty"`

	// Show the response time graph or metric on each check card
	ServicesShowResponseTime *bool `json:"services_show_response_time,omitempty"`

	// Show/hide the check cards from this dashboard
	ServicesShowSection *bool `json:"services_show_section,omitempty"`

	// Show the 24h uptime percentage on each check card
	ServicesShowUptime *bool `json:"services_show_uptime,omitempty"`

	// Include checks with one or more of the selected tags
	ServicesTags *[]string `json:"services_tags,omitempty"`
	StatsUrl     *string   `json:"stats_url,omitempty"`
	Url          *string   `json:"url,omitempty"`
}

// Number of alerts to show in the Latest Alerts section
type DashboardAlertsNumToShow int

// Number of check cards to show in the Checks section
type DashboardServicesNumToShow int

// The primary value for ordering the checks
type DashboardServicesPrimarySort string

// The secondary value for ordering the checks, if the primary value is the same
type DashboardServicesSecondarySort string

// DashboardStats defines model for DashboardStats.
type DashboardStats struct {
	Checks *[]struct {
		CachedResponseTime     *float32       `json:"cached_response_time,omitempty"`
		CheckType              *string        `json:"check_type,omitempty"`
		CreatedAt              *time.Time     `json:"created_at,omitempty"`
		IsPaused               *bool          `json:"is_paused,omitempty"`
		IsUnderMaintenance     *bool          `json:"is_under_maintenance,omitempty"`
		MonitoringServiceType  *string        `json:"monitoring_service_type,omitempty"`
		MspAddress             *string        `json:"msp_address,omitempty"`
		MspInterval            *int           `json:"msp_interval,omitempty"`
		Name                   *string        `json:"name,omitempty"`
		Pk                     *int           `json:"pk,omitempty"`
		ResponseTimeDatapoints *[]interface{} `json:"response_time_datapoints,omitempty"`
		StateChangedAt         time.Time      `json:"state_changed_at"`
		StateIsUp              *bool          `json:"state_is_up,omitempty"`
		Uptime24h              *float32       `json:"uptime_24h,omitempty"`
		Url                    *string        `json:"url,omitempty"`
	} `json:"checks,omitempty"`
	GlobalMetrics *map[string]interface{} `json:"global_metrics,omitempty"`
	LatestOutages *[]struct {
		AllAlerts []struct {
			CreatedAt            *time.Time `json:"created_at,omitempty"`
			Location             *string    `json:"location,omitempty"`
			MonitoringServerIpv4 *string    `json:"monitoring_server_ipv4,omitempty"`
			MonitoringServerIpv6 *string    `json:"monitoring_server_ipv6,omitempty"`
			MonitoringServerName *string    `json:"monitoring_server_name,omitempty"`
			Output               *string    `json:"output,omitempty"`
			Pk                   *int       `json:"pk,omitempty"`
			Url                  *string    `json:"url,omitempty"`
		} `json:"all_alerts"`
		CheckAddress               string    `json:"check_address"`
		CheckMonitoringServiceType string    `json:"check_monitoring_service_type"`
		CheckName                  string    `json:"check_name"`
		CheckPk                    int       `json:"check_pk"`
		CheckUrl                   *string   `json:"check_url,omitempty"`
		CreatedAt                  time.Time `json:"created_at"`
		DurationSecs               *string   `json:"duration_secs,omitempty"`
		IgnoreAlertUrl             *string   `json:"ignore_alert_url,omitempty"`
		Ignored                    *bool     `json:"ignored,omitempty"`
		NumLocationsDown           int       `json:"num_locations_down"`
		Pk                         *int      `json:"pk,omitempty"`
		ResolvedAt                 *string   `json:"resolved_at,omitempty"`
		StateIsUp                  bool      `json:"state_is_up"`
		Url                        *string   `json:"url,omitempty"`
	} `json:"latest_outages,omitempty"`
}

// Incident defines model for Incident.
type Incident struct {
	AffectedComponents *[]struct {
		Component struct {
			Id   int     `json:"id"`
			Name *string `json:"name,omitempty"`
		} `json:"component"`
		Description *string                          `json:"description,omitempty"`
		Id          *int                             `json:"id,omitempty"`
		Name        *string                          `json:"name,omitempty"`
		Status      IncidentAffectedComponentsStatus `json:"status"`
	} `json:"affected_components"`
	CreatedAt              *time.Time           `json:"created_at,omitempty"`
	Description            *string              `json:"description,omitempty"`
	Duration               *string              `json:"duration,omitempty"`
	EndsAt                 *time.Time           `json:"ends_at"`
	IncidentState          *string              `json:"incident_state,omitempty"`
	IncidentType           IncidentIncidentType `json:"incident_type"`
	IncidentTypeDisplay    *string              `json:"incident_type_display,omitempty"`
	IncludeInGlobalMetrics *bool                `json:"include_in_global_metrics,omitempty"`

	// The name of incident, eg. a problem or resolution
	Name                  string     `json:"name"`
	Pk                    *int       `json:"pk,omitempty"`
	StartsAt              *time.Time `json:"starts_at"`
	UpdateComponentStatus *bool      `json:"update_component_status,omitempty"`
	Updates               []struct {
		CreatedAt            *time.Time                   `json:"created_at,omitempty"`
		Description          *string                      `json:"description,omitempty"`
		Id                   *int                         `json:"id,omitempty"`
		IncidentState        IncidentUpdatesIncidentState `json:"incident_state"`
		IncidentStateDisplay *string                      `json:"incident_state_display,omitempty"`
		UpdatedAt            *time.Time                   `json:"updated_at,omitempty"`
	} `json:"updates"`
	Url *string `json:"url,omitempty"`
}

// IncidentAffectedComponentsStatus defines model for Incident.AffectedComponents.Status.
type IncidentAffectedComponentsStatus string

// IncidentIncidentType defines model for Incident.IncidentType.
type IncidentIncidentType string

// IncidentUpdatesIncidentState defines model for Incident.Updates.IncidentState.
type IncidentUpdatesIncidentState string

// Incidents defines model for Incidents.
type Incidents struct {
	AllAlerts []struct {
		CreatedAt            *time.Time `json:"created_at,omitempty"`
		Location             *string    `json:"location,omitempty"`
		MonitoringServerIpv4 *string    `json:"monitoring_server_ipv4,omitempty"`
		MonitoringServerIpv6 *string    `json:"monitoring_server_ipv6,omitempty"`
		MonitoringServerName *string    `json:"monitoring_server_name,omitempty"`
		Output               *string    `json:"output,omitempty"`
		Pk                   *int       `json:"pk,omitempty"`
		Url                  *string    `json:"url,omitempty"`
	} `json:"all_alerts"`
	CheckAddress               string    `json:"check_address"`
	CheckMonitoringServiceType string    `json:"check_monitoring_service_type"`
	CheckName                  string    `json:"check_name"`
	CheckPk                    int       `json:"check_pk"`
	CheckUrl                   *string   `json:"check_url,omitempty"`
	CreatedAt                  time.Time `json:"created_at"`
	IgnoreAlertUrl             *string   `json:"ignore_alert_url,omitempty"`
	Ignored                    *bool     `json:"ignored,omitempty"`
	NumLocationsDown           int       `json:"num_locations_down"`
	Pk                         *int      `json:"pk,omitempty"`
	StateIsUp                  bool      `json:"state_is_up"`
	Url                        *string   `json:"url,omitempty"`
}

// Integration defines model for Integration.
type Integration struct {
	// Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`
	IsErrored     *bool     `json:"is_errored,omitempty"`
	LastError     *string   `json:"last_error,omitempty"`

	// The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Your preferred name for this integration.
	Name string  `json:"name"`
	Pk   *int    `json:"pk,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// IntegrationCachet defines model for IntegrationCachet.
type IntegrationCachet struct {
	// Component to update with availability status.
	Component *string `json:"component,omitempty"`

	// Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`
	IsErrored     *bool     `json:"is_errored,omitempty"`
	LastError     *string   `json:"last_error,omitempty"`

	// Metric to update with response time data.
	Metric *string `json:"metric,omitempty"`

	// The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Your preferred name for this integration.
	Name string `json:"name"`
	Pk   *int   `json:"pk,omitempty"`

	// Your API token.
	Token *string `json:"token,omitempty"`

	// Root URL of your Cachet installation.
	Url *string `json:"url,omitempty"`
}

// IntegrationDatadog defines model for IntegrationDatadog.
type IntegrationDatadog struct {
	ApiKey *string `json:"api_key,omitempty"`
	AppKey *string `json:"app_key,omitempty"`

	// Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`
	IsErrored     *bool     `json:"is_errored,omitempty"`
	LastError     *string   `json:"last_error,omitempty"`

	// The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Your preferred name for this integration.
	Name   string                    `json:"name"`
	Pk     *int                      `json:"pk,omitempty"`
	Region *IntegrationDatadogRegion `json:"region,omitempty"`
	Url    *string                   `json:"url,omitempty"`
}

// IntegrationDatadogRegion defines model for IntegrationDatadog.Region.
type IntegrationDatadogRegion string

// IntegrationGeckoboard defines model for IntegrationGeckoboard.
type IntegrationGeckoboard struct {
	ApiKey *string `json:"api_key,omitempty"`

	// Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`
	DatasetName   *string   `json:"dataset_name,omitempty"`
	IsErrored     *bool     `json:"is_errored,omitempty"`
	LastError     *string   `json:"last_error,omitempty"`

	// The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Your preferred name for this integration.
	Name string  `json:"name"`
	Pk   *int    `json:"pk,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// IntegrationJiraservicedesk defines model for IntegrationJiraservicedesk.
type IntegrationJiraservicedesk struct {
	// Email of the user whose API token is being used.
	ApiEmail *string `json:"api_email,omitempty"`

	// API Token created for the user, or the user's password (self-hosted only).
	ApiToken *string `json:"api_token,omitempty"`

	// Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`

	// An optional ID for a custom text field that should receive the account name.
	CustomFieldIdAccountName *int `json:"custom_field_id_account_name,omitempty"`

	// An optional ID for a custom text field that should receive the check name.
	CustomFieldIdCheckName *int `json:"custom_field_id_check_name,omitempty"`

	// An optional ID for a custom text field that should receive the check URL.
	CustomFieldIdCheckUrl *int `json:"custom_field_id_check_url,omitempty"`

	//
	// <div class="dropdown">
	//   Advanced configuration for custom fields using JSON format. See
	//   <a href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">example values</a>.
	//   <div class="dropdown-menu border dark-shadow" style="width: 37rem;" aria-labelledby="dropdownMenuLink">
	// <pre><code>
	//   {
	//     "customfield_10000": "this is a text field",
	//     "customfield_20000": "this is a multi-line text field. big text.",
	//     "customfield_30000": "2011-07-13T15:25:00",
	//     "customfield_40000": {
	//       "value": "this is a select list value"
	//     },
	//     "customfield_50000": {
	//       "name": "this is a group picker value"
	//     },
	//     "customfield_60000": [
	//       {"value": "this is a multi select list value #1"},
	//       {"value": "this is a multi select list value #2"}
	//     ],
	//   }
	// </code></pre>
	//   </div>
	// </div>
	CustomFieldsJson *string `json:"custom_fields_json,omitempty"`
	IsErrored        *bool   `json:"is_errored,omitempty"`

	// The domain your company uses to access Jira, e.g. "https://your-domain.atlassian.net"
	JiraSubdomain *string `json:"jira_subdomain,omitempty"`

	// A comma separated list of labels attached to each incident created. The "Uptime.com" label any associated check tags are always set.
	Labels    *string `json:"labels,omitempty"`
	LastError *string `json:"last_error,omitempty"`

	// The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Your preferred name for this integration.
	Name string `json:"name"`
	Pk   *int   `json:"pk,omitempty"`

	// The project key of your Service Desk project, shown on the Project Settings > Details page. E.g. "SMPSRVDESK"
	ProjectKey *string `json:"project_key,omitempty"`
	Url        *string `json:"url,omitempty"`
}

// IntegrationKlipfolio defines model for IntegrationKlipfolio.
type IntegrationKlipfolio struct {
	ApiKey *string `json:"api_key,omitempty"`

	// Array of contact names or IDs this integration is assigned to
	ContactGroups  *[]string `json:"contact_groups,omitempty"`
	DataSourceName *string   `json:"data_source_name,omitempty"`
	IsErrored      *bool     `json:"is_errored,omitempty"`
	LastError      *string   `json:"last_error,omitempty"`

	// The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Your preferred name for this integration.
	Name string  `json:"name"`
	Pk   *int    `json:"pk,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// IntegrationLibrato defines model for IntegrationLibrato.
type IntegrationLibrato struct {
	ApiToken *string `json:"api_token,omitempty"`

	// Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`

	// Email address which you registered with at Librato
	Email      *string `json:"email,omitempty"`
	IsErrored  *bool   `json:"is_errored,omitempty"`
	LastError  *string `json:"last_error,omitempty"`
	MetricName *string `json:"metric_name,omitempty"`

	// The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Your preferred name for this integration.
	Name string  `json:"name"`
	Pk   *int    `json:"pk,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// IntegrationMicrosoftTeams defines model for IntegrationMicrosoft_Teams.
type IntegrationMicrosoftTeams struct {
	// Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`
	IsErrored     *bool     `json:"is_errored,omitempty"`
	LastError     *string   `json:"last_error,omitempty"`

	// The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Your preferred name for this integration.
	Name       string  `json:"name"`
	Pk         *int    `json:"pk,omitempty"`
	Url        *string `json:"url,omitempty"`
	WebhookUrl *string `json:"webhook_url,omitempty"`
}

// IntegrationOpsgenie defines model for IntegrationOpsgenie.
type IntegrationOpsgenie struct {
	// Listed on the Integrations / Configured Integrations page in OpsGenie.
	ApiEndpoint *string `json:"api_endpoint,omitempty"`

	// Listed on the Integrations / Configured Integrations page in OpsGenie.
	ApiKey *string `json:"api_key,omitempty"`

	// Automatically resolve incident once the check is back up.
	Autoresolve *bool `json:"autoresolve,omitempty"`

	// Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`
	IsErrored     *bool     `json:"is_errored,omitempty"`
	LastError     *string   `json:"last_error,omitempty"`

	// The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Your preferred name for this integration.
	Name string `json:"name"`
	Pk   *int   `json:"pk,omitempty"`

	// A comma separated list of labels attached to the alert. You may overwrite the quiet hours setting for urgent alerts by adding the OverwriteQuietHours tag.
	Tags *string `json:"tags,omitempty"`

	// A comma separated list of team names which will be responsible for the alert.
	Teams *string `json:"teams,omitempty"`
	Url   *string `json:"url,omitempty"`
}

// IntegrationPagerduty defines model for IntegrationPagerduty.
type IntegrationPagerduty struct {
	// Automatically resolve this incident once the check is back up.
	Autoresolve *bool `json:"autoresolve,omitempty"`

	// Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`
	IsErrored     *bool     `json:"is_errored,omitempty"`
	LastError     *string   `json:"last_error,omitempty"`

	// The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Your preferred name for this integration.
	Name string `json:"name"`
	Pk   *int   `json:"pk,omitempty"`

	// Listed on the Service's details page, Integrations tab.
	ServiceKey *string `json:"service_key,omitempty"`
	Url        *string `json:"url,omitempty"`
}

// IntegrationPushbullet defines model for IntegrationPushbullet.
type IntegrationPushbullet struct {
	// Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`

	// The email used in creating your Pushbullet account.
	Email     *openapi_types.Email `json:"email,omitempty"`
	IsErrored *bool                `json:"is_errored,omitempty"`
	LastError *string              `json:"last_error,omitempty"`

	// The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Your preferred name for this integration.
	Name string  `json:"name"`
	Pk   *int    `json:"pk,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// IntegrationPushover defines model for IntegrationPushover.
type IntegrationPushover struct {
	// Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`
	IsErrored     *bool     `json:"is_errored,omitempty"`
	LastError     *string   `json:"last_error,omitempty"`

	// The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Your preferred name for this integration.
	Name string `json:"name"`
	Pk   *int   `json:"pk,omitempty"`

	// Priorities higher then normal will override recipient's quiet hours.
	Priority *IntegrationPushoverPriority `json:"priority,omitempty"`
	Url      *string                      `json:"url,omitempty"`

	// This may be your user key or a group key.
	User *string `json:"user,omitempty"`
}

// Priorities higher then normal will override recipient's quiet hours.
type IntegrationPushoverPriority int

// IntegrationSignifai defines model for IntegrationSignifai.
type IntegrationSignifai struct {
	// Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`
	IsErrored     *bool     `json:"is_errored,omitempty"`
	LastError     *string   `json:"last_error,omitempty"`

	// The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Your preferred name for this integration.
	Name string `json:"name"`
	Pk   *int   `json:"pk,omitempty"`

	// SignifAI Web Collector URL
	PostbackUrl *string `json:"postback_url,omitempty"`
	Url         *string `json:"url,omitempty"`
}

// IntegrationSlack defines model for IntegrationSlack.
type IntegrationSlack struct {
	Channel *string `json:"channel,omitempty"`

	// Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`
	IsErrored     *bool     `json:"is_errored,omitempty"`
	LastError     *string   `json:"last_error,omitempty"`

	// The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Your preferred name for this integration.
	Name       string  `json:"name"`
	Pk         *int    `json:"pk,omitempty"`
	Url        *string `json:"url,omitempty"`
	WebhookUrl *string `json:"webhook_url,omitempty"`
}

// IntegrationStatus defines model for IntegrationStatus.
type IntegrationStatus struct {
	// Listed on the API page.
	ApiId *string `json:"api_id,omitempty"`

	// Listed on the API page.
	ApiKey *string `json:"api_key,omitempty"`

	// Component to update with availability status. Listed in the Infrastructure / Modify Component / API section.
	Component *string `json:"component,omitempty"`

	// Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`

	// Container to update with availability status. Listed in the Infrastructure / Modify Component / API section.
	Container *string `json:"container,omitempty"`
	IsErrored *bool   `json:"is_errored,omitempty"`
	LastError *string `json:"last_error,omitempty"`

	// Metric to update with response time data. Listed on the Metrics / Modify Metric page when setting Data Source to Custom.
	Metric *string `json:"metric,omitempty"`

	// The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Your preferred name for this integration.
	Name string `json:"name"`
	Pk   *int   `json:"pk,omitempty"`

	// Listed on the API page.
	StatuspageId *string `json:"statuspage_id,omitempty"`
	Url          *string `json:"url,omitempty"`
}

// IntegrationStatuspage defines model for IntegrationStatuspage.
type IntegrationStatuspage struct {
	// Listed on the Manage Account / API page.
	ApiKey *string `json:"api_key,omitempty"`

	// Component to update with availability status, see instructions below.
	Component *string `json:"component,omitempty"`

	// Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`
	IsErrored     *bool     `json:"is_errored,omitempty"`
	LastError     *string   `json:"last_error,omitempty"`

	// Metric to update with response time data. Listed in Public Metrics / Edit Metric / Advanced Options.
	Metric *string `json:"metric,omitempty"`

	// The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Your preferred name for this integration.
	Name string `json:"name"`

	// Listed on the Manage Account / API page.
	Page *string `json:"page,omitempty"`
	Pk   *int    `json:"pk,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// IntegrationTwitter defines model for IntegrationTwitter.
type IntegrationTwitter struct {
	// Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`
	IsErrored     *bool     `json:"is_errored,omitempty"`
	LastError     *string   `json:"last_error,omitempty"`

	// The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Your preferred name for this integration.
	Name             string  `json:"name"`
	OauthToken       *string `json:"oauth_token,omitempty"`
	OauthTokenSecret *string `json:"oauth_token_secret,omitempty"`
	Pk               *int    `json:"pk,omitempty"`
	Url              *string `json:"url,omitempty"`
}

// IntegrationVictorops defines model for IntegrationVictorops.
type IntegrationVictorops struct {
	// Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`
	IsErrored     *bool     `json:"is_errored,omitempty"`
	LastError     *string   `json:"last_error,omitempty"`

	// The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Your preferred name for this integration.
	Name string `json:"name"`
	Pk   *int   `json:"pk,omitempty"`

	// Routing key determines to which team alerts and incidents will be routed.
	RoutingKey *string `json:"routing_key,omitempty"`

	// Listed on the Settings / API page
	ServiceKey *string `json:"service_key,omitempty"`
	Url        *string `json:"url,omitempty"`
}

// IntegrationWavefront defines model for IntegrationWavefront.
type IntegrationWavefront struct {
	// Your API token.
	ApiToken *string `json:"api_token,omitempty"`

	// Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`
	IsErrored     *bool     `json:"is_errored,omitempty"`
	LastError     *string   `json:"last_error,omitempty"`

	// The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Your preferred name for this integration.
	Name string  `json:"name"`
	Pk   *int    `json:"pk,omitempty"`
	Url  *string `json:"url,omitempty"`

	// Root URL of your Wavefront service, eg. https://longboard.wavefront.com.
	WavefrontUrl *string `json:"wavefront_url,omitempty"`
}

// IntegrationWebhook defines model for IntegrationWebhook.
type IntegrationWebhook struct {
	// Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`

	// Optional custom HTTP headers in "Name: Value" format.
	Headers   *string `json:"headers,omitempty"`
	IsErrored *bool   `json:"is_errored,omitempty"`
	LastError *string `json:"last_error,omitempty"`

	// The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Your preferred name for this integration.
	Name string `json:"name"`
	Pk   *int   `json:"pk,omitempty"`

	// The URL you would like the alert details sent by HTTP POST.
	PostbackUrl *string `json:"postback_url,omitempty"`
	Url         *string `json:"url,omitempty"`

	// Maintain compatibility with legacy handlers.
	UseLegacyPayload *bool `json:"use_legacy_payload,omitempty"`
}

// IntegrationZapier defines model for IntegrationZapier.
type IntegrationZapier struct {
	// Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`
	IsErrored     *bool     `json:"is_errored,omitempty"`
	LastError     *string   `json:"last_error,omitempty"`

	// The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Your preferred name for this integration.
	Name string  `json:"name"`
	Pk   *int    `json:"pk,omitempty"`
	Url  *string `json:"url,omitempty"`

	// The Webhook URL for triggering the alert in Zapier.
	WebhookUrl *string `json:"webhook_url,omitempty"`
}

// MagicLink defines model for MagicLink.
type MagicLink struct {
	// Email address to send magic link.
	Email *openapi_types.Email `json:"email,omitempty"`
}

// Metric defines model for Metric.
type Metric struct {
	IsVisible   *bool   `json:"is_visible,omitempty"`
	Name        string  `json:"name"`
	Pk          *int    `json:"pk,omitempty"`
	ServiceId   int     `json:"service_id"`
	ServiceName *string `json:"service_name,omitempty"`
	ServiceType *string `json:"service_type,omitempty"`
	ServiceUrl  *string `json:"service_url,omitempty"`
	Url         *string `json:"url,omitempty"`
}

// Outages defines model for Outages.
type Outages struct {
	AllAlerts []struct {
		CreatedAt            *time.Time `json:"created_at,omitempty"`
		Location             *string    `json:"location,omitempty"`
		MonitoringServerIpv4 *string    `json:"monitoring_server_ipv4,omitempty"`
		MonitoringServerIpv6 *string    `json:"monitoring_server_ipv6,omitempty"`
		MonitoringServerName *string    `json:"monitoring_server_name,omitempty"`
		Output               *string    `json:"output,omitempty"`
		Pk                   *int       `json:"pk,omitempty"`
		Url                  *string    `json:"url,omitempty"`
	} `json:"all_alerts"`
	CheckAddress               string    `json:"check_address"`
	CheckMonitoringServiceType string    `json:"check_monitoring_service_type"`
	CheckName                  string    `json:"check_name"`
	CheckPk                    int       `json:"check_pk"`
	CheckUrl                   *string   `json:"check_url,omitempty"`
	CreatedAt                  time.Time `json:"created_at"`
	DurationSecs               *string   `json:"duration_secs,omitempty"`
	IgnoreAlertUrl             *string   `json:"ignore_alert_url,omitempty"`
	Ignored                    *bool     `json:"ignored,omitempty"`
	NumLocationsDown           int       `json:"num_locations_down"`
	Pk                         *int      `json:"pk,omitempty"`
	ResolvedAt                 *string   `json:"resolved_at,omitempty"`
	StateIsUp                  bool      `json:"state_is_up"`
	Url                        *string   `json:"url,omitempty"`
}

// PasswordReset defines model for PasswordReset.
type PasswordReset struct {
	// Email address to send password recovery link.
	Email *openapi_types.Email `json:"email,omitempty"`
}

// PushNotificationProfile defines model for PushNotificationProfile.
type PushNotificationProfile struct {
	// Array of contact names or IDs to this push notification will receive alerts for.
	ContactGroups []string   `json:"contact_groups"`
	CreatedAt     *time.Time `json:"created_at,omitempty"`
	DeviceName    string     `json:"device_name"`
	DisplayName   *string    `json:"display_name,omitempty"`
	ModifiedAt    *time.Time `json:"modified_at,omitempty"`
	Pk            *int       `json:"pk,omitempty"`
	Url           *string    `json:"url,omitempty"`
	User          *string    `json:"user,omitempty"`
	Uuid          *string    `json:"uuid,omitempty"`
}

// PushNotificationProfileCreate defines model for PushNotificationProfileCreate.
type PushNotificationProfileCreate struct {
	AppKey *string `json:"app_key,omitempty"`

	// Array of contact names or IDs to this push notification will receive alerts for.
	ContactGroups []string   `json:"contact_groups"`
	CreatedAt     *time.Time `json:"created_at,omitempty"`
	DeviceName    string     `json:"device_name"`
	DisplayName   *string    `json:"display_name,omitempty"`
	ModifiedAt    *time.Time `json:"modified_at,omitempty"`
	Pk            *int       `json:"pk,omitempty"`
	Url           *string    `json:"url,omitempty"`
	User          *string    `json:"user,omitempty"`
	Uuid          *string    `json:"uuid,omitempty"`
}

// ResponseTime defines model for ResponseTime.
type ResponseTime struct {
	// The last day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	EndDate      *time.Time              `json:"end_date,omitempty"`
	ResponseTime *map[string]interface{} `json:"response_time,omitempty"`

	// The first day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	StartDate *time.Time `json:"start_date,omitempty"`
}

// SLAReport defines model for SLAReport.
type SLAReport struct {
	CreatedAt                       *time.Time                 `json:"created_at,omitempty"`
	DefaultDateRange                *SLAReportDefaultDateRange `json:"default_date_range,omitempty"`
	FilterResponseTimeSlaViolations *bool                      `json:"filter_response_time_sla_violations,omitempty"`
	FilterSlowest                   *bool                      `json:"filter_slowest,omitempty"`
	FilterUptimeSlaViolations       *bool                      `json:"filter_uptime_sla_violations,omitempty"`
	FilterWithDowntime              *bool                      `json:"filter_with_downtime,omitempty"`

	// Name of this SLA report
	Name                    string                            `json:"name"`
	Pk                      *int                              `json:"pk,omitempty"`
	ResponseTimeSectionSort *SLAReportResponseTimeSectionSort `json:"response_time_section_sort,omitempty"`

	// Include checks from this list
	ServicesSelected *[]string `json:"services_selected,omitempty"`

	// Include checks with one or more of the selected tags
	ServicesTags            *[]string                   `json:"services_tags,omitempty"`
	ShowResponseTimeSection *bool                       `json:"show_response_time_section,omitempty"`
	ShowResponseTimeSla     *bool                       `json:"show_response_time_sla,omitempty"`
	ShowUptimeSection       *bool                       `json:"show_uptime_section,omitempty"`
	ShowUptimeSla           *bool                       `json:"show_uptime_sla,omitempty"`
	StatsUrl                *string                     `json:"stats_url,omitempty"`
	UptimeSectionSort       *SLAReportUptimeSectionSort `json:"uptime_section_sort,omitempty"`
	Url                     *string                     `json:"url,omitempty"`
}

// SLAReportDefaultDateRange defines model for SLAReport.DefaultDateRange.
type SLAReportDefaultDateRange string

// SLAReportResponseTimeSectionSort defines model for SLAReport.ResponseTimeSectionSort.
type SLAReportResponseTimeSectionSort string

// SLAReportUptimeSectionSort defines model for SLAReport.UptimeSectionSort.
type SLAReportUptimeSectionSort string

// SLAReportStats defines model for SLAReportStats.
type SLAReportStats struct {
	// The last day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	EndDate             *time.Time `json:"end_date,omitempty"`
	HasResponseTimeData *bool      `json:"has_response_time_data,omitempty"`

	// The output format of the report: [json, pdf, xls]
	Output       *SLAReportStatsOutput     `json:"output,omitempty"`
	ResponseTime *[]map[string]interface{} `json:"response_time,omitempty"`

	// The first day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	StartDate                 *time.Time              `json:"start_date,omitempty"`
	Uptime                    *map[string]interface{} `json:"uptime,omitempty"`
	UsesDailyResponseTimeData *bool                   `json:"uses_daily_response_time_data,omitempty"`
}

// The output format of the report: [json, pdf, xls]
type SLAReportStatsOutput string

// ScheduledReport defines model for ScheduledReport.
type ScheduledReport struct {
	// Reports will be sent at this time (local time)
	AtTime    *ScheduledReportAtTime   `json:"at_time,omitempty"`
	CreatedAt *time.Time               `json:"created_at,omitempty"`
	FileType  *ScheduledReportFileType `json:"file_type,omitempty"`
	IsEnabled *bool                    `json:"is_enabled,omitempty"`

	// Name of this scheduled report
	Name string `json:"name"`

	// Weekly reports will be sent on this day
	OnWeekday *ScheduledReportOnWeekday `json:"on_weekday,omitempty"`
	Pk        *int                      `json:"pk,omitempty"`

	// Additional emails that will receive this report
	RecipientEmails *map[string]interface{} `json:"recipient_emails,omitempty"`

	// Select the users that should receive this report
	RecipientUsers *[]string `json:"recipient_users,omitempty"`

	// How often to deliver this report
	Recurrence *ScheduledReportRecurrence `json:"recurrence,omitempty"`

	// Select an SLA report to send on this schedule
	SlaReport *string `json:"sla_report"`
	Url       *string `json:"url,omitempty"`
}

// Reports will be sent at this time (local time)
type ScheduledReportAtTime int

// ScheduledReportFileType defines model for ScheduledReport.FileType.
type ScheduledReportFileType string

// Weekly reports will be sent on this day
type ScheduledReportOnWeekday int

// How often to deliver this report
type ScheduledReportRecurrence string

// StatusPage defines model for StatusPage.
type StatusPage struct {
	AllowDrillDown            *bool                            `json:"allow_drill_down,omitempty"`
	AllowPdfReport            *bool                            `json:"allow_pdf_report,omitempty"`
	AllowSearchIndexing       *bool                            `json:"allow_search_indexing,omitempty"`
	AllowSubscriptions        *bool                            `json:"allow_subscriptions,omitempty"`
	AuthPassword              *string                          `json:"auth_password,omitempty"`
	AuthUsername              *string                          `json:"auth_username,omitempty"`
	Cname                     *string                          `json:"cname"`
	CnameUrl                  *string                          `json:"cname_url,omitempty"`
	CompanyWebsiteUrl         *string                          `json:"company_website_url,omitempty"`
	ComponentsUrl             *string                          `json:"components_url,omitempty"`
	ContactEmail              *openapi_types.Email             `json:"contact_email,omitempty"`
	CurrentStatusUrl          *string                          `json:"current_status_url,omitempty"`
	CustomCss                 *string                          `json:"custom_css,omitempty"`
	CustomFooterHtml          *string                          `json:"custom_footer_html,omitempty"`
	CustomHeaderHtml          *string                          `json:"custom_header_html,omitempty"`
	DefaultHistoryDateRange   *int                             `json:"default_history_date_range,omitempty"`
	Description               *string                          `json:"description,omitempty"`
	DescriptionHtml           *string                          `json:"description_html,omitempty"`
	EmailFrom                 *openapi_types.Email             `json:"email_from,omitempty"`
	EmailLogoUrl              *string                          `json:"email_logo_url,omitempty"`
	EmailReplyTo              *openapi_types.Email             `json:"email_reply_to,omitempty"`
	FaviconUrl                *string                          `json:"favicon_url,omitempty"`
	GoogleAnalyticsCode       *string                          `json:"google_analytics_code,omitempty"`
	HistoryUrl                *string                          `json:"history_url,omitempty"`
	IncidentsUrl              *string                          `json:"incidents_url,omitempty"`
	IsPublic                  *bool                            `json:"is_public,omitempty"`
	LogoUrl                   *string                          `json:"logo_url,omitempty"`
	MetricsUrl                *string                          `json:"metrics_url,omitempty"`
	Name                      string                           `json:"name"`
	PageType                  StatusPagePageType               `json:"page_type"`
	PageTypeDisplay           *string                          `json:"page_type_display,omitempty"`
	Pk                        *int                             `json:"pk,omitempty"`
	PrivateUrl                *string                          `json:"private_url,omitempty"`
	PublicUrl                 *string                          `json:"public_url,omitempty"`
	ShowActiveIncidents       *bool                            `json:"show_active_incidents,omitempty"`
	ShowComponentHistory      *bool                            `json:"show_component_history,omitempty"`
	ShowComponentResponseTime *bool                            `json:"show_component_response_time,omitempty"`
	ShowHistorySnake          *bool                            `json:"show_history_snake,omitempty"`
	ShowHistoryTab            *bool                            `json:"show_history_tab,omitempty"`
	ShowPastIncidents         *bool                            `json:"show_past_incidents,omitempty"`
	ShowStatusTab             *bool                            `json:"show_status_tab,omitempty"`
	ShowSummaryMetrics        *bool                            `json:"show_summary_metrics,omitempty"`
	Slug                      *string                          `json:"slug"`
	UptimeCalculationType     *StatusPageUptimeCalculationType `json:"uptime_calculation_type,omitempty"`
	Url                       *string                          `json:"url,omitempty"`
}

// StatusPagePageType defines model for StatusPage.PageType.
type StatusPagePageType string

// StatusPageUptimeCalculationType defines model for StatusPage.UptimeCalculationType.
type StatusPageUptimeCalculationType string

// StatusPageCurrentStatus defines model for StatusPageCurrentStatus.
type StatusPageCurrentStatus struct {
	ActiveIncidents []struct {
		AffectedComponents *[]struct {
			Component struct {
				Id   int     `json:"id"`
				Name *string `json:"name,omitempty"`
			} `json:"component"`
			Description *string                                                        `json:"description,omitempty"`
			Id          *int                                                           `json:"id,omitempty"`
			Name        *string                                                        `json:"name,omitempty"`
			Status      StatusPageCurrentStatusActiveIncidentsAffectedComponentsStatus `json:"status"`
		} `json:"affected_components"`
		CreatedAt              *time.Time                                         `json:"created_at,omitempty"`
		Description            *string                                            `json:"description,omitempty"`
		Duration               *string                                            `json:"duration,omitempty"`
		EndsAt                 *time.Time                                         `json:"ends_at"`
		IncidentState          *string                                            `json:"incident_state,omitempty"`
		IncidentType           StatusPageCurrentStatusActiveIncidentsIncidentType `json:"incident_type"`
		IncidentTypeDisplay    *string                                            `json:"incident_type_display,omitempty"`
		IncludeInGlobalMetrics *bool                                              `json:"include_in_global_metrics,omitempty"`

		// The name of incident, eg. a problem or resolution
		Name                  string     `json:"name"`
		Pk                    *int       `json:"pk,omitempty"`
		StartsAt              *time.Time `json:"starts_at"`
		UpdateComponentStatus *bool      `json:"update_component_status,omitempty"`
		Updates               []struct {
			CreatedAt            *time.Time                                                 `json:"created_at,omitempty"`
			Description          *string                                                    `json:"description,omitempty"`
			Id                   *int                                                       `json:"id,omitempty"`
			IncidentState        StatusPageCurrentStatusActiveIncidentsUpdatesIncidentState `json:"incident_state"`
			IncidentStateDisplay *string                                                    `json:"incident_state_display,omitempty"`
			UpdatedAt            *time.Time                                                 `json:"updated_at,omitempty"`
		} `json:"updates"`
		Url *string `json:"url,omitempty"`
	} `json:"active_incidents"`
	CnameUrl   *string `json:"cname_url,omitempty"`
	Components []struct {
		AutoSetStatus *StatusPageCurrentStatusComponentsAutoSetStatus `json:"auto_set_status,omitempty"`
		CreatedAt     *time.Time                                      `json:"created_at,omitempty"`
		Description   *string                                         `json:"description,omitempty"`
		GroupId       *int                                            `json:"group_id"`
		IsGroup       *bool                                           `json:"is_group,omitempty"`
		Name          string                                          `json:"name"`
		Pk            *int                                            `json:"pk,omitempty"`
		ServiceId     *int                                            `json:"service_id"`
		ServiceUrl    *string                                         `json:"service_url,omitempty"`
		Status        *StatusPageCurrentStatusComponentsStatus        `json:"status,omitempty"`
		Url           *string                                         `json:"url,omitempty"`
	} `json:"components"`
	ComponentsUrl       *string `json:"components_url,omitempty"`
	CurrentStatusUrl    *string `json:"current_status_url,omitempty"`
	Description         *string `json:"description,omitempty"`
	GlobalIsOperational bool    `json:"global_is_operational"`
	HistoryUrl          *string `json:"history_url,omitempty"`
	IncidentsUrl        *string `json:"incidents_url,omitempty"`
	Metrics             []struct {
		IsVisible   *bool   `json:"is_visible,omitempty"`
		Name        string  `json:"name"`
		Pk          *int    `json:"pk,omitempty"`
		ServiceId   int     `json:"service_id"`
		ServiceName *string `json:"service_name,omitempty"`
		ServiceType *string `json:"service_type,omitempty"`
		ServiceUrl  *string `json:"service_url,omitempty"`
		Url         *string `json:"url,omitempty"`
	} `json:"metrics"`
	MetricsUrl          *string                         `json:"metrics_url,omitempty"`
	Name                string                          `json:"name"`
	PageType            StatusPageCurrentStatusPageType `json:"page_type"`
	Pk                  *int                            `json:"pk,omitempty"`
	PrivateUrl          *string                         `json:"private_url,omitempty"`
	PublicUrl           *string                         `json:"public_url,omitempty"`
	UpcomingMaintenance []struct {
		AffectedComponents *[]struct {
			Component struct {
				Id   int     `json:"id"`
				Name *string `json:"name,omitempty"`
			} `json:"component"`
			Description *string                                                            `json:"description,omitempty"`
			Id          *int                                                               `json:"id,omitempty"`
			Name        *string                                                            `json:"name,omitempty"`
			Status      StatusPageCurrentStatusUpcomingMaintenanceAffectedComponentsStatus `json:"status"`
		} `json:"affected_components"`
		CreatedAt              *time.Time                                             `json:"created_at,omitempty"`
		Description            *string                                                `json:"description,omitempty"`
		Duration               *string                                                `json:"duration,omitempty"`
		EndsAt                 *time.Time                                             `json:"ends_at"`
		IncidentState          *string                                                `json:"incident_state,omitempty"`
		IncidentType           StatusPageCurrentStatusUpcomingMaintenanceIncidentType `json:"incident_type"`
		IncidentTypeDisplay    *string                                                `json:"incident_type_display,omitempty"`
		IncludeInGlobalMetrics *bool                                                  `json:"include_in_global_metrics,omitempty"`

		// The name of incident, eg. a problem or resolution
		Name                  string     `json:"name"`
		Pk                    *int       `json:"pk,omitempty"`
		StartsAt              *time.Time `json:"starts_at"`
		UpdateComponentStatus *bool      `json:"update_component_status,omitempty"`
		Updates               []struct {
			CreatedAt            *time.Time                                                     `json:"created_at,omitempty"`
			Description          *string                                                        `json:"description,omitempty"`
			Id                   *int                                                           `json:"id,omitempty"`
			IncidentState        StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentState `json:"incident_state"`
			IncidentStateDisplay *string                                                        `json:"incident_state_display,omitempty"`
			UpdatedAt            *time.Time                                                     `json:"updated_at,omitempty"`
		} `json:"updates"`
		Url *string `json:"url,omitempty"`
	} `json:"upcoming_maintenance"`
	Url *string `json:"url,omitempty"`
}

// StatusPageCurrentStatusActiveIncidentsAffectedComponentsStatus defines model for StatusPageCurrentStatus.ActiveIncidents.AffectedComponents.Status.
type StatusPageCurrentStatusActiveIncidentsAffectedComponentsStatus string

// StatusPageCurrentStatusActiveIncidentsIncidentType defines model for StatusPageCurrentStatus.ActiveIncidents.IncidentType.
type StatusPageCurrentStatusActiveIncidentsIncidentType string

// StatusPageCurrentStatusActiveIncidentsUpdatesIncidentState defines model for StatusPageCurrentStatus.ActiveIncidents.Updates.IncidentState.
type StatusPageCurrentStatusActiveIncidentsUpdatesIncidentState string

// StatusPageCurrentStatusComponentsAutoSetStatus defines model for StatusPageCurrentStatus.Components.AutoSetStatus.
type StatusPageCurrentStatusComponentsAutoSetStatus string

// StatusPageCurrentStatusComponentsStatus defines model for StatusPageCurrentStatus.Components.Status.
type StatusPageCurrentStatusComponentsStatus string

// StatusPageCurrentStatusPageType defines model for StatusPageCurrentStatus.PageType.
type StatusPageCurrentStatusPageType string

// StatusPageCurrentStatusUpcomingMaintenanceAffectedComponentsStatus defines model for StatusPageCurrentStatus.UpcomingMaintenance.AffectedComponents.Status.
type StatusPageCurrentStatusUpcomingMaintenanceAffectedComponentsStatus string

// StatusPageCurrentStatusUpcomingMaintenanceIncidentType defines model for StatusPageCurrentStatus.UpcomingMaintenance.IncidentType.
type StatusPageCurrentStatusUpcomingMaintenanceIncidentType string

// StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentState defines model for StatusPageCurrentStatus.UpcomingMaintenance.Updates.IncidentState.
type StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentState string

// StatusPageHistory defines model for StatusPageHistory.
type StatusPageHistory struct {
	CnameUrl         *string                   `json:"cname_url,omitempty"`
	ComponentHistory *string                   `json:"component_history,omitempty"`
	ComponentsUrl    *string                   `json:"components_url,omitempty"`
	CurrentStatusUrl *string                   `json:"current_status_url,omitempty"`
	DateHistory      *string                   `json:"date_history,omitempty"`
	Description      *string                   `json:"description,omitempty"`
	EndDate          time.Time                 `json:"end_date"`
	GlobalMetrics    *string                   `json:"global_metrics,omitempty"`
	HistoryUrl       *string                   `json:"history_url,omitempty"`
	IncidentsUrl     *string                   `json:"incidents_url,omitempty"`
	MetricsUrl       *string                   `json:"metrics_url,omitempty"`
	Name             string                    `json:"name"`
	PageType         StatusPageHistoryPageType `json:"page_type"`
	PastIncidents    []struct {
		AffectedComponents *[]struct {
			Component struct {
				Id   int     `json:"id"`
				Name *string `json:"name,omitempty"`
			} `json:"component"`
			Description *string                                                `json:"description,omitempty"`
			Id          *int                                                   `json:"id,omitempty"`
			Name        *string                                                `json:"name,omitempty"`
			Status      StatusPageHistoryPastIncidentsAffectedComponentsStatus `json:"status"`
		} `json:"affected_components"`
		CreatedAt              *time.Time                                 `json:"created_at,omitempty"`
		Description            *string                                    `json:"description,omitempty"`
		Duration               *string                                    `json:"duration,omitempty"`
		EndsAt                 *time.Time                                 `json:"ends_at"`
		IncidentState          *string                                    `json:"incident_state,omitempty"`
		IncidentType           StatusPageHistoryPastIncidentsIncidentType `json:"incident_type"`
		IncidentTypeDisplay    *string                                    `json:"incident_type_display,omitempty"`
		IncludeInGlobalMetrics *bool                                      `json:"include_in_global_metrics,omitempty"`

		// The name of incident, eg. a problem or resolution
		Name                  string     `json:"name"`
		Pk                    *int       `json:"pk,omitempty"`
		StartsAt              *time.Time `json:"starts_at"`
		UpdateComponentStatus *bool      `json:"update_component_status,omitempty"`
		Updates               []struct {
			CreatedAt            *time.Time                                         `json:"created_at,omitempty"`
			Description          *string                                            `json:"description,omitempty"`
			Id                   *int                                               `json:"id,omitempty"`
			IncidentState        StatusPageHistoryPastIncidentsUpdatesIncidentState `json:"incident_state"`
			IncidentStateDisplay *string                                            `json:"incident_state_display,omitempty"`
			UpdatedAt            *time.Time                                         `json:"updated_at,omitempty"`
		} `json:"updates"`
		Url *string `json:"url,omitempty"`
	} `json:"past_incidents"`
	Pk                    *int                                    `json:"pk,omitempty"`
	PrivateUrl            *string                                 `json:"private_url,omitempty"`
	PublicUrl             *string                                 `json:"public_url,omitempty"`
	StartDate             time.Time                               `json:"start_date"`
	UptimeCalculationType *StatusPageHistoryUptimeCalculationType `json:"uptime_calculation_type,omitempty"`
	Url                   *string                                 `json:"url,omitempty"`
}

// StatusPageHistoryPageType defines model for StatusPageHistory.PageType.
type StatusPageHistoryPageType string

// StatusPageHistoryPastIncidentsAffectedComponentsStatus defines model for StatusPageHistory.PastIncidents.AffectedComponents.Status.
type StatusPageHistoryPastIncidentsAffectedComponentsStatus string

// StatusPageHistoryPastIncidentsIncidentType defines model for StatusPageHistory.PastIncidents.IncidentType.
type StatusPageHistoryPastIncidentsIncidentType string

// StatusPageHistoryPastIncidentsUpdatesIncidentState defines model for StatusPageHistory.PastIncidents.Updates.IncidentState.
type StatusPageHistoryPastIncidentsUpdatesIncidentState string

// StatusPageHistoryUptimeCalculationType defines model for StatusPageHistory.UptimeCalculationType.
type StatusPageHistoryUptimeCalculationType string

// Subaccount defines model for Subaccount.
type Subaccount struct {
	Name string  `json:"name"`
	Pk   *int    `json:"pk,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// SubaccountPacks defines model for SubaccountPacks.
type SubaccountPacks struct {
	// Number of packs to be transferred
	Num *int `json:"num,omitempty"`
}

// User defines model for User.
type User struct {
	// The permission level for this user
	AccessLevel *UserAccessLevel `json:"access_level,omitempty"`

	// Which subaccounts this user may access, or empty for All Subaccounts.
	AssignedSubaccounts *[]string `json:"assigned_subaccounts,omitempty"`

	// The user's email address, used as their username
	Email openapi_types.Email `json:"email"`

	// The user's first name
	FirstName string `json:"first_name"`

	// Whether this user account is active or disabled
	IsActive *bool `json:"is_active,omitempty"`

	// Whether this user may access the API
	IsApiEnabled *bool `json:"is_api_enabled,omitempty"`

	// Whether this user is the account owner
	IsPrimary *bool `json:"is_primary,omitempty"`

	// The user's first name
	LastName      string  `json:"last_name"`
	MustTwoFactor *string `json:"must_two_factor,omitempty"`

	// Whether this user should receive new invoices
	NotifyPaidInvoices *bool `json:"notify_paid_invoices,omitempty"`

	// The user's password
	Password         *string               `json:"password,omitempty"`
	Pk               *int                  `json:"pk,omitempty"`
	RequireTwoFactor *UserRequireTwoFactor `json:"require_two_factor,omitempty"`
	Url              *string               `json:"url,omitempty"`
}

// The permission level for this user
type UserAccessLevel string

// UserRequireTwoFactor defines model for User.RequireTwoFactor.
type UserRequireTwoFactor string

// GetAlertlistParams defines parameters for GetAlertlist.
type GetAlertlistParams struct {
	// A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Order results by this field.
	Ordering *GetAlertlistParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Filter by alert state up/down.
	StateIsUp *bool `form:"state_is_up,omitempty" json:"state_is_up,omitempty"`

	// Filter by check ID.
	CheckPk *float32 `form:"check_pk,omitempty" json:"check_pk,omitempty"`

	// Filter by check type.
	CheckMonitoringServiceType *GetAlertlistParamsCheckMonitoringServiceType `form:"check_monitoring_service_type,omitempty" json:"check_monitoring_service_type,omitempty"`

	// Filter by tag name (can be specified multiple times.)
	CheckTag *string `form:"check_tag,omitempty" json:"check_tag,omitempty"`

	// Start date in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`

	// End date in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	EndDate *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetAlertlistParamsOrdering defines parameters for GetAlertlist.
type GetAlertlistParamsOrdering string

// GetAlertlistParamsCheckMonitoringServiceType defines parameters for GetAlertlist.
type GetAlertlistParamsCheckMonitoringServiceType string

// PostAuthLoginJSONBody defines parameters for PostAuthLogin.
type PostAuthLoginJSONBody = AuthTokenWithTOTP

// PostAuthResetPasswordJSONBody defines parameters for PostAuthResetPassword.
type PostAuthResetPasswordJSONBody = PasswordReset

// PostSendMagicLinkJSONBody defines parameters for PostSendMagicLink.
type PostSendMagicLinkJSONBody = MagicLink

// PostAuthSubaccountsJSONBody defines parameters for PostAuthSubaccounts.
type PostAuthSubaccountsJSONBody = Subaccount

// PatchAuthSubaccountJSONBody defines parameters for PatchAuthSubaccount.
type PatchAuthSubaccountJSONBody = Subaccount

// PostAuthSubaccountPacksJSONBody defines parameters for PostAuthSubaccountPacks.
type PostAuthSubaccountPacksJSONBody = SubaccountPacks

// GetServicetaglistParams defines parameters for GetServicetaglist.
type GetServicetaglistParams struct {
	// A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Order results by this field.
	Ordering *GetServicetaglistParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`
}

// GetServicetaglistParamsOrdering defines parameters for GetServicetaglist.
type GetServicetaglistParamsOrdering string

// PostServicetaglistJSONBody defines parameters for PostServicetaglist.
type PostServicetaglistJSONBody = CheckTag

// PatchServiceTagDetailJSONBody defines parameters for PatchServiceTagDetail.
type PatchServiceTagDetailJSONBody = CheckTag

// PutServiceTagDetailJSONBody defines parameters for PutServiceTagDetail.
type PutServiceTagDetailJSONBody = CheckTag

// GetServicelistParams defines parameters for GetServicelist.
type GetServicelistParams struct {
	// A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Order results by this field.
	Ordering *GetServicelistParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Filter by check type.
	MonitoringServiceType *GetServicelistParamsMonitoringServiceType `form:"monitoring_service_type,omitempty" json:"monitoring_service_type,omitempty"`

	// Filter by paused status.
	IsPaused *bool `form:"is_paused,omitempty" json:"is_paused,omitempty"`

	// Filter for checks currently under maintenance.
	IsUnderMaintenance *bool `form:"is_under_maintenance,omitempty" json:"is_under_maintenance,omitempty"`

	// Filter by check up/down state.
	StateIsUp *bool `form:"state_is_up,omitempty" json:"state_is_up,omitempty"`

	// Filter by checks that have a maintenance schedule.
	HasMaintenanceSchedule *bool `form:"has_maintenance_schedule,omitempty" json:"has_maintenance_schedule,omitempty"`

	// Filter by tag name (can be specified multiple times.)
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`
}

// GetServicelistParamsOrdering defines parameters for GetServicelist.
type GetServicelistParamsOrdering string

// GetServicelistParamsMonitoringServiceType defines parameters for GetServicelist.
type GetServicelistParamsMonitoringServiceType string

// PostServiceCreateApiJSONBody defines parameters for PostServiceCreateApi.
type PostServiceCreateApiJSONBody = ChecksAPI

// PostServiceCreateBlacklistJSONBody defines parameters for PostServiceCreateBlacklist.
type PostServiceCreateBlacklistJSONBody = ChecksBLACKLIST

// PostServiceCreateDnsJSONBody defines parameters for PostServiceCreateDns.
type PostServiceCreateDnsJSONBody = ChecksDNS

// PostServiceCreateGroupJSONBody defines parameters for PostServiceCreateGroup.
type PostServiceCreateGroupJSONBody = ChecksGROUP

// PostServiceCreateHeartbeatJSONBody defines parameters for PostServiceCreateHeartbeat.
type PostServiceCreateHeartbeatJSONBody = ChecksHEARTBEAT

// PostServiceCreateHttpJSONBody defines parameters for PostServiceCreateHttp.
type PostServiceCreateHttpJSONBody = ChecksHTTP

// PostServiceCreateIcmpJSONBody defines parameters for PostServiceCreateIcmp.
type PostServiceCreateIcmpJSONBody = ChecksICMP

// PostServiceCreateImapJSONBody defines parameters for PostServiceCreateImap.
type PostServiceCreateImapJSONBody = ChecksIMAP

// PostServiceCreateMalwareJSONBody defines parameters for PostServiceCreateMalware.
type PostServiceCreateMalwareJSONBody = ChecksMALWARE

// PostServiceCreateNtpJSONBody defines parameters for PostServiceCreateNtp.
type PostServiceCreateNtpJSONBody = ChecksNTP

// PostServiceCreatePopJSONBody defines parameters for PostServiceCreatePop.
type PostServiceCreatePopJSONBody = ChecksPOP

// PostServiceCreateRumJSONBody defines parameters for PostServiceCreateRum.
type PostServiceCreateRumJSONBody = ChecksRUM

// PostServiceCreateRum2JSONBody defines parameters for PostServiceCreateRum2.
type PostServiceCreateRum2JSONBody = ChecksRUM2

// PostServiceCreateSmtpJSONBody defines parameters for PostServiceCreateSmtp.
type PostServiceCreateSmtpJSONBody = ChecksSMTP

// PostServiceCreateSshJSONBody defines parameters for PostServiceCreateSsh.
type PostServiceCreateSshJSONBody = ChecksSSH

// PostServiceCreateSslCertJSONBody defines parameters for PostServiceCreateSslCert.
type PostServiceCreateSslCertJSONBody = ChecksSSLCERT

// PostServiceCreateTcpJSONBody defines parameters for PostServiceCreateTcp.
type PostServiceCreateTcpJSONBody = ChecksTCP

// PostServiceCreateTransactionJSONBody defines parameters for PostServiceCreateTransaction.
type PostServiceCreateTransactionJSONBody = ChecksTRANSACTION

// PostServiceCreateUdpJSONBody defines parameters for PostServiceCreateUdp.
type PostServiceCreateUdpJSONBody = ChecksUDP

// PostServiceCreateWebhookJSONBody defines parameters for PostServiceCreateWebhook.
type PostServiceCreateWebhookJSONBody = ChecksWEBHOOK

// PostServiceCreateWhoisJSONBody defines parameters for PostServiceCreateWhois.
type PostServiceCreateWhoisJSONBody = ChecksWHOIS

// PatchServiceBulkEscalationsJSONBody defines parameters for PatchServiceBulkEscalations.
type PatchServiceBulkEscalationsJSONBody = ChecksBulkUpdateEscalations

// PatchServiceBulkMaintenanceJSONBody defines parameters for PatchServiceBulkMaintenance.
type PatchServiceBulkMaintenanceJSONBody = ChecksBulkUpdateMaintenance

// PatchServiceBulkPauseJSONBody defines parameters for PatchServiceBulkPause.
type PatchServiceBulkPauseJSONBody = BulkChecksAction

// PatchServiceBulkResumeJSONBody defines parameters for PatchServiceBulkResume.
type PatchServiceBulkResumeJSONBody = BulkChecksAction

// GetServiceBulkStatsParams defines parameters for GetServiceBulkStats.
type GetServiceBulkStatsParams struct {
	Pk []interface{} `form:"pk" json:"pk"`

	// The first day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`

	// The last day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	EndDate *string `form:"end_date,omitempty" json:"end_date,omitempty"`

	// Include alert data for each outage in the period.
	IncludeAlerts *bool `form:"include_alerts,omitempty" json:"include_alerts,omitempty"`
}

// PatchServiceBulkUpdateJSONBody defines parameters for PatchServiceBulkUpdate.
type PatchServiceBulkUpdateJSONBody = ChecksBulkUpdate

// PatchServiceDetailJSONBody defines parameters for PatchServiceDetail.
type PatchServiceDetailJSONBody = Checks

// PutServiceDetailJSONBody defines parameters for PutServiceDetail.
type PutServiceDetailJSONBody = Checks

// PatchServiceAddContactGroupsJSONBody defines parameters for PatchServiceAddContactGroups.
type PatchServiceAddContactGroupsJSONBody = CheckContactGroups

// PatchServiceAddLocationsJSONBody defines parameters for PatchServiceAddLocations.
type PatchServiceAddLocationsJSONBody = CheckLocations

// PatchServiceAddTagsJSONBody defines parameters for PatchServiceAddTags.
type PatchServiceAddTagsJSONBody = CheckTags

// PatchServiceSetEscalationsJSONBody defines parameters for PatchServiceSetEscalations.
type PatchServiceSetEscalationsJSONBody = CheckEscalations

// PatchServiceSetMaintenanceJSONBody defines parameters for PatchServiceSetMaintenance.
type PatchServiceSetMaintenanceJSONBody = CheckMaintenance

// PatchServiceReplaceContactGroupsJSONBody defines parameters for PatchServiceReplaceContactGroups.
type PatchServiceReplaceContactGroupsJSONBody = CheckContactGroups

// PatchServiceReplaceLocationsJSONBody defines parameters for PatchServiceReplaceLocations.
type PatchServiceReplaceLocationsJSONBody = CheckLocations

// PatchServiceReplaceTagsJSONBody defines parameters for PatchServiceReplaceTags.
type PatchServiceReplaceTagsJSONBody = CheckTags

// GetServiceResponseTimeDatapointsParams defines parameters for GetServiceResponseTimeDatapoints.
type GetServiceResponseTimeDatapointsParams struct {
	// The first day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`

	// The last day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	EndDate *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetServiceStatsParams defines parameters for GetServiceStats.
type GetServiceStatsParams struct {
	// The first day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`

	// The last day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	EndDate *string `form:"end_date,omitempty" json:"end_date,omitempty"`

	// Show response time for specified location only.
	Location *string `form:"location,omitempty" json:"location,omitempty"`

	// Include response time datapoints for all locations.
	LocationsResponseTimes *bool `form:"locations_response_times,omitempty" json:"locations_response_times,omitempty"`

	// Include alert data for each outage in the period.
	IncludeAlerts *bool `form:"include_alerts,omitempty" json:"include_alerts,omitempty"`

	// Set this paramater to download an XLS containing the stats.
	Download *bool `form:"download,omitempty" json:"download,omitempty"`

	// Set this paramater to download a PDF report.
	Pdf *bool `form:"pdf,omitempty" json:"pdf,omitempty"`
}

// GetContactgrouplistParams defines parameters for GetContactgrouplist.
type GetContactgrouplistParams struct {
	// A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Order results by this field.
	Ordering *GetContactgrouplistParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Filter by contacts that have on-call schedules defined.
	HasOnCallSchedule *bool `form:"has_on_call_schedule,omitempty" json:"has_on_call_schedule,omitempty"`
}

// GetContactgrouplistParamsOrdering defines parameters for GetContactgrouplist.
type GetContactgrouplistParamsOrdering string

// PostContactgrouplistJSONBody defines parameters for PostContactgrouplist.
type PostContactgrouplistJSONBody = ContactGroup

// PatchContactGroupDetailJSONBody defines parameters for PatchContactGroupDetail.
type PatchContactGroupDetailJSONBody = ContactGroup

// PutContactGroupDetailJSONBody defines parameters for PutContactGroupDetail.
type PutContactGroupDetailJSONBody = ContactGroup

// PatchContactGroupSetOnCallHoursJSONBody defines parameters for PatchContactGroupSetOnCallHours.
type PatchContactGroupSetOnCallHoursJSONBody = ContactGroupOnCallSchedule

// GetDashboardlistParams defines parameters for GetDashboardlist.
type GetDashboardlistParams struct {
	// A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Order results by this field.
	Ordering *GetDashboardlistParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`
}

// GetDashboardlistParamsOrdering defines parameters for GetDashboardlist.
type GetDashboardlistParamsOrdering string

// PostDashboardlistJSONBody defines parameters for PostDashboardlist.
type PostDashboardlistJSONBody = Dashboard

// PatchDashboardDetailJSONBody defines parameters for PatchDashboardDetail.
type PatchDashboardDetailJSONBody = Dashboard

// PutDashboardDetailJSONBody defines parameters for PutDashboardDetail.
type PutDashboardDetailJSONBody = Dashboard

// GetIntegrationlistParams defines parameters for GetIntegrationlist.
type GetIntegrationlistParams struct {
	// A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Order results by this field.
	Ordering *GetIntegrationlistParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Filter by integration provider.
	Module *GetIntegrationlistParamsModule `form:"module,omitempty" json:"module,omitempty"`

	// Filter by whether this integration has stopped due to errors.
	IsErrored *bool `form:"is_errored,omitempty" json:"is_errored,omitempty"`
}

// GetIntegrationlistParamsOrdering defines parameters for GetIntegrationlist.
type GetIntegrationlistParamsOrdering string

// GetIntegrationlistParamsModule defines parameters for GetIntegrationlist.
type GetIntegrationlistParamsModule string

// PostIntegrationCreateCachetJSONBody defines parameters for PostIntegrationCreateCachet.
type PostIntegrationCreateCachetJSONBody = IntegrationCachet

// PostIntegrationCreateDatadogJSONBody defines parameters for PostIntegrationCreateDatadog.
type PostIntegrationCreateDatadogJSONBody = IntegrationDatadog

// PostIntegrationCreateGeckoboardJSONBody defines parameters for PostIntegrationCreateGeckoboard.
type PostIntegrationCreateGeckoboardJSONBody = IntegrationGeckoboard

// PostIntegrationCreateJiraservicedeskJSONBody defines parameters for PostIntegrationCreateJiraservicedesk.
type PostIntegrationCreateJiraservicedeskJSONBody = IntegrationJiraservicedesk

// PostIntegrationCreateKlipfolioJSONBody defines parameters for PostIntegrationCreateKlipfolio.
type PostIntegrationCreateKlipfolioJSONBody = IntegrationKlipfolio

// PostIntegrationCreateLibratoJSONBody defines parameters for PostIntegrationCreateLibrato.
type PostIntegrationCreateLibratoJSONBody = IntegrationLibrato

// PostIntegrationCreateMicrosoftTeamsJSONBody defines parameters for PostIntegrationCreateMicrosoftTeams.
type PostIntegrationCreateMicrosoftTeamsJSONBody = IntegrationMicrosoftTeams

// PostIntegrationCreateOpsgenieJSONBody defines parameters for PostIntegrationCreateOpsgenie.
type PostIntegrationCreateOpsgenieJSONBody = IntegrationOpsgenie

// PostIntegrationCreatePagerdutyJSONBody defines parameters for PostIntegrationCreatePagerduty.
type PostIntegrationCreatePagerdutyJSONBody = IntegrationPagerduty

// PostIntegrationCreatePushbulletJSONBody defines parameters for PostIntegrationCreatePushbullet.
type PostIntegrationCreatePushbulletJSONBody = IntegrationPushbullet

// PostIntegrationCreatePushoverJSONBody defines parameters for PostIntegrationCreatePushover.
type PostIntegrationCreatePushoverJSONBody = IntegrationPushover

// PostIntegrationCreateSignifaiJSONBody defines parameters for PostIntegrationCreateSignifai.
type PostIntegrationCreateSignifaiJSONBody = IntegrationSignifai

// PostIntegrationCreateSlackJSONBody defines parameters for PostIntegrationCreateSlack.
type PostIntegrationCreateSlackJSONBody = IntegrationSlack

// PostIntegrationCreateStatusJSONBody defines parameters for PostIntegrationCreateStatus.
type PostIntegrationCreateStatusJSONBody = IntegrationStatus

// PostIntegrationCreateStatuspageJSONBody defines parameters for PostIntegrationCreateStatuspage.
type PostIntegrationCreateStatuspageJSONBody = IntegrationStatuspage

// PostIntegrationCreateTwitterJSONBody defines parameters for PostIntegrationCreateTwitter.
type PostIntegrationCreateTwitterJSONBody = IntegrationTwitter

// PostIntegrationCreateVictoropsJSONBody defines parameters for PostIntegrationCreateVictorops.
type PostIntegrationCreateVictoropsJSONBody = IntegrationVictorops

// PostIntegrationCreateWavefrontJSONBody defines parameters for PostIntegrationCreateWavefront.
type PostIntegrationCreateWavefrontJSONBody = IntegrationWavefront

// PostIntegrationCreateWebhookJSONBody defines parameters for PostIntegrationCreateWebhook.
type PostIntegrationCreateWebhookJSONBody = IntegrationWebhook

// PostIntegrationCreateZapierJSONBody defines parameters for PostIntegrationCreateZapier.
type PostIntegrationCreateZapierJSONBody = IntegrationZapier

// PatchIntegrationDetailJSONBody defines parameters for PatchIntegrationDetail.
type PatchIntegrationDetailJSONBody = Integration

// PutIntegrationDetailJSONBody defines parameters for PutIntegrationDetail.
type PutIntegrationDetailJSONBody = Integration

// GetOutagelistParams defines parameters for GetOutagelist.
type GetOutagelistParams struct {
	// A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Order results by this field.
	Ordering *GetOutagelistParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Filter by check ID.
	CheckPk *float32 `form:"check_pk,omitempty" json:"check_pk,omitempty"`

	// Filter by check type.
	CheckMonitoringServiceType *GetOutagelistParamsCheckMonitoringServiceType `form:"check_monitoring_service_type,omitempty" json:"check_monitoring_service_type,omitempty"`

	// Filter by tag name (can be specified multiple times.)
	CheckTag *string `form:"check_tag,omitempty" json:"check_tag,omitempty"`

	// Start date in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`

	// End date in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	EndDate *string `form:"end_date,omitempty" json:"end_date,omitempty"`

	// Whether the outage is ongoing (true) or resolved (false).
	Ongoing *bool `form:"ongoing,omitempty" json:"ongoing,omitempty"`
}

// GetOutagelistParamsOrdering defines parameters for GetOutagelist.
type GetOutagelistParamsOrdering string

// GetOutagelistParamsCheckMonitoringServiceType defines parameters for GetOutagelist.
type GetOutagelistParamsCheckMonitoringServiceType string

// GetPushnotificationlistParams defines parameters for GetPushnotificationlist.
type GetPushnotificationlistParams struct {
	// A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Order results by this field.
	Ordering *GetPushnotificationlistParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`
}

// GetPushnotificationlistParamsOrdering defines parameters for GetPushnotificationlist.
type GetPushnotificationlistParamsOrdering string

// PostPushnotificationlistJSONBody defines parameters for PostPushnotificationlist.
type PostPushnotificationlistJSONBody = PushNotificationProfileCreate

// PatchPushNotificationDetailJSONBody defines parameters for PatchPushNotificationDetail.
type PatchPushNotificationDetailJSONBody = PushNotificationProfile

// PutPushNotificationDetailJSONBody defines parameters for PutPushNotificationDetail.
type PutPushNotificationDetailJSONBody = PushNotificationProfile

// GetScheduledreportlistParams defines parameters for GetScheduledreportlist.
type GetScheduledreportlistParams struct {
	// A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Order results by this field.
	Ordering *GetScheduledreportlistParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`
}

// GetScheduledreportlistParamsOrdering defines parameters for GetScheduledreportlist.
type GetScheduledreportlistParamsOrdering string

// PostScheduledreportlistJSONBody defines parameters for PostScheduledreportlist.
type PostScheduledreportlistJSONBody = ScheduledReport

// PatchScheduledReportDetailJSONBody defines parameters for PatchScheduledReportDetail.
type PatchScheduledReportDetailJSONBody = ScheduledReport

// PutScheduledReportDetailJSONBody defines parameters for PutScheduledReportDetail.
type PutScheduledReportDetailJSONBody = ScheduledReport

// GetSlareportlistParams defines parameters for GetSlareportlist.
type GetSlareportlistParams struct {
	// A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Order results by this field.
	Ordering *GetSlareportlistParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`
}

// GetSlareportlistParamsOrdering defines parameters for GetSlareportlist.
type GetSlareportlistParamsOrdering string

// PostSlareportlistJSONBody defines parameters for PostSlareportlist.
type PostSlareportlistJSONBody = SLAReport

// PatchSlaReportDetailJSONBody defines parameters for PatchSlaReportDetail.
type PatchSlaReportDetailJSONBody = SLAReport

// PutSlaReportDetailJSONBody defines parameters for PutSlaReportDetail.
type PutSlaReportDetailJSONBody = SLAReport

// GetSlaReportStatsParams defines parameters for GetSlaReportStats.
type GetSlaReportStatsParams struct {
	// The first day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`

	// The last day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	EndDate *string `form:"end_date,omitempty" json:"end_date,omitempty"`

	// The output format of the report: [json, pdf, xls]
	Output *GetSlaReportStatsParamsOutput `form:"output,omitempty" json:"output,omitempty"`
}

// GetSlaReportStatsParamsOutput defines parameters for GetSlaReportStats.
type GetSlaReportStatsParamsOutput string

// GetStatuspagelistParams defines parameters for GetStatuspagelist.
type GetStatuspagelistParams struct {
	// A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Order results by this field.
	Ordering *GetStatuspagelistParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Filter by whether this status page is public.
	IsPublic *bool `form:"is_public,omitempty" json:"is_public,omitempty"`
}

// GetStatuspagelistParamsOrdering defines parameters for GetStatuspagelist.
type GetStatuspagelistParamsOrdering string

// PostStatuspagelistJSONBody defines parameters for PostStatuspagelist.
type PostStatuspagelistJSONBody = StatusPage

// PatchStatuspageDetailJSONBody defines parameters for PatchStatuspageDetail.
type PatchStatuspageDetailJSONBody = StatusPage

// PutStatuspageDetailJSONBody defines parameters for PutStatuspageDetail.
type PutStatuspageDetailJSONBody = StatusPage

// GetStatuspageHistoryParams defines parameters for GetStatuspageHistory.
type GetStatuspageHistoryParams struct {
	// Start date in ISO 8601 (YYYY-MM-DD) format.
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`

	// End date in ISO 8601 (YYYY-MM-DD) format.
	EndDate *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetComponentslistParams defines parameters for GetComponentslist.
type GetComponentslistParams struct {
	// A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Filter by whether this component belongs to group with this ID
	GroupId *float32 `form:"group_id,omitempty" json:"group_id,omitempty"`

	// Filter by whether this component is a group
	IsGroup *bool `form:"is_group,omitempty" json:"is_group,omitempty"`
}

// PostComponentslistJSONBody defines parameters for PostComponentslist.
type PostComponentslistJSONBody = Component

// PatchComponentDetailJSONBody defines parameters for PatchComponentDetail.
type PatchComponentDetailJSONBody = Component

// PutComponentDetailJSONBody defines parameters for PutComponentDetail.
type PutComponentDetailJSONBody = Component

// GetIncidentlistParams defines parameters for GetIncidentlist.
type GetIncidentlistParams struct {
	// A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Filter by incident type
	IncidentType *GetIncidentlistParamsIncidentType `form:"incident_type,omitempty" json:"incident_type,omitempty"`

	// Start date in ISO 8601 (YYYY-MM-DD) format.
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`

	// Start date in ISO 8601 (YYYY-MM-DD) format.
	EndDate *string `form:"end_date,omitempty" json:"end_date,omitempty"`

	// Order results by this field.
	Ordering *GetIncidentlistParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`
}

// GetIncidentlistParamsIncidentType defines parameters for GetIncidentlist.
type GetIncidentlistParamsIncidentType string

// GetIncidentlistParamsOrdering defines parameters for GetIncidentlist.
type GetIncidentlistParamsOrdering string

// PostIncidentlistJSONBody defines parameters for PostIncidentlist.
type PostIncidentlistJSONBody = Incident

// PatchIncidentDetailJSONBody defines parameters for PatchIncidentDetail.
type PatchIncidentDetailJSONBody = Incident

// PutIncidentDetailJSONBody defines parameters for PutIncidentDetail.
type PutIncidentDetailJSONBody = Incident

// GetMetricslistParams defines parameters for GetMetricslist.
type GetMetricslistParams struct {
	// A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Filter by whether this metric is visible to Status Page visitors
	IsVisible *bool `form:"is_visible,omitempty" json:"is_visible,omitempty"`
}

// PostMetricslistJSONBody defines parameters for PostMetricslist.
type PostMetricslistJSONBody = Metric

// PatchMetricDetailJSONBody defines parameters for PatchMetricDetail.
type PatchMetricDetailJSONBody = Metric

// PutMetricDetailJSONBody defines parameters for PutMetricDetail.
type PutMetricDetailJSONBody = Metric

// GetUserlistParams defines parameters for GetUserlist.
type GetUserlistParams struct {
	// A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Order results by this field.
	Ordering *GetUserlistParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Filter by email address.
	Email *string `form:"email,omitempty" json:"email,omitempty"`

	// Filter by access level.
	AccessLevel *GetUserlistParamsAccessLevel `form:"access_level,omitempty" json:"access_level,omitempty"`

	// Filter by users that have access to this subaccount ID.
	Subaccount *string `form:"subaccount,omitempty" json:"subaccount,omitempty"`

	// Filter by whether the user is active.
	IsActive *bool `form:"is_active,omitempty" json:"is_active,omitempty"`

	// Filter by whether the API is enabled for this user.
	IsApiEnabled *bool `form:"is_api_enabled,omitempty" json:"is_api_enabled,omitempty"`

	// Filter by whether invoices are sent to this user.
	NotifyPaidInvoices *bool `form:"notify_paid_invoices,omitempty" json:"notify_paid_invoices,omitempty"`
}

// GetUserlistParamsOrdering defines parameters for GetUserlist.
type GetUserlistParamsOrdering string

// GetUserlistParamsAccessLevel defines parameters for GetUserlist.
type GetUserlistParamsAccessLevel string

// PostUserlistJSONBody defines parameters for PostUserlist.
type PostUserlistJSONBody = User

// PatchUserDetailJSONBody defines parameters for PatchUserDetail.
type PatchUserDetailJSONBody = User

// PutUserDetailJSONBody defines parameters for PutUserDetail.
type PutUserDetailJSONBody = User

// PostAuthLoginJSONRequestBody defines body for PostAuthLogin for application/json ContentType.
type PostAuthLoginJSONRequestBody = PostAuthLoginJSONBody

// PostAuthResetPasswordJSONRequestBody defines body for PostAuthResetPassword for application/json ContentType.
type PostAuthResetPasswordJSONRequestBody = PostAuthResetPasswordJSONBody

// PostSendMagicLinkJSONRequestBody defines body for PostSendMagicLink for application/json ContentType.
type PostSendMagicLinkJSONRequestBody = PostSendMagicLinkJSONBody

// PostAuthSubaccountsJSONRequestBody defines body for PostAuthSubaccounts for application/json ContentType.
type PostAuthSubaccountsJSONRequestBody = PostAuthSubaccountsJSONBody

// PatchAuthSubaccountJSONRequestBody defines body for PatchAuthSubaccount for application/json ContentType.
type PatchAuthSubaccountJSONRequestBody = PatchAuthSubaccountJSONBody

// PostAuthSubaccountPacksJSONRequestBody defines body for PostAuthSubaccountPacks for application/json ContentType.
type PostAuthSubaccountPacksJSONRequestBody = PostAuthSubaccountPacksJSONBody

// PostServicetaglistJSONRequestBody defines body for PostServicetaglist for application/json ContentType.
type PostServicetaglistJSONRequestBody = PostServicetaglistJSONBody

// PatchServiceTagDetailJSONRequestBody defines body for PatchServiceTagDetail for application/json ContentType.
type PatchServiceTagDetailJSONRequestBody = PatchServiceTagDetailJSONBody

// PutServiceTagDetailJSONRequestBody defines body for PutServiceTagDetail for application/json ContentType.
type PutServiceTagDetailJSONRequestBody = PutServiceTagDetailJSONBody

// PostServiceCreateApiJSONRequestBody defines body for PostServiceCreateApi for application/json ContentType.
type PostServiceCreateApiJSONRequestBody = PostServiceCreateApiJSONBody

// PostServiceCreateBlacklistJSONRequestBody defines body for PostServiceCreateBlacklist for application/json ContentType.
type PostServiceCreateBlacklistJSONRequestBody = PostServiceCreateBlacklistJSONBody

// PostServiceCreateDnsJSONRequestBody defines body for PostServiceCreateDns for application/json ContentType.
type PostServiceCreateDnsJSONRequestBody = PostServiceCreateDnsJSONBody

// PostServiceCreateGroupJSONRequestBody defines body for PostServiceCreateGroup for application/json ContentType.
type PostServiceCreateGroupJSONRequestBody = PostServiceCreateGroupJSONBody

// PostServiceCreateHeartbeatJSONRequestBody defines body for PostServiceCreateHeartbeat for application/json ContentType.
type PostServiceCreateHeartbeatJSONRequestBody = PostServiceCreateHeartbeatJSONBody

// PostServiceCreateHttpJSONRequestBody defines body for PostServiceCreateHttp for application/json ContentType.
type PostServiceCreateHttpJSONRequestBody = PostServiceCreateHttpJSONBody

// PostServiceCreateIcmpJSONRequestBody defines body for PostServiceCreateIcmp for application/json ContentType.
type PostServiceCreateIcmpJSONRequestBody = PostServiceCreateIcmpJSONBody

// PostServiceCreateImapJSONRequestBody defines body for PostServiceCreateImap for application/json ContentType.
type PostServiceCreateImapJSONRequestBody = PostServiceCreateImapJSONBody

// PostServiceCreateMalwareJSONRequestBody defines body for PostServiceCreateMalware for application/json ContentType.
type PostServiceCreateMalwareJSONRequestBody = PostServiceCreateMalwareJSONBody

// PostServiceCreateNtpJSONRequestBody defines body for PostServiceCreateNtp for application/json ContentType.
type PostServiceCreateNtpJSONRequestBody = PostServiceCreateNtpJSONBody

// PostServiceCreatePopJSONRequestBody defines body for PostServiceCreatePop for application/json ContentType.
type PostServiceCreatePopJSONRequestBody = PostServiceCreatePopJSONBody

// PostServiceCreateRumJSONRequestBody defines body for PostServiceCreateRum for application/json ContentType.
type PostServiceCreateRumJSONRequestBody = PostServiceCreateRumJSONBody

// PostServiceCreateRum2JSONRequestBody defines body for PostServiceCreateRum2 for application/json ContentType.
type PostServiceCreateRum2JSONRequestBody = PostServiceCreateRum2JSONBody

// PostServiceCreateSmtpJSONRequestBody defines body for PostServiceCreateSmtp for application/json ContentType.
type PostServiceCreateSmtpJSONRequestBody = PostServiceCreateSmtpJSONBody

// PostServiceCreateSshJSONRequestBody defines body for PostServiceCreateSsh for application/json ContentType.
type PostServiceCreateSshJSONRequestBody = PostServiceCreateSshJSONBody

// PostServiceCreateSslCertJSONRequestBody defines body for PostServiceCreateSslCert for application/json ContentType.
type PostServiceCreateSslCertJSONRequestBody = PostServiceCreateSslCertJSONBody

// PostServiceCreateTcpJSONRequestBody defines body for PostServiceCreateTcp for application/json ContentType.
type PostServiceCreateTcpJSONRequestBody = PostServiceCreateTcpJSONBody

// PostServiceCreateTransactionJSONRequestBody defines body for PostServiceCreateTransaction for application/json ContentType.
type PostServiceCreateTransactionJSONRequestBody = PostServiceCreateTransactionJSONBody

// PostServiceCreateUdpJSONRequestBody defines body for PostServiceCreateUdp for application/json ContentType.
type PostServiceCreateUdpJSONRequestBody = PostServiceCreateUdpJSONBody

// PostServiceCreateWebhookJSONRequestBody defines body for PostServiceCreateWebhook for application/json ContentType.
type PostServiceCreateWebhookJSONRequestBody = PostServiceCreateWebhookJSONBody

// PostServiceCreateWhoisJSONRequestBody defines body for PostServiceCreateWhois for application/json ContentType.
type PostServiceCreateWhoisJSONRequestBody = PostServiceCreateWhoisJSONBody

// PatchServiceBulkEscalationsJSONRequestBody defines body for PatchServiceBulkEscalations for application/json ContentType.
type PatchServiceBulkEscalationsJSONRequestBody = PatchServiceBulkEscalationsJSONBody

// PatchServiceBulkMaintenanceJSONRequestBody defines body for PatchServiceBulkMaintenance for application/json ContentType.
type PatchServiceBulkMaintenanceJSONRequestBody = PatchServiceBulkMaintenanceJSONBody

// PatchServiceBulkPauseJSONRequestBody defines body for PatchServiceBulkPause for application/json ContentType.
type PatchServiceBulkPauseJSONRequestBody = PatchServiceBulkPauseJSONBody

// PatchServiceBulkResumeJSONRequestBody defines body for PatchServiceBulkResume for application/json ContentType.
type PatchServiceBulkResumeJSONRequestBody = PatchServiceBulkResumeJSONBody

// PatchServiceBulkUpdateJSONRequestBody defines body for PatchServiceBulkUpdate for application/json ContentType.
type PatchServiceBulkUpdateJSONRequestBody = PatchServiceBulkUpdateJSONBody

// PatchServiceDetailJSONRequestBody defines body for PatchServiceDetail for application/json ContentType.
type PatchServiceDetailJSONRequestBody = PatchServiceDetailJSONBody

// PutServiceDetailJSONRequestBody defines body for PutServiceDetail for application/json ContentType.
type PutServiceDetailJSONRequestBody = PutServiceDetailJSONBody

// PatchServiceAddContactGroupsJSONRequestBody defines body for PatchServiceAddContactGroups for application/json ContentType.
type PatchServiceAddContactGroupsJSONRequestBody = PatchServiceAddContactGroupsJSONBody

// PatchServiceAddLocationsJSONRequestBody defines body for PatchServiceAddLocations for application/json ContentType.
type PatchServiceAddLocationsJSONRequestBody = PatchServiceAddLocationsJSONBody

// PatchServiceAddTagsJSONRequestBody defines body for PatchServiceAddTags for application/json ContentType.
type PatchServiceAddTagsJSONRequestBody = PatchServiceAddTagsJSONBody

// PatchServiceSetEscalationsJSONRequestBody defines body for PatchServiceSetEscalations for application/json ContentType.
type PatchServiceSetEscalationsJSONRequestBody = PatchServiceSetEscalationsJSONBody

// PatchServiceSetMaintenanceJSONRequestBody defines body for PatchServiceSetMaintenance for application/json ContentType.
type PatchServiceSetMaintenanceJSONRequestBody = PatchServiceSetMaintenanceJSONBody

// PatchServiceReplaceContactGroupsJSONRequestBody defines body for PatchServiceReplaceContactGroups for application/json ContentType.
type PatchServiceReplaceContactGroupsJSONRequestBody = PatchServiceReplaceContactGroupsJSONBody

// PatchServiceReplaceLocationsJSONRequestBody defines body for PatchServiceReplaceLocations for application/json ContentType.
type PatchServiceReplaceLocationsJSONRequestBody = PatchServiceReplaceLocationsJSONBody

// PatchServiceReplaceTagsJSONRequestBody defines body for PatchServiceReplaceTags for application/json ContentType.
type PatchServiceReplaceTagsJSONRequestBody = PatchServiceReplaceTagsJSONBody

// PostContactgrouplistJSONRequestBody defines body for PostContactgrouplist for application/json ContentType.
type PostContactgrouplistJSONRequestBody = PostContactgrouplistJSONBody

// PatchContactGroupDetailJSONRequestBody defines body for PatchContactGroupDetail for application/json ContentType.
type PatchContactGroupDetailJSONRequestBody = PatchContactGroupDetailJSONBody

// PutContactGroupDetailJSONRequestBody defines body for PutContactGroupDetail for application/json ContentType.
type PutContactGroupDetailJSONRequestBody = PutContactGroupDetailJSONBody

// PatchContactGroupSetOnCallHoursJSONRequestBody defines body for PatchContactGroupSetOnCallHours for application/json ContentType.
type PatchContactGroupSetOnCallHoursJSONRequestBody = PatchContactGroupSetOnCallHoursJSONBody

// PostDashboardlistJSONRequestBody defines body for PostDashboardlist for application/json ContentType.
type PostDashboardlistJSONRequestBody = PostDashboardlistJSONBody

// PatchDashboardDetailJSONRequestBody defines body for PatchDashboardDetail for application/json ContentType.
type PatchDashboardDetailJSONRequestBody = PatchDashboardDetailJSONBody

// PutDashboardDetailJSONRequestBody defines body for PutDashboardDetail for application/json ContentType.
type PutDashboardDetailJSONRequestBody = PutDashboardDetailJSONBody

// PostIntegrationCreateCachetJSONRequestBody defines body for PostIntegrationCreateCachet for application/json ContentType.
type PostIntegrationCreateCachetJSONRequestBody = PostIntegrationCreateCachetJSONBody

// PostIntegrationCreateDatadogJSONRequestBody defines body for PostIntegrationCreateDatadog for application/json ContentType.
type PostIntegrationCreateDatadogJSONRequestBody = PostIntegrationCreateDatadogJSONBody

// PostIntegrationCreateGeckoboardJSONRequestBody defines body for PostIntegrationCreateGeckoboard for application/json ContentType.
type PostIntegrationCreateGeckoboardJSONRequestBody = PostIntegrationCreateGeckoboardJSONBody

// PostIntegrationCreateJiraservicedeskJSONRequestBody defines body for PostIntegrationCreateJiraservicedesk for application/json ContentType.
type PostIntegrationCreateJiraservicedeskJSONRequestBody = PostIntegrationCreateJiraservicedeskJSONBody

// PostIntegrationCreateKlipfolioJSONRequestBody defines body for PostIntegrationCreateKlipfolio for application/json ContentType.
type PostIntegrationCreateKlipfolioJSONRequestBody = PostIntegrationCreateKlipfolioJSONBody

// PostIntegrationCreateLibratoJSONRequestBody defines body for PostIntegrationCreateLibrato for application/json ContentType.
type PostIntegrationCreateLibratoJSONRequestBody = PostIntegrationCreateLibratoJSONBody

// PostIntegrationCreateMicrosoftTeamsJSONRequestBody defines body for PostIntegrationCreateMicrosoftTeams for application/json ContentType.
type PostIntegrationCreateMicrosoftTeamsJSONRequestBody = PostIntegrationCreateMicrosoftTeamsJSONBody

// PostIntegrationCreateOpsgenieJSONRequestBody defines body for PostIntegrationCreateOpsgenie for application/json ContentType.
type PostIntegrationCreateOpsgenieJSONRequestBody = PostIntegrationCreateOpsgenieJSONBody

// PostIntegrationCreatePagerdutyJSONRequestBody defines body for PostIntegrationCreatePagerduty for application/json ContentType.
type PostIntegrationCreatePagerdutyJSONRequestBody = PostIntegrationCreatePagerdutyJSONBody

// PostIntegrationCreatePushbulletJSONRequestBody defines body for PostIntegrationCreatePushbullet for application/json ContentType.
type PostIntegrationCreatePushbulletJSONRequestBody = PostIntegrationCreatePushbulletJSONBody

// PostIntegrationCreatePushoverJSONRequestBody defines body for PostIntegrationCreatePushover for application/json ContentType.
type PostIntegrationCreatePushoverJSONRequestBody = PostIntegrationCreatePushoverJSONBody

// PostIntegrationCreateSignifaiJSONRequestBody defines body for PostIntegrationCreateSignifai for application/json ContentType.
type PostIntegrationCreateSignifaiJSONRequestBody = PostIntegrationCreateSignifaiJSONBody

// PostIntegrationCreateSlackJSONRequestBody defines body for PostIntegrationCreateSlack for application/json ContentType.
type PostIntegrationCreateSlackJSONRequestBody = PostIntegrationCreateSlackJSONBody

// PostIntegrationCreateStatusJSONRequestBody defines body for PostIntegrationCreateStatus for application/json ContentType.
type PostIntegrationCreateStatusJSONRequestBody = PostIntegrationCreateStatusJSONBody

// PostIntegrationCreateStatuspageJSONRequestBody defines body for PostIntegrationCreateStatuspage for application/json ContentType.
type PostIntegrationCreateStatuspageJSONRequestBody = PostIntegrationCreateStatuspageJSONBody

// PostIntegrationCreateTwitterJSONRequestBody defines body for PostIntegrationCreateTwitter for application/json ContentType.
type PostIntegrationCreateTwitterJSONRequestBody = PostIntegrationCreateTwitterJSONBody

// PostIntegrationCreateVictoropsJSONRequestBody defines body for PostIntegrationCreateVictorops for application/json ContentType.
type PostIntegrationCreateVictoropsJSONRequestBody = PostIntegrationCreateVictoropsJSONBody

// PostIntegrationCreateWavefrontJSONRequestBody defines body for PostIntegrationCreateWavefront for application/json ContentType.
type PostIntegrationCreateWavefrontJSONRequestBody = PostIntegrationCreateWavefrontJSONBody

// PostIntegrationCreateWebhookJSONRequestBody defines body for PostIntegrationCreateWebhook for application/json ContentType.
type PostIntegrationCreateWebhookJSONRequestBody = PostIntegrationCreateWebhookJSONBody

// PostIntegrationCreateZapierJSONRequestBody defines body for PostIntegrationCreateZapier for application/json ContentType.
type PostIntegrationCreateZapierJSONRequestBody = PostIntegrationCreateZapierJSONBody

// PatchIntegrationDetailJSONRequestBody defines body for PatchIntegrationDetail for application/json ContentType.
type PatchIntegrationDetailJSONRequestBody = PatchIntegrationDetailJSONBody

// PutIntegrationDetailJSONRequestBody defines body for PutIntegrationDetail for application/json ContentType.
type PutIntegrationDetailJSONRequestBody = PutIntegrationDetailJSONBody

// PostPushnotificationlistJSONRequestBody defines body for PostPushnotificationlist for application/json ContentType.
type PostPushnotificationlistJSONRequestBody = PostPushnotificationlistJSONBody

// PatchPushNotificationDetailJSONRequestBody defines body for PatchPushNotificationDetail for application/json ContentType.
type PatchPushNotificationDetailJSONRequestBody = PatchPushNotificationDetailJSONBody

// PutPushNotificationDetailJSONRequestBody defines body for PutPushNotificationDetail for application/json ContentType.
type PutPushNotificationDetailJSONRequestBody = PutPushNotificationDetailJSONBody

// PostScheduledreportlistJSONRequestBody defines body for PostScheduledreportlist for application/json ContentType.
type PostScheduledreportlistJSONRequestBody = PostScheduledreportlistJSONBody

// PatchScheduledReportDetailJSONRequestBody defines body for PatchScheduledReportDetail for application/json ContentType.
type PatchScheduledReportDetailJSONRequestBody = PatchScheduledReportDetailJSONBody

// PutScheduledReportDetailJSONRequestBody defines body for PutScheduledReportDetail for application/json ContentType.
type PutScheduledReportDetailJSONRequestBody = PutScheduledReportDetailJSONBody

// PostSlareportlistJSONRequestBody defines body for PostSlareportlist for application/json ContentType.
type PostSlareportlistJSONRequestBody = PostSlareportlistJSONBody

// PatchSlaReportDetailJSONRequestBody defines body for PatchSlaReportDetail for application/json ContentType.
type PatchSlaReportDetailJSONRequestBody = PatchSlaReportDetailJSONBody

// PutSlaReportDetailJSONRequestBody defines body for PutSlaReportDetail for application/json ContentType.
type PutSlaReportDetailJSONRequestBody = PutSlaReportDetailJSONBody

// PostStatuspagelistJSONRequestBody defines body for PostStatuspagelist for application/json ContentType.
type PostStatuspagelistJSONRequestBody = PostStatuspagelistJSONBody

// PatchStatuspageDetailJSONRequestBody defines body for PatchStatuspageDetail for application/json ContentType.
type PatchStatuspageDetailJSONRequestBody = PatchStatuspageDetailJSONBody

// PutStatuspageDetailJSONRequestBody defines body for PutStatuspageDetail for application/json ContentType.
type PutStatuspageDetailJSONRequestBody = PutStatuspageDetailJSONBody

// PostComponentslistJSONRequestBody defines body for PostComponentslist for application/json ContentType.
type PostComponentslistJSONRequestBody = PostComponentslistJSONBody

// PatchComponentDetailJSONRequestBody defines body for PatchComponentDetail for application/json ContentType.
type PatchComponentDetailJSONRequestBody = PatchComponentDetailJSONBody

// PutComponentDetailJSONRequestBody defines body for PutComponentDetail for application/json ContentType.
type PutComponentDetailJSONRequestBody = PutComponentDetailJSONBody

// PostIncidentlistJSONRequestBody defines body for PostIncidentlist for application/json ContentType.
type PostIncidentlistJSONRequestBody = PostIncidentlistJSONBody

// PatchIncidentDetailJSONRequestBody defines body for PatchIncidentDetail for application/json ContentType.
type PatchIncidentDetailJSONRequestBody = PatchIncidentDetailJSONBody

// PutIncidentDetailJSONRequestBody defines body for PutIncidentDetail for application/json ContentType.
type PutIncidentDetailJSONRequestBody = PutIncidentDetailJSONBody

// PostMetricslistJSONRequestBody defines body for PostMetricslist for application/json ContentType.
type PostMetricslistJSONRequestBody = PostMetricslistJSONBody

// PatchMetricDetailJSONRequestBody defines body for PatchMetricDetail for application/json ContentType.
type PatchMetricDetailJSONRequestBody = PatchMetricDetailJSONBody

// PutMetricDetailJSONRequestBody defines body for PutMetricDetail for application/json ContentType.
type PutMetricDetailJSONRequestBody = PutMetricDetailJSONBody

// PostUserlistJSONRequestBody defines body for PostUserlist for application/json ContentType.
type PostUserlistJSONRequestBody = PostUserlistJSONBody

// PatchUserDetailJSONRequestBody defines body for PatchUserDetail for application/json ContentType.
type PatchUserDetailJSONRequestBody = PatchUserDetailJSONBody

// PutUserDetailJSONRequestBody defines body for PutUserDetail for application/json ContentType.
type PutUserDetailJSONRequestBody = PutUserDetailJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAlertlist request
	GetAlertlist(ctx context.Context, params *GetAlertlistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertAlertRootCause request
	GetAlertAlertRootCause(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertDetail request
	GetAlertDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAlertIgnore request
	PostAlertIgnore(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthList request
	GetAuthList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthAccountUsage request
	GetAuthAccountUsage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthLogin request with any body
	PostAuthLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthLogin(ctx context.Context, body PostAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthMe request
	GetAuthMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthResetPassword request
	GetAuthResetPassword(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthResetPassword request with any body
	PostAuthResetPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthResetPassword(ctx context.Context, body PostAuthResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSendMagicLink request with any body
	PostSendMagicLinkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSendMagicLink(ctx context.Context, body PostSendMagicLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthSubaccounts request
	GetAuthSubaccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthSubaccounts request with any body
	PostAuthSubaccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthSubaccounts(ctx context.Context, body PostAuthSubaccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthSubaccount request
	GetAuthSubaccount(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchAuthSubaccount request with any body
	PatchAuthSubaccountWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchAuthSubaccount(ctx context.Context, pk string, body PatchAuthSubaccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthSubaccountPacks request with any body
	PostAuthSubaccountPacksWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthSubaccountPacks(ctx context.Context, pk string, body PostAuthSubaccountPacksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostValidateMagicLink request
	PostValidateMagicLink(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServicetaglist request
	GetServicetaglist(ctx context.Context, params *GetServicetaglistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServicetaglist request with any body
	PostServicetaglistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServicetaglist(ctx context.Context, body PostServicetaglistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteServiceTagDetail request
	DeleteServiceTagDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceTagDetail request
	GetServiceTagDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceTagDetail request with any body
	PatchServiceTagDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceTagDetail(ctx context.Context, pk string, body PatchServiceTagDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutServiceTagDetail request with any body
	PutServiceTagDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutServiceTagDetail(ctx context.Context, pk string, body PutServiceTagDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServicelist request
	GetServicelist(ctx context.Context, params *GetServicelistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateApi request with any body
	PostServiceCreateApiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateApi(ctx context.Context, body PostServiceCreateApiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateBlacklist request with any body
	PostServiceCreateBlacklistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateBlacklist(ctx context.Context, body PostServiceCreateBlacklistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateDns request with any body
	PostServiceCreateDnsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateDns(ctx context.Context, body PostServiceCreateDnsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateGroup request with any body
	PostServiceCreateGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateGroup(ctx context.Context, body PostServiceCreateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateHeartbeat request with any body
	PostServiceCreateHeartbeatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateHeartbeat(ctx context.Context, body PostServiceCreateHeartbeatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateHttp request with any body
	PostServiceCreateHttpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateHttp(ctx context.Context, body PostServiceCreateHttpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateIcmp request with any body
	PostServiceCreateIcmpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateIcmp(ctx context.Context, body PostServiceCreateIcmpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateImap request with any body
	PostServiceCreateImapWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateImap(ctx context.Context, body PostServiceCreateImapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateMalware request with any body
	PostServiceCreateMalwareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateMalware(ctx context.Context, body PostServiceCreateMalwareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateNtp request with any body
	PostServiceCreateNtpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateNtp(ctx context.Context, body PostServiceCreateNtpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreatePop request with any body
	PostServiceCreatePopWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreatePop(ctx context.Context, body PostServiceCreatePopJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateRum request with any body
	PostServiceCreateRumWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateRum(ctx context.Context, body PostServiceCreateRumJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateRum2 request with any body
	PostServiceCreateRum2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateRum2(ctx context.Context, body PostServiceCreateRum2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateSmtp request with any body
	PostServiceCreateSmtpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateSmtp(ctx context.Context, body PostServiceCreateSmtpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateSsh request with any body
	PostServiceCreateSshWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateSsh(ctx context.Context, body PostServiceCreateSshJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateSslCert request with any body
	PostServiceCreateSslCertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateSslCert(ctx context.Context, body PostServiceCreateSslCertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateTcp request with any body
	PostServiceCreateTcpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateTcp(ctx context.Context, body PostServiceCreateTcpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateTransaction request with any body
	PostServiceCreateTransactionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateTransaction(ctx context.Context, body PostServiceCreateTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateUdp request with any body
	PostServiceCreateUdpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateUdp(ctx context.Context, body PostServiceCreateUdpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateWebhook request with any body
	PostServiceCreateWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateWebhook(ctx context.Context, body PostServiceCreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateWhois request with any body
	PostServiceCreateWhoisWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateWhois(ctx context.Context, body PostServiceCreateWhoisJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceBulkEscalations request with any body
	PatchServiceBulkEscalationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceBulkEscalations(ctx context.Context, body PatchServiceBulkEscalationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceBulkMaintenance request with any body
	PatchServiceBulkMaintenanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceBulkMaintenance(ctx context.Context, body PatchServiceBulkMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceBulkPause request with any body
	PatchServiceBulkPauseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceBulkPause(ctx context.Context, body PatchServiceBulkPauseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceBulkResume request with any body
	PatchServiceBulkResumeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceBulkResume(ctx context.Context, body PatchServiceBulkResumeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceBulkStats request
	GetServiceBulkStats(ctx context.Context, params *GetServiceBulkStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceBulkUpdate request with any body
	PatchServiceBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceBulkUpdate(ctx context.Context, body PatchServiceBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceShowServiceDefs request
	GetServiceShowServiceDefs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceShowLocations request
	GetServiceShowLocations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteServiceDetail request
	DeleteServiceDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceDetail request
	GetServiceDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceDetail request with any body
	PatchServiceDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceDetail(ctx context.Context, pk string, body PatchServiceDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutServiceDetail request with any body
	PutServiceDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutServiceDetail(ctx context.Context, pk string, body PutServiceDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceAddContactGroups request with any body
	PatchServiceAddContactGroupsWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceAddContactGroups(ctx context.Context, pk string, body PatchServiceAddContactGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceAddLocations request with any body
	PatchServiceAddLocationsWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceAddLocations(ctx context.Context, pk string, body PatchServiceAddLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceAddTags request with any body
	PatchServiceAddTagsWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceAddTags(ctx context.Context, pk string, body PatchServiceAddTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceAnalysis request
	GetServiceAnalysis(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceCurrentStatus request
	GetServiceCurrentStatus(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceSetEscalations request with any body
	PatchServiceSetEscalationsWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceSetEscalations(ctx context.Context, pk string, body PatchServiceSetEscalationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceSetMaintenance request with any body
	PatchServiceSetMaintenanceWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceSetMaintenance(ctx context.Context, pk string, body PatchServiceSetMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServicePause request
	PostServicePause(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceReplaceContactGroups request with any body
	PatchServiceReplaceContactGroupsWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceReplaceContactGroups(ctx context.Context, pk string, body PatchServiceReplaceContactGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceReplaceLocations request with any body
	PatchServiceReplaceLocationsWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceReplaceLocations(ctx context.Context, pk string, body PatchServiceReplaceLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceReplaceTags request with any body
	PatchServiceReplaceTagsWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceReplaceTags(ctx context.Context, pk string, body PatchServiceReplaceTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceResponseTimeDatapoints request
	GetServiceResponseTimeDatapoints(ctx context.Context, pk string, params *GetServiceResponseTimeDatapointsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceResume request
	PostServiceResume(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceStats request
	GetServiceStats(ctx context.Context, pk string, params *GetServiceStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactgrouplist request
	GetContactgrouplist(ctx context.Context, params *GetContactgrouplistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostContactgrouplist request with any body
	PostContactgrouplistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostContactgrouplist(ctx context.Context, body PostContactgrouplistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteContactGroupDetail request
	DeleteContactGroupDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactGroupDetail request
	GetContactGroupDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchContactGroupDetail request with any body
	PatchContactGroupDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchContactGroupDetail(ctx context.Context, pk string, body PatchContactGroupDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutContactGroupDetail request with any body
	PutContactGroupDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutContactGroupDetail(ctx context.Context, pk string, body PutContactGroupDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchContactGroupSetOnCallHours request with any body
	PatchContactGroupSetOnCallHoursWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchContactGroupSetOnCallHours(ctx context.Context, pk string, body PatchContactGroupSetOnCallHoursJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboardlist request
	GetDashboardlist(ctx context.Context, params *GetDashboardlistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDashboardlist request with any body
	PostDashboardlistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDashboardlist(ctx context.Context, body PostDashboardlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboardDefault request
	GetDashboardDefault(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDashboardDetail request
	DeleteDashboardDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboardDetail request
	GetDashboardDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchDashboardDetail request with any body
	PatchDashboardDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchDashboardDetail(ctx context.Context, pk string, body PatchDashboardDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutDashboardDetail request with any body
	PutDashboardDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutDashboardDetail(ctx context.Context, pk string, body PutDashboardDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboardStats request
	GetDashboardStats(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIntegrationlist request
	GetIntegrationlist(ctx context.Context, params *GetIntegrationlistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateCachet request with any body
	PostIntegrationCreateCachetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateCachet(ctx context.Context, body PostIntegrationCreateCachetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateDatadog request with any body
	PostIntegrationCreateDatadogWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateDatadog(ctx context.Context, body PostIntegrationCreateDatadogJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateGeckoboard request with any body
	PostIntegrationCreateGeckoboardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateGeckoboard(ctx context.Context, body PostIntegrationCreateGeckoboardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateJiraservicedesk request with any body
	PostIntegrationCreateJiraservicedeskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateJiraservicedesk(ctx context.Context, body PostIntegrationCreateJiraservicedeskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateKlipfolio request with any body
	PostIntegrationCreateKlipfolioWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateKlipfolio(ctx context.Context, body PostIntegrationCreateKlipfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateLibrato request with any body
	PostIntegrationCreateLibratoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateLibrato(ctx context.Context, body PostIntegrationCreateLibratoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateMicrosoftTeams request with any body
	PostIntegrationCreateMicrosoftTeamsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateMicrosoftTeams(ctx context.Context, body PostIntegrationCreateMicrosoftTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateOpsgenie request with any body
	PostIntegrationCreateOpsgenieWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateOpsgenie(ctx context.Context, body PostIntegrationCreateOpsgenieJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreatePagerduty request with any body
	PostIntegrationCreatePagerdutyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreatePagerduty(ctx context.Context, body PostIntegrationCreatePagerdutyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreatePushbullet request with any body
	PostIntegrationCreatePushbulletWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreatePushbullet(ctx context.Context, body PostIntegrationCreatePushbulletJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreatePushover request with any body
	PostIntegrationCreatePushoverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreatePushover(ctx context.Context, body PostIntegrationCreatePushoverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateSignifai request with any body
	PostIntegrationCreateSignifaiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateSignifai(ctx context.Context, body PostIntegrationCreateSignifaiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateSlack request with any body
	PostIntegrationCreateSlackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateSlack(ctx context.Context, body PostIntegrationCreateSlackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateStatus request with any body
	PostIntegrationCreateStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateStatus(ctx context.Context, body PostIntegrationCreateStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateStatuspage request with any body
	PostIntegrationCreateStatuspageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateStatuspage(ctx context.Context, body PostIntegrationCreateStatuspageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateTwitter request with any body
	PostIntegrationCreateTwitterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateTwitter(ctx context.Context, body PostIntegrationCreateTwitterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateVictorops request with any body
	PostIntegrationCreateVictoropsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateVictorops(ctx context.Context, body PostIntegrationCreateVictoropsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateWavefront request with any body
	PostIntegrationCreateWavefrontWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateWavefront(ctx context.Context, body PostIntegrationCreateWavefrontJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateWebhook request with any body
	PostIntegrationCreateWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateWebhook(ctx context.Context, body PostIntegrationCreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateZapier request with any body
	PostIntegrationCreateZapierWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateZapier(ctx context.Context, body PostIntegrationCreateZapierJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIntegrationDetail request
	DeleteIntegrationDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIntegrationDetail request
	GetIntegrationDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchIntegrationDetail request with any body
	PatchIntegrationDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchIntegrationDetail(ctx context.Context, pk string, body PatchIntegrationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIntegrationDetail request with any body
	PutIntegrationDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIntegrationDetail(ctx context.Context, pk string, body PutIntegrationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOutagelist request
	GetOutagelist(ctx context.Context, params *GetOutagelistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOutageDetail request
	GetOutageDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMonitoringServerList request
	GetMonitoringServerList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPushnotificationlist request
	GetPushnotificationlist(ctx context.Context, params *GetPushnotificationlistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPushnotificationlist request with any body
	PostPushnotificationlistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPushnotificationlist(ctx context.Context, body PostPushnotificationlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePushNotificationDetail request
	DeletePushNotificationDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPushNotificationDetail request
	GetPushNotificationDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchPushNotificationDetail request with any body
	PatchPushNotificationDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchPushNotificationDetail(ctx context.Context, pk string, body PatchPushNotificationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPushNotificationDetail request with any body
	PutPushNotificationDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPushNotificationDetail(ctx context.Context, pk string, body PutPushNotificationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScheduledreportlist request
	GetScheduledreportlist(ctx context.Context, params *GetScheduledreportlistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostScheduledreportlist request with any body
	PostScheduledreportlistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostScheduledreportlist(ctx context.Context, body PostScheduledreportlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteScheduledReportDetail request
	DeleteScheduledReportDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScheduledReportDetail request
	GetScheduledReportDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchScheduledReportDetail request with any body
	PatchScheduledReportDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchScheduledReportDetail(ctx context.Context, pk string, body PatchScheduledReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutScheduledReportDetail request with any body
	PutScheduledReportDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutScheduledReportDetail(ctx context.Context, pk string, body PutScheduledReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSlareportlist request
	GetSlareportlist(ctx context.Context, params *GetSlareportlistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSlareportlist request with any body
	PostSlareportlistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSlareportlist(ctx context.Context, body PostSlareportlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSlaReportDetail request
	DeleteSlaReportDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSlaReportDetail request
	GetSlaReportDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSlaReportDetail request with any body
	PatchSlaReportDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSlaReportDetail(ctx context.Context, pk string, body PatchSlaReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSlaReportDetail request with any body
	PutSlaReportDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSlaReportDetail(ctx context.Context, pk string, body PutSlaReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSlaReportStats request
	GetSlaReportStats(ctx context.Context, pk string, params *GetSlaReportStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatuspagelist request
	GetStatuspagelist(ctx context.Context, params *GetStatuspagelistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostStatuspagelist request with any body
	PostStatuspagelistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostStatuspagelist(ctx context.Context, body PostStatuspagelistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStatuspageDetail request
	DeleteStatuspageDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatuspageDetail request
	GetStatuspageDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchStatuspageDetail request with any body
	PatchStatuspageDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchStatuspageDetail(ctx context.Context, pk string, body PatchStatuspageDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutStatuspageDetail request with any body
	PutStatuspageDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutStatuspageDetail(ctx context.Context, pk string, body PutStatuspageDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatuspageCurrentStatus request
	GetStatuspageCurrentStatus(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatuspageHistory request
	GetStatuspageHistory(ctx context.Context, pk string, params *GetStatuspageHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComponentslist request
	GetComponentslist(ctx context.Context, statuspageId string, params *GetComponentslistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostComponentslist request with any body
	PostComponentslistWithBody(ctx context.Context, statuspageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostComponentslist(ctx context.Context, statuspageId string, body PostComponentslistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteComponentDetail request
	DeleteComponentDetail(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComponentDetail request
	GetComponentDetail(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchComponentDetail request with any body
	PatchComponentDetailWithBody(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchComponentDetail(ctx context.Context, statuspageId string, pk string, body PatchComponentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutComponentDetail request with any body
	PutComponentDetailWithBody(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutComponentDetail(ctx context.Context, statuspageId string, pk string, body PutComponentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentlist request
	GetIncidentlist(ctx context.Context, statuspageId string, params *GetIncidentlistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIncidentlist request with any body
	PostIncidentlistWithBody(ctx context.Context, statuspageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIncidentlist(ctx context.Context, statuspageId string, body PostIncidentlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentDetail request
	DeleteIncidentDetail(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentDetail request
	GetIncidentDetail(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchIncidentDetail request with any body
	PatchIncidentDetailWithBody(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchIncidentDetail(ctx context.Context, statuspageId string, pk string, body PatchIncidentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIncidentDetail request with any body
	PutIncidentDetailWithBody(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIncidentDetail(ctx context.Context, statuspageId string, pk string, body PutIncidentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMetricslist request
	GetMetricslist(ctx context.Context, statuspageId string, params *GetMetricslistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMetricslist request with any body
	PostMetricslistWithBody(ctx context.Context, statuspageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMetricslist(ctx context.Context, statuspageId string, body PostMetricslistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMetricDetail request
	DeleteMetricDetail(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMetricDetail request
	GetMetricDetail(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchMetricDetail request with any body
	PatchMetricDetailWithBody(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchMetricDetail(ctx context.Context, statuspageId string, pk string, body PatchMetricDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutMetricDetail request with any body
	PutMetricDetailWithBody(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutMetricDetail(ctx context.Context, statuspageId string, pk string, body PutMetricDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserlist request
	GetUserlist(ctx context.Context, params *GetUserlistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserlist request with any body
	PostUserlistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserlist(ctx context.Context, body PostUserlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserDetail request
	DeleteUserDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserDetail request
	GetUserDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchUserDetail request with any body
	PatchUserDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchUserDetail(ctx context.Context, pk string, body PatchUserDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUserDetail request with any body
	PutUserDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUserDetail(ctx context.Context, pk string, body PutUserDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserDeactivate request
	PostUserDeactivate(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserReactivate request
	PostUserReactivate(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAlertlist(ctx context.Context, params *GetAlertlistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertlistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertAlertRootCause(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertAlertRootCauseRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAlertIgnore(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAlertIgnoreRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthAccountUsage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthAccountUsageRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthLogin(ctx context.Context, body PostAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthResetPassword(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthResetPasswordRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthResetPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthResetPasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthResetPassword(ctx context.Context, body PostAuthResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthResetPasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendMagicLinkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendMagicLinkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendMagicLink(ctx context.Context, body PostSendMagicLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendMagicLinkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthSubaccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthSubaccountsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthSubaccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthSubaccountsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthSubaccounts(ctx context.Context, body PostAuthSubaccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthSubaccountsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthSubaccount(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthSubaccountRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAuthSubaccountWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAuthSubaccountRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAuthSubaccount(ctx context.Context, pk string, body PatchAuthSubaccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAuthSubaccountRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthSubaccountPacksWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthSubaccountPacksRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthSubaccountPacks(ctx context.Context, pk string, body PostAuthSubaccountPacksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthSubaccountPacksRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostValidateMagicLink(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostValidateMagicLinkRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServicetaglist(ctx context.Context, params *GetServicetaglistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServicetaglistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServicetaglistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServicetaglistRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServicetaglist(ctx context.Context, body PostServicetaglistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServicetaglistRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteServiceTagDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServiceTagDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceTagDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceTagDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceTagDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceTagDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceTagDetail(ctx context.Context, pk string, body PatchServiceTagDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceTagDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutServiceTagDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutServiceTagDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutServiceTagDetail(ctx context.Context, pk string, body PutServiceTagDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutServiceTagDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServicelist(ctx context.Context, params *GetServicelistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServicelistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateApiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateApiRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateApi(ctx context.Context, body PostServiceCreateApiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateApiRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateBlacklistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateBlacklistRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateBlacklist(ctx context.Context, body PostServiceCreateBlacklistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateBlacklistRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateDnsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateDnsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateDns(ctx context.Context, body PostServiceCreateDnsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateDnsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateGroup(ctx context.Context, body PostServiceCreateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateHeartbeatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateHeartbeatRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateHeartbeat(ctx context.Context, body PostServiceCreateHeartbeatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateHeartbeatRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateHttpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateHttpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateHttp(ctx context.Context, body PostServiceCreateHttpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateHttpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateIcmpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateIcmpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateIcmp(ctx context.Context, body PostServiceCreateIcmpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateIcmpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateImapWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateImapRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateImap(ctx context.Context, body PostServiceCreateImapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateImapRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateMalwareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateMalwareRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateMalware(ctx context.Context, body PostServiceCreateMalwareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateMalwareRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateNtpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateNtpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateNtp(ctx context.Context, body PostServiceCreateNtpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateNtpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreatePopWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreatePopRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreatePop(ctx context.Context, body PostServiceCreatePopJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreatePopRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateRumWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateRumRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateRum(ctx context.Context, body PostServiceCreateRumJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateRumRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateRum2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateRum2RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateRum2(ctx context.Context, body PostServiceCreateRum2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateRum2Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateSmtpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateSmtpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateSmtp(ctx context.Context, body PostServiceCreateSmtpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateSmtpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateSshWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateSshRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateSsh(ctx context.Context, body PostServiceCreateSshJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateSshRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateSslCertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateSslCertRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateSslCert(ctx context.Context, body PostServiceCreateSslCertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateSslCertRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateTcpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateTcpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateTcp(ctx context.Context, body PostServiceCreateTcpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateTcpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateTransactionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateTransactionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateTransaction(ctx context.Context, body PostServiceCreateTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateTransactionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateUdpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateUdpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateUdp(ctx context.Context, body PostServiceCreateUdpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateUdpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateWebhookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateWebhook(ctx context.Context, body PostServiceCreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateWebhookRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateWhoisWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateWhoisRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateWhois(ctx context.Context, body PostServiceCreateWhoisJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateWhoisRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceBulkEscalationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceBulkEscalationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceBulkEscalations(ctx context.Context, body PatchServiceBulkEscalationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceBulkEscalationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceBulkMaintenanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceBulkMaintenanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceBulkMaintenance(ctx context.Context, body PatchServiceBulkMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceBulkMaintenanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceBulkPauseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceBulkPauseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceBulkPause(ctx context.Context, body PatchServiceBulkPauseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceBulkPauseRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceBulkResumeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceBulkResumeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceBulkResume(ctx context.Context, body PatchServiceBulkResumeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceBulkResumeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceBulkStats(ctx context.Context, params *GetServiceBulkStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceBulkStatsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceBulkUpdate(ctx context.Context, body PatchServiceBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceShowServiceDefs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceShowServiceDefsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceShowLocations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceShowLocationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteServiceDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServiceDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceDetail(ctx context.Context, pk string, body PatchServiceDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutServiceDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutServiceDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutServiceDetail(ctx context.Context, pk string, body PutServiceDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutServiceDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceAddContactGroupsWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceAddContactGroupsRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceAddContactGroups(ctx context.Context, pk string, body PatchServiceAddContactGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceAddContactGroupsRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceAddLocationsWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceAddLocationsRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceAddLocations(ctx context.Context, pk string, body PatchServiceAddLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceAddLocationsRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceAddTagsWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceAddTagsRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceAddTags(ctx context.Context, pk string, body PatchServiceAddTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceAddTagsRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceAnalysis(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceAnalysisRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceCurrentStatus(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceCurrentStatusRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceSetEscalationsWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceSetEscalationsRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceSetEscalations(ctx context.Context, pk string, body PatchServiceSetEscalationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceSetEscalationsRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceSetMaintenanceWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceSetMaintenanceRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceSetMaintenance(ctx context.Context, pk string, body PatchServiceSetMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceSetMaintenanceRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServicePause(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServicePauseRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceReplaceContactGroupsWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceReplaceContactGroupsRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceReplaceContactGroups(ctx context.Context, pk string, body PatchServiceReplaceContactGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceReplaceContactGroupsRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceReplaceLocationsWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceReplaceLocationsRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceReplaceLocations(ctx context.Context, pk string, body PatchServiceReplaceLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceReplaceLocationsRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceReplaceTagsWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceReplaceTagsRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceReplaceTags(ctx context.Context, pk string, body PatchServiceReplaceTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceReplaceTagsRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceResponseTimeDatapoints(ctx context.Context, pk string, params *GetServiceResponseTimeDatapointsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceResponseTimeDatapointsRequest(c.Server, pk, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceResume(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceResumeRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceStats(ctx context.Context, pk string, params *GetServiceStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceStatsRequest(c.Server, pk, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactgrouplist(ctx context.Context, params *GetContactgrouplistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactgrouplistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContactgrouplistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContactgrouplistRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContactgrouplist(ctx context.Context, body PostContactgrouplistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContactgrouplistRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteContactGroupDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteContactGroupDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactGroupDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactGroupDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchContactGroupDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchContactGroupDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchContactGroupDetail(ctx context.Context, pk string, body PatchContactGroupDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchContactGroupDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutContactGroupDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutContactGroupDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutContactGroupDetail(ctx context.Context, pk string, body PutContactGroupDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutContactGroupDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchContactGroupSetOnCallHoursWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchContactGroupSetOnCallHoursRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchContactGroupSetOnCallHours(ctx context.Context, pk string, body PatchContactGroupSetOnCallHoursJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchContactGroupSetOnCallHoursRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboardlist(ctx context.Context, params *GetDashboardlistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardlistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDashboardlistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDashboardlistRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDashboardlist(ctx context.Context, body PostDashboardlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDashboardlistRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboardDefault(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardDefaultRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDashboardDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDashboardDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboardDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchDashboardDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchDashboardDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchDashboardDetail(ctx context.Context, pk string, body PatchDashboardDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchDashboardDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDashboardDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDashboardDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDashboardDetail(ctx context.Context, pk string, body PutDashboardDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDashboardDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboardStats(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardStatsRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIntegrationlist(ctx context.Context, params *GetIntegrationlistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIntegrationlistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateCachetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateCachetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateCachet(ctx context.Context, body PostIntegrationCreateCachetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateCachetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateDatadogWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateDatadogRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateDatadog(ctx context.Context, body PostIntegrationCreateDatadogJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateDatadogRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateGeckoboardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateGeckoboardRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateGeckoboard(ctx context.Context, body PostIntegrationCreateGeckoboardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateGeckoboardRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateJiraservicedeskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateJiraservicedeskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateJiraservicedesk(ctx context.Context, body PostIntegrationCreateJiraservicedeskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateJiraservicedeskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateKlipfolioWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateKlipfolioRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateKlipfolio(ctx context.Context, body PostIntegrationCreateKlipfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateKlipfolioRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateLibratoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateLibratoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateLibrato(ctx context.Context, body PostIntegrationCreateLibratoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateLibratoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateMicrosoftTeamsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateMicrosoftTeamsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateMicrosoftTeams(ctx context.Context, body PostIntegrationCreateMicrosoftTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateMicrosoftTeamsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateOpsgenieWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateOpsgenieRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateOpsgenie(ctx context.Context, body PostIntegrationCreateOpsgenieJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateOpsgenieRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreatePagerdutyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreatePagerdutyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreatePagerduty(ctx context.Context, body PostIntegrationCreatePagerdutyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreatePagerdutyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreatePushbulletWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreatePushbulletRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreatePushbullet(ctx context.Context, body PostIntegrationCreatePushbulletJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreatePushbulletRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreatePushoverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreatePushoverRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreatePushover(ctx context.Context, body PostIntegrationCreatePushoverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreatePushoverRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateSignifaiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateSignifaiRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateSignifai(ctx context.Context, body PostIntegrationCreateSignifaiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateSignifaiRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateSlackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateSlackRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateSlack(ctx context.Context, body PostIntegrationCreateSlackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateSlackRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateStatusRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateStatus(ctx context.Context, body PostIntegrationCreateStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateStatusRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateStatuspageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateStatuspageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateStatuspage(ctx context.Context, body PostIntegrationCreateStatuspageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateStatuspageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateTwitterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateTwitterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateTwitter(ctx context.Context, body PostIntegrationCreateTwitterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateTwitterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateVictoropsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateVictoropsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateVictorops(ctx context.Context, body PostIntegrationCreateVictoropsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateVictoropsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateWavefrontWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateWavefrontRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateWavefront(ctx context.Context, body PostIntegrationCreateWavefrontJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateWavefrontRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateWebhookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateWebhook(ctx context.Context, body PostIntegrationCreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateWebhookRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateZapierWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateZapierRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateZapier(ctx context.Context, body PostIntegrationCreateZapierJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateZapierRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIntegrationDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIntegrationDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIntegrationDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIntegrationDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchIntegrationDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchIntegrationDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchIntegrationDetail(ctx context.Context, pk string, body PatchIntegrationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchIntegrationDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIntegrationDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIntegrationDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIntegrationDetail(ctx context.Context, pk string, body PutIntegrationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIntegrationDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOutagelist(ctx context.Context, params *GetOutagelistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOutagelistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOutageDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOutageDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMonitoringServerList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMonitoringServerListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPushnotificationlist(ctx context.Context, params *GetPushnotificationlistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPushnotificationlistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPushnotificationlistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPushnotificationlistRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPushnotificationlist(ctx context.Context, body PostPushnotificationlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPushnotificationlistRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePushNotificationDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePushNotificationDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPushNotificationDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPushNotificationDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPushNotificationDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPushNotificationDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPushNotificationDetail(ctx context.Context, pk string, body PatchPushNotificationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPushNotificationDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPushNotificationDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPushNotificationDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPushNotificationDetail(ctx context.Context, pk string, body PutPushNotificationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPushNotificationDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScheduledreportlist(ctx context.Context, params *GetScheduledreportlistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScheduledreportlistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScheduledreportlistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScheduledreportlistRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScheduledreportlist(ctx context.Context, body PostScheduledreportlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScheduledreportlistRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteScheduledReportDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteScheduledReportDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScheduledReportDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScheduledReportDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScheduledReportDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScheduledReportDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScheduledReportDetail(ctx context.Context, pk string, body PatchScheduledReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScheduledReportDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutScheduledReportDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutScheduledReportDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutScheduledReportDetail(ctx context.Context, pk string, body PutScheduledReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutScheduledReportDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSlareportlist(ctx context.Context, params *GetSlareportlistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSlareportlistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSlareportlistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSlareportlistRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSlareportlist(ctx context.Context, body PostSlareportlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSlareportlistRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSlaReportDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSlaReportDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSlaReportDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSlaReportDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSlaReportDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSlaReportDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSlaReportDetail(ctx context.Context, pk string, body PatchSlaReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSlaReportDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSlaReportDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSlaReportDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSlaReportDetail(ctx context.Context, pk string, body PutSlaReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSlaReportDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSlaReportStats(ctx context.Context, pk string, params *GetSlaReportStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSlaReportStatsRequest(c.Server, pk, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatuspagelist(ctx context.Context, params *GetStatuspagelistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatuspagelistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStatuspagelistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStatuspagelistRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStatuspagelist(ctx context.Context, body PostStatuspagelistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStatuspagelistRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStatuspageDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStatuspageDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatuspageDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatuspageDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchStatuspageDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchStatuspageDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchStatuspageDetail(ctx context.Context, pk string, body PatchStatuspageDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchStatuspageDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutStatuspageDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutStatuspageDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutStatuspageDetail(ctx context.Context, pk string, body PutStatuspageDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutStatuspageDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatuspageCurrentStatus(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatuspageCurrentStatusRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatuspageHistory(ctx context.Context, pk string, params *GetStatuspageHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatuspageHistoryRequest(c.Server, pk, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComponentslist(ctx context.Context, statuspageId string, params *GetComponentslistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComponentslistRequest(c.Server, statuspageId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostComponentslistWithBody(ctx context.Context, statuspageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostComponentslistRequestWithBody(c.Server, statuspageId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostComponentslist(ctx context.Context, statuspageId string, body PostComponentslistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostComponentslistRequest(c.Server, statuspageId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteComponentDetail(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteComponentDetailRequest(c.Server, statuspageId, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComponentDetail(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComponentDetailRequest(c.Server, statuspageId, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchComponentDetailWithBody(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchComponentDetailRequestWithBody(c.Server, statuspageId, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchComponentDetail(ctx context.Context, statuspageId string, pk string, body PatchComponentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchComponentDetailRequest(c.Server, statuspageId, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutComponentDetailWithBody(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutComponentDetailRequestWithBody(c.Server, statuspageId, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutComponentDetail(ctx context.Context, statuspageId string, pk string, body PutComponentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutComponentDetailRequest(c.Server, statuspageId, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentlist(ctx context.Context, statuspageId string, params *GetIncidentlistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentlistRequest(c.Server, statuspageId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIncidentlistWithBody(ctx context.Context, statuspageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIncidentlistRequestWithBody(c.Server, statuspageId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIncidentlist(ctx context.Context, statuspageId string, body PostIncidentlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIncidentlistRequest(c.Server, statuspageId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentDetail(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentDetailRequest(c.Server, statuspageId, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentDetail(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentDetailRequest(c.Server, statuspageId, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchIncidentDetailWithBody(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchIncidentDetailRequestWithBody(c.Server, statuspageId, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchIncidentDetail(ctx context.Context, statuspageId string, pk string, body PatchIncidentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchIncidentDetailRequest(c.Server, statuspageId, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIncidentDetailWithBody(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIncidentDetailRequestWithBody(c.Server, statuspageId, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIncidentDetail(ctx context.Context, statuspageId string, pk string, body PutIncidentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIncidentDetailRequest(c.Server, statuspageId, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMetricslist(ctx context.Context, statuspageId string, params *GetMetricslistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMetricslistRequest(c.Server, statuspageId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMetricslistWithBody(ctx context.Context, statuspageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMetricslistRequestWithBody(c.Server, statuspageId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMetricslist(ctx context.Context, statuspageId string, body PostMetricslistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMetricslistRequest(c.Server, statuspageId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMetricDetail(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMetricDetailRequest(c.Server, statuspageId, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMetricDetail(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMetricDetailRequest(c.Server, statuspageId, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchMetricDetailWithBody(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchMetricDetailRequestWithBody(c.Server, statuspageId, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchMetricDetail(ctx context.Context, statuspageId string, pk string, body PatchMetricDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchMetricDetailRequest(c.Server, statuspageId, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMetricDetailWithBody(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMetricDetailRequestWithBody(c.Server, statuspageId, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMetricDetail(ctx context.Context, statuspageId string, pk string, body PutMetricDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMetricDetailRequest(c.Server, statuspageId, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserlist(ctx context.Context, params *GetUserlistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserlistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserlistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserlistRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserlist(ctx context.Context, body PostUserlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserlistRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUserDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUserDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUserDetail(ctx context.Context, pk string, body PatchUserDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUserDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUserDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUserDetail(ctx context.Context, pk string, body PutUserDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserDeactivate(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserDeactivateRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserReactivate(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserReactivateRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAlertlistRequest generates requests for GetAlertlist
func NewGetAlertlistRequest(server string, params *GetAlertlistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/alerts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StateIsUp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state_is_up", runtime.ParamLocationQuery, *params.StateIsUp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CheckPk != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "check_pk", runtime.ParamLocationQuery, *params.CheckPk); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CheckMonitoringServiceType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "check_monitoring_service_type", runtime.ParamLocationQuery, *params.CheckMonitoringServiceType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CheckTag != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "check_tag", runtime.ParamLocationQuery, *params.CheckTag); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlertAlertRootCauseRequest generates requests for GetAlertAlertRootCause
func NewGetAlertAlertRootCauseRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/alerts/alert/%s/root-cause/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlertDetailRequest generates requests for GetAlertDetail
func NewGetAlertDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/alerts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAlertIgnoreRequest generates requests for PostAlertIgnore
func NewPostAlertIgnoreRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/alerts/%s/ignore/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthListRequest generates requests for GetAuthList
func NewGetAuthListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthAccountUsageRequest generates requests for GetAuthAccountUsage
func NewGetAuthAccountUsageRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/account-usage/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAuthLoginRequest calls the generic PostAuthLogin builder with application/json body
func NewPostAuthLoginRequest(server string, body PostAuthLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthLoginRequestWithBody generates requests for PostAuthLogin with any type of body
func NewPostAuthLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/login/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAuthMeRequest generates requests for GetAuthMe
func NewGetAuthMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/me/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthResetPasswordRequest generates requests for GetAuthResetPassword
func NewGetAuthResetPasswordRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/reset-password/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAuthResetPasswordRequest calls the generic PostAuthResetPassword builder with application/json body
func NewPostAuthResetPasswordRequest(server string, body PostAuthResetPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthResetPasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthResetPasswordRequestWithBody generates requests for PostAuthResetPassword with any type of body
func NewPostAuthResetPasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/reset-password/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSendMagicLinkRequest calls the generic PostSendMagicLink builder with application/json body
func NewPostSendMagicLinkRequest(server string, body PostSendMagicLinkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSendMagicLinkRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSendMagicLinkRequestWithBody generates requests for PostSendMagicLink with any type of body
func NewPostSendMagicLinkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/send-magic-link/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAuthSubaccountsRequest generates requests for GetAuthSubaccounts
func NewGetAuthSubaccountsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/subaccounts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAuthSubaccountsRequest calls the generic PostAuthSubaccounts builder with application/json body
func NewPostAuthSubaccountsRequest(server string, body PostAuthSubaccountsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthSubaccountsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthSubaccountsRequestWithBody generates requests for PostAuthSubaccounts with any type of body
func NewPostAuthSubaccountsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/subaccounts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAuthSubaccountRequest generates requests for GetAuthSubaccount
func NewGetAuthSubaccountRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/subaccounts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchAuthSubaccountRequest calls the generic PatchAuthSubaccount builder with application/json body
func NewPatchAuthSubaccountRequest(server string, pk string, body PatchAuthSubaccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchAuthSubaccountRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchAuthSubaccountRequestWithBody generates requests for PatchAuthSubaccount with any type of body
func NewPatchAuthSubaccountRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/subaccounts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAuthSubaccountPacksRequest calls the generic PostAuthSubaccountPacks builder with application/json body
func NewPostAuthSubaccountPacksRequest(server string, pk string, body PostAuthSubaccountPacksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthSubaccountPacksRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPostAuthSubaccountPacksRequestWithBody generates requests for PostAuthSubaccountPacks with any type of body
func NewPostAuthSubaccountPacksRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/subaccounts/%s/allocation/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostValidateMagicLinkRequest generates requests for PostValidateMagicLink
func NewPostValidateMagicLinkRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/validate-magic-link/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServicetaglistRequest generates requests for GetServicetaglist
func NewGetServicetaglistRequest(server string, params *GetServicetaglistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/check-tags/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostServicetaglistRequest calls the generic PostServicetaglist builder with application/json body
func NewPostServicetaglistRequest(server string, body PostServicetaglistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServicetaglistRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServicetaglistRequestWithBody generates requests for PostServicetaglist with any type of body
func NewPostServicetaglistRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/check-tags/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteServiceTagDetailRequest generates requests for DeleteServiceTagDetail
func NewDeleteServiceTagDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/check-tags/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceTagDetailRequest generates requests for GetServiceTagDetail
func NewGetServiceTagDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/check-tags/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchServiceTagDetailRequest calls the generic PatchServiceTagDetail builder with application/json body
func NewPatchServiceTagDetailRequest(server string, pk string, body PatchServiceTagDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceTagDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchServiceTagDetailRequestWithBody generates requests for PatchServiceTagDetail with any type of body
func NewPatchServiceTagDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/check-tags/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutServiceTagDetailRequest calls the generic PutServiceTagDetail builder with application/json body
func NewPutServiceTagDetailRequest(server string, pk string, body PutServiceTagDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutServiceTagDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPutServiceTagDetailRequestWithBody generates requests for PutServiceTagDetail with any type of body
func NewPutServiceTagDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/check-tags/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetServicelistRequest generates requests for GetServicelist
func NewGetServicelistRequest(server string, params *GetServicelistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MonitoringServiceType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "monitoring_service_type", runtime.ParamLocationQuery, *params.MonitoringServiceType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsPaused != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_paused", runtime.ParamLocationQuery, *params.IsPaused); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsUnderMaintenance != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_under_maintenance", runtime.ParamLocationQuery, *params.IsUnderMaintenance); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StateIsUp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state_is_up", runtime.ParamLocationQuery, *params.StateIsUp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HasMaintenanceSchedule != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "has_maintenance_schedule", runtime.ParamLocationQuery, *params.HasMaintenanceSchedule); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tag != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostServiceCreateApiRequest calls the generic PostServiceCreateApi builder with application/json body
func NewPostServiceCreateApiRequest(server string, body PostServiceCreateApiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateApiRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateApiRequestWithBody generates requests for PostServiceCreateApi with any type of body
func NewPostServiceCreateApiRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-api/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateBlacklistRequest calls the generic PostServiceCreateBlacklist builder with application/json body
func NewPostServiceCreateBlacklistRequest(server string, body PostServiceCreateBlacklistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateBlacklistRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateBlacklistRequestWithBody generates requests for PostServiceCreateBlacklist with any type of body
func NewPostServiceCreateBlacklistRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-blacklist/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateDnsRequest calls the generic PostServiceCreateDns builder with application/json body
func NewPostServiceCreateDnsRequest(server string, body PostServiceCreateDnsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateDnsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateDnsRequestWithBody generates requests for PostServiceCreateDns with any type of body
func NewPostServiceCreateDnsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-dns/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateGroupRequest calls the generic PostServiceCreateGroup builder with application/json body
func NewPostServiceCreateGroupRequest(server string, body PostServiceCreateGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateGroupRequestWithBody generates requests for PostServiceCreateGroup with any type of body
func NewPostServiceCreateGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-group/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateHeartbeatRequest calls the generic PostServiceCreateHeartbeat builder with application/json body
func NewPostServiceCreateHeartbeatRequest(server string, body PostServiceCreateHeartbeatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateHeartbeatRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateHeartbeatRequestWithBody generates requests for PostServiceCreateHeartbeat with any type of body
func NewPostServiceCreateHeartbeatRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-heartbeat/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateHttpRequest calls the generic PostServiceCreateHttp builder with application/json body
func NewPostServiceCreateHttpRequest(server string, body PostServiceCreateHttpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateHttpRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateHttpRequestWithBody generates requests for PostServiceCreateHttp with any type of body
func NewPostServiceCreateHttpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-http/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateIcmpRequest calls the generic PostServiceCreateIcmp builder with application/json body
func NewPostServiceCreateIcmpRequest(server string, body PostServiceCreateIcmpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateIcmpRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateIcmpRequestWithBody generates requests for PostServiceCreateIcmp with any type of body
func NewPostServiceCreateIcmpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-icmp/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateImapRequest calls the generic PostServiceCreateImap builder with application/json body
func NewPostServiceCreateImapRequest(server string, body PostServiceCreateImapJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateImapRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateImapRequestWithBody generates requests for PostServiceCreateImap with any type of body
func NewPostServiceCreateImapRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-imap/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateMalwareRequest calls the generic PostServiceCreateMalware builder with application/json body
func NewPostServiceCreateMalwareRequest(server string, body PostServiceCreateMalwareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateMalwareRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateMalwareRequestWithBody generates requests for PostServiceCreateMalware with any type of body
func NewPostServiceCreateMalwareRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-malware/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateNtpRequest calls the generic PostServiceCreateNtp builder with application/json body
func NewPostServiceCreateNtpRequest(server string, body PostServiceCreateNtpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateNtpRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateNtpRequestWithBody generates requests for PostServiceCreateNtp with any type of body
func NewPostServiceCreateNtpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-ntp/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreatePopRequest calls the generic PostServiceCreatePop builder with application/json body
func NewPostServiceCreatePopRequest(server string, body PostServiceCreatePopJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreatePopRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreatePopRequestWithBody generates requests for PostServiceCreatePop with any type of body
func NewPostServiceCreatePopRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-pop/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateRumRequest calls the generic PostServiceCreateRum builder with application/json body
func NewPostServiceCreateRumRequest(server string, body PostServiceCreateRumJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateRumRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateRumRequestWithBody generates requests for PostServiceCreateRum with any type of body
func NewPostServiceCreateRumRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-rum/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateRum2Request calls the generic PostServiceCreateRum2 builder with application/json body
func NewPostServiceCreateRum2Request(server string, body PostServiceCreateRum2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateRum2RequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateRum2RequestWithBody generates requests for PostServiceCreateRum2 with any type of body
func NewPostServiceCreateRum2RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-rum2/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateSmtpRequest calls the generic PostServiceCreateSmtp builder with application/json body
func NewPostServiceCreateSmtpRequest(server string, body PostServiceCreateSmtpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateSmtpRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateSmtpRequestWithBody generates requests for PostServiceCreateSmtp with any type of body
func NewPostServiceCreateSmtpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-smtp/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateSshRequest calls the generic PostServiceCreateSsh builder with application/json body
func NewPostServiceCreateSshRequest(server string, body PostServiceCreateSshJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateSshRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateSshRequestWithBody generates requests for PostServiceCreateSsh with any type of body
func NewPostServiceCreateSshRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-ssh/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateSslCertRequest calls the generic PostServiceCreateSslCert builder with application/json body
func NewPostServiceCreateSslCertRequest(server string, body PostServiceCreateSslCertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateSslCertRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateSslCertRequestWithBody generates requests for PostServiceCreateSslCert with any type of body
func NewPostServiceCreateSslCertRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-ssl-cert/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateTcpRequest calls the generic PostServiceCreateTcp builder with application/json body
func NewPostServiceCreateTcpRequest(server string, body PostServiceCreateTcpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateTcpRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateTcpRequestWithBody generates requests for PostServiceCreateTcp with any type of body
func NewPostServiceCreateTcpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-tcp/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateTransactionRequest calls the generic PostServiceCreateTransaction builder with application/json body
func NewPostServiceCreateTransactionRequest(server string, body PostServiceCreateTransactionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateTransactionRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateTransactionRequestWithBody generates requests for PostServiceCreateTransaction with any type of body
func NewPostServiceCreateTransactionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-transaction/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateUdpRequest calls the generic PostServiceCreateUdp builder with application/json body
func NewPostServiceCreateUdpRequest(server string, body PostServiceCreateUdpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateUdpRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateUdpRequestWithBody generates requests for PostServiceCreateUdp with any type of body
func NewPostServiceCreateUdpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-udp/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateWebhookRequest calls the generic PostServiceCreateWebhook builder with application/json body
func NewPostServiceCreateWebhookRequest(server string, body PostServiceCreateWebhookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateWebhookRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateWebhookRequestWithBody generates requests for PostServiceCreateWebhook with any type of body
func NewPostServiceCreateWebhookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-webhook/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateWhoisRequest calls the generic PostServiceCreateWhois builder with application/json body
func NewPostServiceCreateWhoisRequest(server string, body PostServiceCreateWhoisJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateWhoisRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateWhoisRequestWithBody generates requests for PostServiceCreateWhois with any type of body
func NewPostServiceCreateWhoisRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-whois/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchServiceBulkEscalationsRequest calls the generic PatchServiceBulkEscalations builder with application/json body
func NewPatchServiceBulkEscalationsRequest(server string, body PatchServiceBulkEscalationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceBulkEscalationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchServiceBulkEscalationsRequestWithBody generates requests for PatchServiceBulkEscalations with any type of body
func NewPatchServiceBulkEscalationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/bulk/escalations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchServiceBulkMaintenanceRequest calls the generic PatchServiceBulkMaintenance builder with application/json body
func NewPatchServiceBulkMaintenanceRequest(server string, body PatchServiceBulkMaintenanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceBulkMaintenanceRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchServiceBulkMaintenanceRequestWithBody generates requests for PatchServiceBulkMaintenance with any type of body
func NewPatchServiceBulkMaintenanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/bulk/maintenance/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchServiceBulkPauseRequest calls the generic PatchServiceBulkPause builder with application/json body
func NewPatchServiceBulkPauseRequest(server string, body PatchServiceBulkPauseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceBulkPauseRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchServiceBulkPauseRequestWithBody generates requests for PatchServiceBulkPause with any type of body
func NewPatchServiceBulkPauseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/bulk/pause/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchServiceBulkResumeRequest calls the generic PatchServiceBulkResume builder with application/json body
func NewPatchServiceBulkResumeRequest(server string, body PatchServiceBulkResumeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceBulkResumeRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchServiceBulkResumeRequestWithBody generates requests for PatchServiceBulkResume with any type of body
func NewPatchServiceBulkResumeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/bulk/resume/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetServiceBulkStatsRequest generates requests for GetServiceBulkStats
func NewGetServiceBulkStatsRequest(server string, params *GetServiceBulkStatsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/bulk/stats/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pk", runtime.ParamLocationQuery, params.Pk); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.StartDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeAlerts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_alerts", runtime.ParamLocationQuery, *params.IncludeAlerts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchServiceBulkUpdateRequest calls the generic PatchServiceBulkUpdate builder with application/json body
func NewPatchServiceBulkUpdateRequest(server string, body PatchServiceBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchServiceBulkUpdateRequestWithBody generates requests for PatchServiceBulkUpdate with any type of body
func NewPatchServiceBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/bulk/update/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetServiceShowServiceDefsRequest generates requests for GetServiceShowServiceDefs
func NewGetServiceShowServiceDefsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/check-definitions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceShowLocationsRequest generates requests for GetServiceShowLocations
func NewGetServiceShowLocationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/locations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteServiceDetailRequest generates requests for DeleteServiceDetail
func NewDeleteServiceDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceDetailRequest generates requests for GetServiceDetail
func NewGetServiceDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchServiceDetailRequest calls the generic PatchServiceDetail builder with application/json body
func NewPatchServiceDetailRequest(server string, pk string, body PatchServiceDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchServiceDetailRequestWithBody generates requests for PatchServiceDetail with any type of body
func NewPatchServiceDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutServiceDetailRequest calls the generic PutServiceDetail builder with application/json body
func NewPutServiceDetailRequest(server string, pk string, body PutServiceDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutServiceDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPutServiceDetailRequestWithBody generates requests for PutServiceDetail with any type of body
func NewPutServiceDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchServiceAddContactGroupsRequest calls the generic PatchServiceAddContactGroups builder with application/json body
func NewPatchServiceAddContactGroupsRequest(server string, pk string, body PatchServiceAddContactGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceAddContactGroupsRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchServiceAddContactGroupsRequestWithBody generates requests for PatchServiceAddContactGroups with any type of body
func NewPatchServiceAddContactGroupsRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/add-contact-groups/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchServiceAddLocationsRequest calls the generic PatchServiceAddLocations builder with application/json body
func NewPatchServiceAddLocationsRequest(server string, pk string, body PatchServiceAddLocationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceAddLocationsRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchServiceAddLocationsRequestWithBody generates requests for PatchServiceAddLocations with any type of body
func NewPatchServiceAddLocationsRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/add-locations/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchServiceAddTagsRequest calls the generic PatchServiceAddTags builder with application/json body
func NewPatchServiceAddTagsRequest(server string, pk string, body PatchServiceAddTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceAddTagsRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchServiceAddTagsRequestWithBody generates requests for PatchServiceAddTags with any type of body
func NewPatchServiceAddTagsRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/add-tags/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetServiceAnalysisRequest generates requests for GetServiceAnalysis
func NewGetServiceAnalysisRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/analysis/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceCurrentStatusRequest generates requests for GetServiceCurrentStatus
func NewGetServiceCurrentStatusRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/current-status/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchServiceSetEscalationsRequest calls the generic PatchServiceSetEscalations builder with application/json body
func NewPatchServiceSetEscalationsRequest(server string, pk string, body PatchServiceSetEscalationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceSetEscalationsRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchServiceSetEscalationsRequestWithBody generates requests for PatchServiceSetEscalations with any type of body
func NewPatchServiceSetEscalationsRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/escalations/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchServiceSetMaintenanceRequest calls the generic PatchServiceSetMaintenance builder with application/json body
func NewPatchServiceSetMaintenanceRequest(server string, pk string, body PatchServiceSetMaintenanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceSetMaintenanceRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchServiceSetMaintenanceRequestWithBody generates requests for PatchServiceSetMaintenance with any type of body
func NewPatchServiceSetMaintenanceRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/maintenance/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServicePauseRequest generates requests for PostServicePause
func NewPostServicePauseRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/pause/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchServiceReplaceContactGroupsRequest calls the generic PatchServiceReplaceContactGroups builder with application/json body
func NewPatchServiceReplaceContactGroupsRequest(server string, pk string, body PatchServiceReplaceContactGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceReplaceContactGroupsRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchServiceReplaceContactGroupsRequestWithBody generates requests for PatchServiceReplaceContactGroups with any type of body
func NewPatchServiceReplaceContactGroupsRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/replace-contact-groups/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchServiceReplaceLocationsRequest calls the generic PatchServiceReplaceLocations builder with application/json body
func NewPatchServiceReplaceLocationsRequest(server string, pk string, body PatchServiceReplaceLocationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceReplaceLocationsRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchServiceReplaceLocationsRequestWithBody generates requests for PatchServiceReplaceLocations with any type of body
func NewPatchServiceReplaceLocationsRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/replace-locations/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchServiceReplaceTagsRequest calls the generic PatchServiceReplaceTags builder with application/json body
func NewPatchServiceReplaceTagsRequest(server string, pk string, body PatchServiceReplaceTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceReplaceTagsRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchServiceReplaceTagsRequestWithBody generates requests for PatchServiceReplaceTags with any type of body
func NewPatchServiceReplaceTagsRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/replace-tags/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetServiceResponseTimeDatapointsRequest generates requests for GetServiceResponseTimeDatapoints
func NewGetServiceResponseTimeDatapointsRequest(server string, pk string, params *GetServiceResponseTimeDatapointsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/response-time/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.StartDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostServiceResumeRequest generates requests for PostServiceResume
func NewPostServiceResumeRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/resume/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceStatsRequest generates requests for GetServiceStats
func NewGetServiceStatsRequest(server string, pk string, params *GetServiceStatsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/stats/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.StartDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Location != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "location", runtime.ParamLocationQuery, *params.Location); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LocationsResponseTimes != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locations_response_times", runtime.ParamLocationQuery, *params.LocationsResponseTimes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeAlerts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_alerts", runtime.ParamLocationQuery, *params.IncludeAlerts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Download != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "download", runtime.ParamLocationQuery, *params.Download); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pdf != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pdf", runtime.ParamLocationQuery, *params.Pdf); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactgrouplistRequest generates requests for GetContactgrouplist
func NewGetContactgrouplistRequest(server string, params *GetContactgrouplistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/contacts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HasOnCallSchedule != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "has_on_call_schedule", runtime.ParamLocationQuery, *params.HasOnCallSchedule); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostContactgrouplistRequest calls the generic PostContactgrouplist builder with application/json body
func NewPostContactgrouplistRequest(server string, body PostContactgrouplistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostContactgrouplistRequestWithBody(server, "application/json", bodyReader)
}

// NewPostContactgrouplistRequestWithBody generates requests for PostContactgrouplist with any type of body
func NewPostContactgrouplistRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/contacts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteContactGroupDetailRequest generates requests for DeleteContactGroupDetail
func NewDeleteContactGroupDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/contacts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactGroupDetailRequest generates requests for GetContactGroupDetail
func NewGetContactGroupDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/contacts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchContactGroupDetailRequest calls the generic PatchContactGroupDetail builder with application/json body
func NewPatchContactGroupDetailRequest(server string, pk string, body PatchContactGroupDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchContactGroupDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchContactGroupDetailRequestWithBody generates requests for PatchContactGroupDetail with any type of body
func NewPatchContactGroupDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/contacts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutContactGroupDetailRequest calls the generic PutContactGroupDetail builder with application/json body
func NewPutContactGroupDetailRequest(server string, pk string, body PutContactGroupDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutContactGroupDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPutContactGroupDetailRequestWithBody generates requests for PutContactGroupDetail with any type of body
func NewPutContactGroupDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/contacts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchContactGroupSetOnCallHoursRequest calls the generic PatchContactGroupSetOnCallHours builder with application/json body
func NewPatchContactGroupSetOnCallHoursRequest(server string, pk string, body PatchContactGroupSetOnCallHoursJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchContactGroupSetOnCallHoursRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchContactGroupSetOnCallHoursRequestWithBody generates requests for PatchContactGroupSetOnCallHours with any type of body
func NewPatchContactGroupSetOnCallHoursRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/contacts/%s/oncall/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDashboardlistRequest generates requests for GetDashboardlist
func NewGetDashboardlistRequest(server string, params *GetDashboardlistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboards/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDashboardlistRequest calls the generic PostDashboardlist builder with application/json body
func NewPostDashboardlistRequest(server string, body PostDashboardlistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDashboardlistRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDashboardlistRequestWithBody generates requests for PostDashboardlist with any type of body
func NewPostDashboardlistRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboards/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDashboardDefaultRequest generates requests for GetDashboardDefault
func NewGetDashboardDefaultRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboards/default/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteDashboardDetailRequest generates requests for DeleteDashboardDetail
func NewDeleteDashboardDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboards/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDashboardDetailRequest generates requests for GetDashboardDetail
func NewGetDashboardDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboards/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchDashboardDetailRequest calls the generic PatchDashboardDetail builder with application/json body
func NewPatchDashboardDetailRequest(server string, pk string, body PatchDashboardDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchDashboardDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchDashboardDetailRequestWithBody generates requests for PatchDashboardDetail with any type of body
func NewPatchDashboardDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboards/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutDashboardDetailRequest calls the generic PutDashboardDetail builder with application/json body
func NewPutDashboardDetailRequest(server string, pk string, body PutDashboardDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutDashboardDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPutDashboardDetailRequestWithBody generates requests for PutDashboardDetail with any type of body
func NewPutDashboardDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboards/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDashboardStatsRequest generates requests for GetDashboardStats
func NewGetDashboardStatsRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboards/%s/stats/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIntegrationlistRequest generates requests for GetIntegrationlist
func NewGetIntegrationlistRequest(server string, params *GetIntegrationlistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Module != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "module", runtime.ParamLocationQuery, *params.Module); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsErrored != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_errored", runtime.ParamLocationQuery, *params.IsErrored); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIntegrationCreateCachetRequest calls the generic PostIntegrationCreateCachet builder with application/json body
func NewPostIntegrationCreateCachetRequest(server string, body PostIntegrationCreateCachetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateCachetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateCachetRequestWithBody generates requests for PostIntegrationCreateCachet with any type of body
func NewPostIntegrationCreateCachetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-cachet/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateDatadogRequest calls the generic PostIntegrationCreateDatadog builder with application/json body
func NewPostIntegrationCreateDatadogRequest(server string, body PostIntegrationCreateDatadogJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateDatadogRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateDatadogRequestWithBody generates requests for PostIntegrationCreateDatadog with any type of body
func NewPostIntegrationCreateDatadogRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-datadog/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateGeckoboardRequest calls the generic PostIntegrationCreateGeckoboard builder with application/json body
func NewPostIntegrationCreateGeckoboardRequest(server string, body PostIntegrationCreateGeckoboardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateGeckoboardRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateGeckoboardRequestWithBody generates requests for PostIntegrationCreateGeckoboard with any type of body
func NewPostIntegrationCreateGeckoboardRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-geckoboard/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateJiraservicedeskRequest calls the generic PostIntegrationCreateJiraservicedesk builder with application/json body
func NewPostIntegrationCreateJiraservicedeskRequest(server string, body PostIntegrationCreateJiraservicedeskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateJiraservicedeskRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateJiraservicedeskRequestWithBody generates requests for PostIntegrationCreateJiraservicedesk with any type of body
func NewPostIntegrationCreateJiraservicedeskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-jiraservicedesk/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateKlipfolioRequest calls the generic PostIntegrationCreateKlipfolio builder with application/json body
func NewPostIntegrationCreateKlipfolioRequest(server string, body PostIntegrationCreateKlipfolioJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateKlipfolioRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateKlipfolioRequestWithBody generates requests for PostIntegrationCreateKlipfolio with any type of body
func NewPostIntegrationCreateKlipfolioRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-klipfolio/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateLibratoRequest calls the generic PostIntegrationCreateLibrato builder with application/json body
func NewPostIntegrationCreateLibratoRequest(server string, body PostIntegrationCreateLibratoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateLibratoRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateLibratoRequestWithBody generates requests for PostIntegrationCreateLibrato with any type of body
func NewPostIntegrationCreateLibratoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-librato/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateMicrosoftTeamsRequest calls the generic PostIntegrationCreateMicrosoftTeams builder with application/json body
func NewPostIntegrationCreateMicrosoftTeamsRequest(server string, body PostIntegrationCreateMicrosoftTeamsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateMicrosoftTeamsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateMicrosoftTeamsRequestWithBody generates requests for PostIntegrationCreateMicrosoftTeams with any type of body
func NewPostIntegrationCreateMicrosoftTeamsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-microsoft-teams/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateOpsgenieRequest calls the generic PostIntegrationCreateOpsgenie builder with application/json body
func NewPostIntegrationCreateOpsgenieRequest(server string, body PostIntegrationCreateOpsgenieJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateOpsgenieRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateOpsgenieRequestWithBody generates requests for PostIntegrationCreateOpsgenie with any type of body
func NewPostIntegrationCreateOpsgenieRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-opsgenie/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreatePagerdutyRequest calls the generic PostIntegrationCreatePagerduty builder with application/json body
func NewPostIntegrationCreatePagerdutyRequest(server string, body PostIntegrationCreatePagerdutyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreatePagerdutyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreatePagerdutyRequestWithBody generates requests for PostIntegrationCreatePagerduty with any type of body
func NewPostIntegrationCreatePagerdutyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-pagerduty/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreatePushbulletRequest calls the generic PostIntegrationCreatePushbullet builder with application/json body
func NewPostIntegrationCreatePushbulletRequest(server string, body PostIntegrationCreatePushbulletJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreatePushbulletRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreatePushbulletRequestWithBody generates requests for PostIntegrationCreatePushbullet with any type of body
func NewPostIntegrationCreatePushbulletRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-pushbullet/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreatePushoverRequest calls the generic PostIntegrationCreatePushover builder with application/json body
func NewPostIntegrationCreatePushoverRequest(server string, body PostIntegrationCreatePushoverJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreatePushoverRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreatePushoverRequestWithBody generates requests for PostIntegrationCreatePushover with any type of body
func NewPostIntegrationCreatePushoverRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-pushover/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateSignifaiRequest calls the generic PostIntegrationCreateSignifai builder with application/json body
func NewPostIntegrationCreateSignifaiRequest(server string, body PostIntegrationCreateSignifaiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateSignifaiRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateSignifaiRequestWithBody generates requests for PostIntegrationCreateSignifai with any type of body
func NewPostIntegrationCreateSignifaiRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-signifai/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateSlackRequest calls the generic PostIntegrationCreateSlack builder with application/json body
func NewPostIntegrationCreateSlackRequest(server string, body PostIntegrationCreateSlackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateSlackRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateSlackRequestWithBody generates requests for PostIntegrationCreateSlack with any type of body
func NewPostIntegrationCreateSlackRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-slack/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateStatusRequest calls the generic PostIntegrationCreateStatus builder with application/json body
func NewPostIntegrationCreateStatusRequest(server string, body PostIntegrationCreateStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateStatusRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateStatusRequestWithBody generates requests for PostIntegrationCreateStatus with any type of body
func NewPostIntegrationCreateStatusRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-status/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateStatuspageRequest calls the generic PostIntegrationCreateStatuspage builder with application/json body
func NewPostIntegrationCreateStatuspageRequest(server string, body PostIntegrationCreateStatuspageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateStatuspageRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateStatuspageRequestWithBody generates requests for PostIntegrationCreateStatuspage with any type of body
func NewPostIntegrationCreateStatuspageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-statuspage/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateTwitterRequest calls the generic PostIntegrationCreateTwitter builder with application/json body
func NewPostIntegrationCreateTwitterRequest(server string, body PostIntegrationCreateTwitterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateTwitterRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateTwitterRequestWithBody generates requests for PostIntegrationCreateTwitter with any type of body
func NewPostIntegrationCreateTwitterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-twitter/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateVictoropsRequest calls the generic PostIntegrationCreateVictorops builder with application/json body
func NewPostIntegrationCreateVictoropsRequest(server string, body PostIntegrationCreateVictoropsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateVictoropsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateVictoropsRequestWithBody generates requests for PostIntegrationCreateVictorops with any type of body
func NewPostIntegrationCreateVictoropsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-victorops/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateWavefrontRequest calls the generic PostIntegrationCreateWavefront builder with application/json body
func NewPostIntegrationCreateWavefrontRequest(server string, body PostIntegrationCreateWavefrontJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateWavefrontRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateWavefrontRequestWithBody generates requests for PostIntegrationCreateWavefront with any type of body
func NewPostIntegrationCreateWavefrontRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-wavefront/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateWebhookRequest calls the generic PostIntegrationCreateWebhook builder with application/json body
func NewPostIntegrationCreateWebhookRequest(server string, body PostIntegrationCreateWebhookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateWebhookRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateWebhookRequestWithBody generates requests for PostIntegrationCreateWebhook with any type of body
func NewPostIntegrationCreateWebhookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-webhook/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateZapierRequest calls the generic PostIntegrationCreateZapier builder with application/json body
func NewPostIntegrationCreateZapierRequest(server string, body PostIntegrationCreateZapierJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateZapierRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateZapierRequestWithBody generates requests for PostIntegrationCreateZapier with any type of body
func NewPostIntegrationCreateZapierRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-zapier/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIntegrationDetailRequest generates requests for DeleteIntegrationDetail
func NewDeleteIntegrationDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIntegrationDetailRequest generates requests for GetIntegrationDetail
func NewGetIntegrationDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchIntegrationDetailRequest calls the generic PatchIntegrationDetail builder with application/json body
func NewPatchIntegrationDetailRequest(server string, pk string, body PatchIntegrationDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchIntegrationDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchIntegrationDetailRequestWithBody generates requests for PatchIntegrationDetail with any type of body
func NewPatchIntegrationDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutIntegrationDetailRequest calls the generic PutIntegrationDetail builder with application/json body
func NewPutIntegrationDetailRequest(server string, pk string, body PutIntegrationDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIntegrationDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPutIntegrationDetailRequestWithBody generates requests for PutIntegrationDetail with any type of body
func NewPutIntegrationDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOutagelistRequest generates requests for GetOutagelist
func NewGetOutagelistRequest(server string, params *GetOutagelistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/outages/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CheckPk != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "check_pk", runtime.ParamLocationQuery, *params.CheckPk); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CheckMonitoringServiceType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "check_monitoring_service_type", runtime.ParamLocationQuery, *params.CheckMonitoringServiceType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CheckTag != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "check_tag", runtime.ParamLocationQuery, *params.CheckTag); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ongoing != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ongoing", runtime.ParamLocationQuery, *params.Ongoing); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOutageDetailRequest generates requests for GetOutageDetail
func NewGetOutageDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/outages/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMonitoringServerListRequest generates requests for GetMonitoringServerList
func NewGetMonitoringServerListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/probe-servers/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPushnotificationlistRequest generates requests for GetPushnotificationlist
func NewGetPushnotificationlistRequest(server string, params *GetPushnotificationlistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/push-notifications/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPushnotificationlistRequest calls the generic PostPushnotificationlist builder with application/json body
func NewPostPushnotificationlistRequest(server string, body PostPushnotificationlistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPushnotificationlistRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPushnotificationlistRequestWithBody generates requests for PostPushnotificationlist with any type of body
func NewPostPushnotificationlistRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/push-notifications/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePushNotificationDetailRequest generates requests for DeletePushNotificationDetail
func NewDeletePushNotificationDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/push-notifications/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPushNotificationDetailRequest generates requests for GetPushNotificationDetail
func NewGetPushNotificationDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/push-notifications/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchPushNotificationDetailRequest calls the generic PatchPushNotificationDetail builder with application/json body
func NewPatchPushNotificationDetailRequest(server string, pk string, body PatchPushNotificationDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchPushNotificationDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchPushNotificationDetailRequestWithBody generates requests for PatchPushNotificationDetail with any type of body
func NewPatchPushNotificationDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/push-notifications/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutPushNotificationDetailRequest calls the generic PutPushNotificationDetail builder with application/json body
func NewPutPushNotificationDetailRequest(server string, pk string, body PutPushNotificationDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPushNotificationDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPutPushNotificationDetailRequestWithBody generates requests for PutPushNotificationDetail with any type of body
func NewPutPushNotificationDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/push-notifications/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetScheduledreportlistRequest generates requests for GetScheduledreportlist
func NewGetScheduledreportlistRequest(server string, params *GetScheduledreportlistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/scheduled-reports/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostScheduledreportlistRequest calls the generic PostScheduledreportlist builder with application/json body
func NewPostScheduledreportlistRequest(server string, body PostScheduledreportlistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostScheduledreportlistRequestWithBody(server, "application/json", bodyReader)
}

// NewPostScheduledreportlistRequestWithBody generates requests for PostScheduledreportlist with any type of body
func NewPostScheduledreportlistRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/scheduled-reports/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteScheduledReportDetailRequest generates requests for DeleteScheduledReportDetail
func NewDeleteScheduledReportDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/scheduled-reports/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScheduledReportDetailRequest generates requests for GetScheduledReportDetail
func NewGetScheduledReportDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/scheduled-reports/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchScheduledReportDetailRequest calls the generic PatchScheduledReportDetail builder with application/json body
func NewPatchScheduledReportDetailRequest(server string, pk string, body PatchScheduledReportDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchScheduledReportDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchScheduledReportDetailRequestWithBody generates requests for PatchScheduledReportDetail with any type of body
func NewPatchScheduledReportDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/scheduled-reports/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutScheduledReportDetailRequest calls the generic PutScheduledReportDetail builder with application/json body
func NewPutScheduledReportDetailRequest(server string, pk string, body PutScheduledReportDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutScheduledReportDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPutScheduledReportDetailRequestWithBody generates requests for PutScheduledReportDetail with any type of body
func NewPutScheduledReportDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/scheduled-reports/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSlareportlistRequest generates requests for GetSlareportlist
func NewGetSlareportlistRequest(server string, params *GetSlareportlistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/sla-reports/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSlareportlistRequest calls the generic PostSlareportlist builder with application/json body
func NewPostSlareportlistRequest(server string, body PostSlareportlistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSlareportlistRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSlareportlistRequestWithBody generates requests for PostSlareportlist with any type of body
func NewPostSlareportlistRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/sla-reports/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSlaReportDetailRequest generates requests for DeleteSlaReportDetail
func NewDeleteSlaReportDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/sla-reports/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSlaReportDetailRequest generates requests for GetSlaReportDetail
func NewGetSlaReportDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/sla-reports/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchSlaReportDetailRequest calls the generic PatchSlaReportDetail builder with application/json body
func NewPatchSlaReportDetailRequest(server string, pk string, body PatchSlaReportDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchSlaReportDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchSlaReportDetailRequestWithBody generates requests for PatchSlaReportDetail with any type of body
func NewPatchSlaReportDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/sla-reports/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutSlaReportDetailRequest calls the generic PutSlaReportDetail builder with application/json body
func NewPutSlaReportDetailRequest(server string, pk string, body PutSlaReportDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSlaReportDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPutSlaReportDetailRequestWithBody generates requests for PutSlaReportDetail with any type of body
func NewPutSlaReportDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/sla-reports/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSlaReportStatsRequest generates requests for GetSlaReportStats
func NewGetSlaReportStatsRequest(server string, pk string, params *GetSlaReportStatsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/sla-reports/%s/stats/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.StartDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Output != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "output", runtime.ParamLocationQuery, *params.Output); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatuspagelistRequest generates requests for GetStatuspagelist
func NewGetStatuspagelistRequest(server string, params *GetStatuspagelistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsPublic != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_public", runtime.ParamLocationQuery, *params.IsPublic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostStatuspagelistRequest calls the generic PostStatuspagelist builder with application/json body
func NewPostStatuspagelistRequest(server string, body PostStatuspagelistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostStatuspagelistRequestWithBody(server, "application/json", bodyReader)
}

// NewPostStatuspagelistRequestWithBody generates requests for PostStatuspagelist with any type of body
func NewPostStatuspagelistRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStatuspageDetailRequest generates requests for DeleteStatuspageDetail
func NewDeleteStatuspageDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatuspageDetailRequest generates requests for GetStatuspageDetail
func NewGetStatuspageDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchStatuspageDetailRequest calls the generic PatchStatuspageDetail builder with application/json body
func NewPatchStatuspageDetailRequest(server string, pk string, body PatchStatuspageDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchStatuspageDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchStatuspageDetailRequestWithBody generates requests for PatchStatuspageDetail with any type of body
func NewPatchStatuspageDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutStatuspageDetailRequest calls the generic PutStatuspageDetail builder with application/json body
func NewPutStatuspageDetailRequest(server string, pk string, body PutStatuspageDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutStatuspageDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPutStatuspageDetailRequestWithBody generates requests for PutStatuspageDetail with any type of body
func NewPutStatuspageDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStatuspageCurrentStatusRequest generates requests for GetStatuspageCurrentStatus
func NewGetStatuspageCurrentStatusRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/current-status/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatuspageHistoryRequest generates requests for GetStatuspageHistory
func NewGetStatuspageHistoryRequest(server string, pk string, params *GetStatuspageHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/history/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.StartDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetComponentslistRequest generates requests for GetComponentslist
func NewGetComponentslistRequest(server string, statuspageId string, params *GetComponentslistParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/components/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.GroupId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group_id", runtime.ParamLocationQuery, *params.GroupId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsGroup != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_group", runtime.ParamLocationQuery, *params.IsGroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostComponentslistRequest calls the generic PostComponentslist builder with application/json body
func NewPostComponentslistRequest(server string, statuspageId string, body PostComponentslistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostComponentslistRequestWithBody(server, statuspageId, "application/json", bodyReader)
}

// NewPostComponentslistRequestWithBody generates requests for PostComponentslist with any type of body
func NewPostComponentslistRequestWithBody(server string, statuspageId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/components/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteComponentDetailRequest generates requests for DeleteComponentDetail
func NewDeleteComponentDetailRequest(server string, statuspageId string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/components/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetComponentDetailRequest generates requests for GetComponentDetail
func NewGetComponentDetailRequest(server string, statuspageId string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/components/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchComponentDetailRequest calls the generic PatchComponentDetail builder with application/json body
func NewPatchComponentDetailRequest(server string, statuspageId string, pk string, body PatchComponentDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchComponentDetailRequestWithBody(server, statuspageId, pk, "application/json", bodyReader)
}

// NewPatchComponentDetailRequestWithBody generates requests for PatchComponentDetail with any type of body
func NewPatchComponentDetailRequestWithBody(server string, statuspageId string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/components/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutComponentDetailRequest calls the generic PutComponentDetail builder with application/json body
func NewPutComponentDetailRequest(server string, statuspageId string, pk string, body PutComponentDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutComponentDetailRequestWithBody(server, statuspageId, pk, "application/json", bodyReader)
}

// NewPutComponentDetailRequestWithBody generates requests for PutComponentDetail with any type of body
func NewPutComponentDetailRequestWithBody(server string, statuspageId string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/components/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIncidentlistRequest generates requests for GetIncidentlist
func NewGetIncidentlistRequest(server string, statuspageId string, params *GetIncidentlistParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/incidents/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncidentType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "incident_type", runtime.ParamLocationQuery, *params.IncidentType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIncidentlistRequest calls the generic PostIncidentlist builder with application/json body
func NewPostIncidentlistRequest(server string, statuspageId string, body PostIncidentlistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIncidentlistRequestWithBody(server, statuspageId, "application/json", bodyReader)
}

// NewPostIncidentlistRequestWithBody generates requests for PostIncidentlist with any type of body
func NewPostIncidentlistRequestWithBody(server string, statuspageId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/incidents/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentDetailRequest generates requests for DeleteIncidentDetail
func NewDeleteIncidentDetailRequest(server string, statuspageId string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/incidents/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentDetailRequest generates requests for GetIncidentDetail
func NewGetIncidentDetailRequest(server string, statuspageId string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/incidents/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchIncidentDetailRequest calls the generic PatchIncidentDetail builder with application/json body
func NewPatchIncidentDetailRequest(server string, statuspageId string, pk string, body PatchIncidentDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchIncidentDetailRequestWithBody(server, statuspageId, pk, "application/json", bodyReader)
}

// NewPatchIncidentDetailRequestWithBody generates requests for PatchIncidentDetail with any type of body
func NewPatchIncidentDetailRequestWithBody(server string, statuspageId string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/incidents/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutIncidentDetailRequest calls the generic PutIncidentDetail builder with application/json body
func NewPutIncidentDetailRequest(server string, statuspageId string, pk string, body PutIncidentDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIncidentDetailRequestWithBody(server, statuspageId, pk, "application/json", bodyReader)
}

// NewPutIncidentDetailRequestWithBody generates requests for PutIncidentDetail with any type of body
func NewPutIncidentDetailRequestWithBody(server string, statuspageId string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/incidents/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMetricslistRequest generates requests for GetMetricslist
func NewGetMetricslistRequest(server string, statuspageId string, params *GetMetricslistParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/metrics/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsVisible != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_visible", runtime.ParamLocationQuery, *params.IsVisible); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMetricslistRequest calls the generic PostMetricslist builder with application/json body
func NewPostMetricslistRequest(server string, statuspageId string, body PostMetricslistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMetricslistRequestWithBody(server, statuspageId, "application/json", bodyReader)
}

// NewPostMetricslistRequestWithBody generates requests for PostMetricslist with any type of body
func NewPostMetricslistRequestWithBody(server string, statuspageId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/metrics/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMetricDetailRequest generates requests for DeleteMetricDetail
func NewDeleteMetricDetailRequest(server string, statuspageId string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/metrics/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMetricDetailRequest generates requests for GetMetricDetail
func NewGetMetricDetailRequest(server string, statuspageId string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/metrics/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchMetricDetailRequest calls the generic PatchMetricDetail builder with application/json body
func NewPatchMetricDetailRequest(server string, statuspageId string, pk string, body PatchMetricDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchMetricDetailRequestWithBody(server, statuspageId, pk, "application/json", bodyReader)
}

// NewPatchMetricDetailRequestWithBody generates requests for PatchMetricDetail with any type of body
func NewPatchMetricDetailRequestWithBody(server string, statuspageId string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/metrics/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutMetricDetailRequest calls the generic PutMetricDetail builder with application/json body
func NewPutMetricDetailRequest(server string, statuspageId string, pk string, body PutMetricDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutMetricDetailRequestWithBody(server, statuspageId, pk, "application/json", bodyReader)
}

// NewPutMetricDetailRequestWithBody generates requests for PutMetricDetail with any type of body
func NewPutMetricDetailRequestWithBody(server string, statuspageId string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/metrics/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserlistRequest generates requests for GetUserlist
func NewGetUserlistRequest(server string, params *GetUserlistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Email != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AccessLevel != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "access_level", runtime.ParamLocationQuery, *params.AccessLevel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Subaccount != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subaccount", runtime.ParamLocationQuery, *params.Subaccount); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsActive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_active", runtime.ParamLocationQuery, *params.IsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsApiEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_api_enabled", runtime.ParamLocationQuery, *params.IsApiEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NotifyPaidInvoices != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "notify_paid_invoices", runtime.ParamLocationQuery, *params.NotifyPaidInvoices); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserlistRequest calls the generic PostUserlist builder with application/json body
func NewPostUserlistRequest(server string, body PostUserlistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserlistRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUserlistRequestWithBody generates requests for PostUserlist with any type of body
func NewPostUserlistRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserDetailRequest generates requests for DeleteUserDetail
func NewDeleteUserDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserDetailRequest generates requests for GetUserDetail
func NewGetUserDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchUserDetailRequest calls the generic PatchUserDetail builder with application/json body
func NewPatchUserDetailRequest(server string, pk string, body PatchUserDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchUserDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchUserDetailRequestWithBody generates requests for PatchUserDetail with any type of body
func NewPatchUserDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutUserDetailRequest calls the generic PutUserDetail builder with application/json body
func NewPutUserDetailRequest(server string, pk string, body PutUserDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutUserDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPutUserDetailRequestWithBody generates requests for PutUserDetail with any type of body
func NewPutUserDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUserDeactivateRequest generates requests for PostUserDeactivate
func NewPostUserDeactivateRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/%s/deactivate/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserReactivateRequest generates requests for PostUserReactivate
func NewPostUserReactivateRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/%s/reactivate/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAlertlist request
	GetAlertlistWithResponse(ctx context.Context, params *GetAlertlistParams, reqEditors ...RequestEditorFn) (*GetAlertlistResponse, error)

	// GetAlertAlertRootCause request
	GetAlertAlertRootCauseWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetAlertAlertRootCauseResponse, error)

	// GetAlertDetail request
	GetAlertDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetAlertDetailResponse, error)

	// PostAlertIgnore request
	PostAlertIgnoreWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*PostAlertIgnoreResponse, error)

	// GetAuthList request
	GetAuthListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthListResponse, error)

	// GetAuthAccountUsage request
	GetAuthAccountUsageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthAccountUsageResponse, error)

	// PostAuthLogin request with any body
	PostAuthLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthLoginResponse, error)

	PostAuthLoginWithResponse(ctx context.Context, body PostAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthLoginResponse, error)

	// GetAuthMe request
	GetAuthMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthMeResponse, error)

	// GetAuthResetPassword request
	GetAuthResetPasswordWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthResetPasswordResponse, error)

	// PostAuthResetPassword request with any body
	PostAuthResetPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthResetPasswordResponse, error)

	PostAuthResetPasswordWithResponse(ctx context.Context, body PostAuthResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthResetPasswordResponse, error)

	// PostSendMagicLink request with any body
	PostSendMagicLinkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendMagicLinkResponse, error)

	PostSendMagicLinkWithResponse(ctx context.Context, body PostSendMagicLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSendMagicLinkResponse, error)

	// GetAuthSubaccounts request
	GetAuthSubaccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthSubaccountsResponse, error)

	// PostAuthSubaccounts request with any body
	PostAuthSubaccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthSubaccountsResponse, error)

	PostAuthSubaccountsWithResponse(ctx context.Context, body PostAuthSubaccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthSubaccountsResponse, error)

	// GetAuthSubaccount request
	GetAuthSubaccountWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetAuthSubaccountResponse, error)

	// PatchAuthSubaccount request with any body
	PatchAuthSubaccountWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAuthSubaccountResponse, error)

	PatchAuthSubaccountWithResponse(ctx context.Context, pk string, body PatchAuthSubaccountJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAuthSubaccountResponse, error)

	// PostAuthSubaccountPacks request with any body
	PostAuthSubaccountPacksWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthSubaccountPacksResponse, error)

	PostAuthSubaccountPacksWithResponse(ctx context.Context, pk string, body PostAuthSubaccountPacksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthSubaccountPacksResponse, error)

	// PostValidateMagicLink request
	PostValidateMagicLinkWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostValidateMagicLinkResponse, error)

	// GetServicetaglist request
	GetServicetaglistWithResponse(ctx context.Context, params *GetServicetaglistParams, reqEditors ...RequestEditorFn) (*GetServicetaglistResponse, error)

	// PostServicetaglist request with any body
	PostServicetaglistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServicetaglistResponse, error)

	PostServicetaglistWithResponse(ctx context.Context, body PostServicetaglistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServicetaglistResponse, error)

	// DeleteServiceTagDetail request
	DeleteServiceTagDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteServiceTagDetailResponse, error)

	// GetServiceTagDetail request
	GetServiceTagDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetServiceTagDetailResponse, error)

	// PatchServiceTagDetail request with any body
	PatchServiceTagDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceTagDetailResponse, error)

	PatchServiceTagDetailWithResponse(ctx context.Context, pk string, body PatchServiceTagDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceTagDetailResponse, error)

	// PutServiceTagDetail request with any body
	PutServiceTagDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutServiceTagDetailResponse, error)

	PutServiceTagDetailWithResponse(ctx context.Context, pk string, body PutServiceTagDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutServiceTagDetailResponse, error)

	// GetServicelist request
	GetServicelistWithResponse(ctx context.Context, params *GetServicelistParams, reqEditors ...RequestEditorFn) (*GetServicelistResponse, error)

	// PostServiceCreateApi request with any body
	PostServiceCreateApiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateApiResponse, error)

	PostServiceCreateApiWithResponse(ctx context.Context, body PostServiceCreateApiJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateApiResponse, error)

	// PostServiceCreateBlacklist request with any body
	PostServiceCreateBlacklistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateBlacklistResponse, error)

	PostServiceCreateBlacklistWithResponse(ctx context.Context, body PostServiceCreateBlacklistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateBlacklistResponse, error)

	// PostServiceCreateDns request with any body
	PostServiceCreateDnsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateDnsResponse, error)

	PostServiceCreateDnsWithResponse(ctx context.Context, body PostServiceCreateDnsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateDnsResponse, error)

	// PostServiceCreateGroup request with any body
	PostServiceCreateGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateGroupResponse, error)

	PostServiceCreateGroupWithResponse(ctx context.Context, body PostServiceCreateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateGroupResponse, error)

	// PostServiceCreateHeartbeat request with any body
	PostServiceCreateHeartbeatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateHeartbeatResponse, error)

	PostServiceCreateHeartbeatWithResponse(ctx context.Context, body PostServiceCreateHeartbeatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateHeartbeatResponse, error)

	// PostServiceCreateHttp request with any body
	PostServiceCreateHttpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateHttpResponse, error)

	PostServiceCreateHttpWithResponse(ctx context.Context, body PostServiceCreateHttpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateHttpResponse, error)

	// PostServiceCreateIcmp request with any body
	PostServiceCreateIcmpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateIcmpResponse, error)

	PostServiceCreateIcmpWithResponse(ctx context.Context, body PostServiceCreateIcmpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateIcmpResponse, error)

	// PostServiceCreateImap request with any body
	PostServiceCreateImapWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateImapResponse, error)

	PostServiceCreateImapWithResponse(ctx context.Context, body PostServiceCreateImapJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateImapResponse, error)

	// PostServiceCreateMalware request with any body
	PostServiceCreateMalwareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateMalwareResponse, error)

	PostServiceCreateMalwareWithResponse(ctx context.Context, body PostServiceCreateMalwareJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateMalwareResponse, error)

	// PostServiceCreateNtp request with any body
	PostServiceCreateNtpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateNtpResponse, error)

	PostServiceCreateNtpWithResponse(ctx context.Context, body PostServiceCreateNtpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateNtpResponse, error)

	// PostServiceCreatePop request with any body
	PostServiceCreatePopWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreatePopResponse, error)

	PostServiceCreatePopWithResponse(ctx context.Context, body PostServiceCreatePopJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreatePopResponse, error)

	// PostServiceCreateRum request with any body
	PostServiceCreateRumWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateRumResponse, error)

	PostServiceCreateRumWithResponse(ctx context.Context, body PostServiceCreateRumJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateRumResponse, error)

	// PostServiceCreateRum2 request with any body
	PostServiceCreateRum2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateRum2Response, error)

	PostServiceCreateRum2WithResponse(ctx context.Context, body PostServiceCreateRum2JSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateRum2Response, error)

	// PostServiceCreateSmtp request with any body
	PostServiceCreateSmtpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateSmtpResponse, error)

	PostServiceCreateSmtpWithResponse(ctx context.Context, body PostServiceCreateSmtpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateSmtpResponse, error)

	// PostServiceCreateSsh request with any body
	PostServiceCreateSshWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateSshResponse, error)

	PostServiceCreateSshWithResponse(ctx context.Context, body PostServiceCreateSshJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateSshResponse, error)

	// PostServiceCreateSslCert request with any body
	PostServiceCreateSslCertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateSslCertResponse, error)

	PostServiceCreateSslCertWithResponse(ctx context.Context, body PostServiceCreateSslCertJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateSslCertResponse, error)

	// PostServiceCreateTcp request with any body
	PostServiceCreateTcpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateTcpResponse, error)

	PostServiceCreateTcpWithResponse(ctx context.Context, body PostServiceCreateTcpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateTcpResponse, error)

	// PostServiceCreateTransaction request with any body
	PostServiceCreateTransactionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateTransactionResponse, error)

	PostServiceCreateTransactionWithResponse(ctx context.Context, body PostServiceCreateTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateTransactionResponse, error)

	// PostServiceCreateUdp request with any body
	PostServiceCreateUdpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateUdpResponse, error)

	PostServiceCreateUdpWithResponse(ctx context.Context, body PostServiceCreateUdpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateUdpResponse, error)

	// PostServiceCreateWebhook request with any body
	PostServiceCreateWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateWebhookResponse, error)

	PostServiceCreateWebhookWithResponse(ctx context.Context, body PostServiceCreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateWebhookResponse, error)

	// PostServiceCreateWhois request with any body
	PostServiceCreateWhoisWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateWhoisResponse, error)

	PostServiceCreateWhoisWithResponse(ctx context.Context, body PostServiceCreateWhoisJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateWhoisResponse, error)

	// PatchServiceBulkEscalations request with any body
	PatchServiceBulkEscalationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceBulkEscalationsResponse, error)

	PatchServiceBulkEscalationsWithResponse(ctx context.Context, body PatchServiceBulkEscalationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceBulkEscalationsResponse, error)

	// PatchServiceBulkMaintenance request with any body
	PatchServiceBulkMaintenanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceBulkMaintenanceResponse, error)

	PatchServiceBulkMaintenanceWithResponse(ctx context.Context, body PatchServiceBulkMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceBulkMaintenanceResponse, error)

	// PatchServiceBulkPause request with any body
	PatchServiceBulkPauseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceBulkPauseResponse, error)

	PatchServiceBulkPauseWithResponse(ctx context.Context, body PatchServiceBulkPauseJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceBulkPauseResponse, error)

	// PatchServiceBulkResume request with any body
	PatchServiceBulkResumeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceBulkResumeResponse, error)

	PatchServiceBulkResumeWithResponse(ctx context.Context, body PatchServiceBulkResumeJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceBulkResumeResponse, error)

	// GetServiceBulkStats request
	GetServiceBulkStatsWithResponse(ctx context.Context, params *GetServiceBulkStatsParams, reqEditors ...RequestEditorFn) (*GetServiceBulkStatsResponse, error)

	// PatchServiceBulkUpdate request with any body
	PatchServiceBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceBulkUpdateResponse, error)

	PatchServiceBulkUpdateWithResponse(ctx context.Context, body PatchServiceBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceBulkUpdateResponse, error)

	// GetServiceShowServiceDefs request
	GetServiceShowServiceDefsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServiceShowServiceDefsResponse, error)

	// GetServiceShowLocations request
	GetServiceShowLocationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServiceShowLocationsResponse, error)

	// DeleteServiceDetail request
	DeleteServiceDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteServiceDetailResponse, error)

	// GetServiceDetail request
	GetServiceDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetServiceDetailResponse, error)

	// PatchServiceDetail request with any body
	PatchServiceDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceDetailResponse, error)

	PatchServiceDetailWithResponse(ctx context.Context, pk string, body PatchServiceDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceDetailResponse, error)

	// PutServiceDetail request with any body
	PutServiceDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutServiceDetailResponse, error)

	PutServiceDetailWithResponse(ctx context.Context, pk string, body PutServiceDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutServiceDetailResponse, error)

	// PatchServiceAddContactGroups request with any body
	PatchServiceAddContactGroupsWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceAddContactGroupsResponse, error)

	PatchServiceAddContactGroupsWithResponse(ctx context.Context, pk string, body PatchServiceAddContactGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceAddContactGroupsResponse, error)

	// PatchServiceAddLocations request with any body
	PatchServiceAddLocationsWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceAddLocationsResponse, error)

	PatchServiceAddLocationsWithResponse(ctx context.Context, pk string, body PatchServiceAddLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceAddLocationsResponse, error)

	// PatchServiceAddTags request with any body
	PatchServiceAddTagsWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceAddTagsResponse, error)

	PatchServiceAddTagsWithResponse(ctx context.Context, pk string, body PatchServiceAddTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceAddTagsResponse, error)

	// GetServiceAnalysis request
	GetServiceAnalysisWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetServiceAnalysisResponse, error)

	// GetServiceCurrentStatus request
	GetServiceCurrentStatusWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetServiceCurrentStatusResponse, error)

	// PatchServiceSetEscalations request with any body
	PatchServiceSetEscalationsWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceSetEscalationsResponse, error)

	PatchServiceSetEscalationsWithResponse(ctx context.Context, pk string, body PatchServiceSetEscalationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceSetEscalationsResponse, error)

	// PatchServiceSetMaintenance request with any body
	PatchServiceSetMaintenanceWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceSetMaintenanceResponse, error)

	PatchServiceSetMaintenanceWithResponse(ctx context.Context, pk string, body PatchServiceSetMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceSetMaintenanceResponse, error)

	// PostServicePause request
	PostServicePauseWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*PostServicePauseResponse, error)

	// PatchServiceReplaceContactGroups request with any body
	PatchServiceReplaceContactGroupsWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceReplaceContactGroupsResponse, error)

	PatchServiceReplaceContactGroupsWithResponse(ctx context.Context, pk string, body PatchServiceReplaceContactGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceReplaceContactGroupsResponse, error)

	// PatchServiceReplaceLocations request with any body
	PatchServiceReplaceLocationsWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceReplaceLocationsResponse, error)

	PatchServiceReplaceLocationsWithResponse(ctx context.Context, pk string, body PatchServiceReplaceLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceReplaceLocationsResponse, error)

	// PatchServiceReplaceTags request with any body
	PatchServiceReplaceTagsWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceReplaceTagsResponse, error)

	PatchServiceReplaceTagsWithResponse(ctx context.Context, pk string, body PatchServiceReplaceTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceReplaceTagsResponse, error)

	// GetServiceResponseTimeDatapoints request
	GetServiceResponseTimeDatapointsWithResponse(ctx context.Context, pk string, params *GetServiceResponseTimeDatapointsParams, reqEditors ...RequestEditorFn) (*GetServiceResponseTimeDatapointsResponse, error)

	// PostServiceResume request
	PostServiceResumeWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*PostServiceResumeResponse, error)

	// GetServiceStats request
	GetServiceStatsWithResponse(ctx context.Context, pk string, params *GetServiceStatsParams, reqEditors ...RequestEditorFn) (*GetServiceStatsResponse, error)

	// GetContactgrouplist request
	GetContactgrouplistWithResponse(ctx context.Context, params *GetContactgrouplistParams, reqEditors ...RequestEditorFn) (*GetContactgrouplistResponse, error)

	// PostContactgrouplist request with any body
	PostContactgrouplistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContactgrouplistResponse, error)

	PostContactgrouplistWithResponse(ctx context.Context, body PostContactgrouplistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContactgrouplistResponse, error)

	// DeleteContactGroupDetail request
	DeleteContactGroupDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteContactGroupDetailResponse, error)

	// GetContactGroupDetail request
	GetContactGroupDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetContactGroupDetailResponse, error)

	// PatchContactGroupDetail request with any body
	PatchContactGroupDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchContactGroupDetailResponse, error)

	PatchContactGroupDetailWithResponse(ctx context.Context, pk string, body PatchContactGroupDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchContactGroupDetailResponse, error)

	// PutContactGroupDetail request with any body
	PutContactGroupDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutContactGroupDetailResponse, error)

	PutContactGroupDetailWithResponse(ctx context.Context, pk string, body PutContactGroupDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutContactGroupDetailResponse, error)

	// PatchContactGroupSetOnCallHours request with any body
	PatchContactGroupSetOnCallHoursWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchContactGroupSetOnCallHoursResponse, error)

	PatchContactGroupSetOnCallHoursWithResponse(ctx context.Context, pk string, body PatchContactGroupSetOnCallHoursJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchContactGroupSetOnCallHoursResponse, error)

	// GetDashboardlist request
	GetDashboardlistWithResponse(ctx context.Context, params *GetDashboardlistParams, reqEditors ...RequestEditorFn) (*GetDashboardlistResponse, error)

	// PostDashboardlist request with any body
	PostDashboardlistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDashboardlistResponse, error)

	PostDashboardlistWithResponse(ctx context.Context, body PostDashboardlistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDashboardlistResponse, error)

	// GetDashboardDefault request
	GetDashboardDefaultWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDashboardDefaultResponse, error)

	// DeleteDashboardDetail request
	DeleteDashboardDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteDashboardDetailResponse, error)

	// GetDashboardDetail request
	GetDashboardDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetDashboardDetailResponse, error)

	// PatchDashboardDetail request with any body
	PatchDashboardDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchDashboardDetailResponse, error)

	PatchDashboardDetailWithResponse(ctx context.Context, pk string, body PatchDashboardDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchDashboardDetailResponse, error)

	// PutDashboardDetail request with any body
	PutDashboardDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDashboardDetailResponse, error)

	PutDashboardDetailWithResponse(ctx context.Context, pk string, body PutDashboardDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDashboardDetailResponse, error)

	// GetDashboardStats request
	GetDashboardStatsWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetDashboardStatsResponse, error)

	// GetIntegrationlist request
	GetIntegrationlistWithResponse(ctx context.Context, params *GetIntegrationlistParams, reqEditors ...RequestEditorFn) (*GetIntegrationlistResponse, error)

	// PostIntegrationCreateCachet request with any body
	PostIntegrationCreateCachetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateCachetResponse, error)

	PostIntegrationCreateCachetWithResponse(ctx context.Context, body PostIntegrationCreateCachetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateCachetResponse, error)

	// PostIntegrationCreateDatadog request with any body
	PostIntegrationCreateDatadogWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateDatadogResponse, error)

	PostIntegrationCreateDatadogWithResponse(ctx context.Context, body PostIntegrationCreateDatadogJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateDatadogResponse, error)

	// PostIntegrationCreateGeckoboard request with any body
	PostIntegrationCreateGeckoboardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateGeckoboardResponse, error)

	PostIntegrationCreateGeckoboardWithResponse(ctx context.Context, body PostIntegrationCreateGeckoboardJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateGeckoboardResponse, error)

	// PostIntegrationCreateJiraservicedesk request with any body
	PostIntegrationCreateJiraservicedeskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateJiraservicedeskResponse, error)

	PostIntegrationCreateJiraservicedeskWithResponse(ctx context.Context, body PostIntegrationCreateJiraservicedeskJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateJiraservicedeskResponse, error)

	// PostIntegrationCreateKlipfolio request with any body
	PostIntegrationCreateKlipfolioWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateKlipfolioResponse, error)

	PostIntegrationCreateKlipfolioWithResponse(ctx context.Context, body PostIntegrationCreateKlipfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateKlipfolioResponse, error)

	// PostIntegrationCreateLibrato request with any body
	PostIntegrationCreateLibratoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateLibratoResponse, error)

	PostIntegrationCreateLibratoWithResponse(ctx context.Context, body PostIntegrationCreateLibratoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateLibratoResponse, error)

	// PostIntegrationCreateMicrosoftTeams request with any body
	PostIntegrationCreateMicrosoftTeamsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateMicrosoftTeamsResponse, error)

	PostIntegrationCreateMicrosoftTeamsWithResponse(ctx context.Context, body PostIntegrationCreateMicrosoftTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateMicrosoftTeamsResponse, error)

	// PostIntegrationCreateOpsgenie request with any body
	PostIntegrationCreateOpsgenieWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateOpsgenieResponse, error)

	PostIntegrationCreateOpsgenieWithResponse(ctx context.Context, body PostIntegrationCreateOpsgenieJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateOpsgenieResponse, error)

	// PostIntegrationCreatePagerduty request with any body
	PostIntegrationCreatePagerdutyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreatePagerdutyResponse, error)

	PostIntegrationCreatePagerdutyWithResponse(ctx context.Context, body PostIntegrationCreatePagerdutyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreatePagerdutyResponse, error)

	// PostIntegrationCreatePushbullet request with any body
	PostIntegrationCreatePushbulletWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreatePushbulletResponse, error)

	PostIntegrationCreatePushbulletWithResponse(ctx context.Context, body PostIntegrationCreatePushbulletJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreatePushbulletResponse, error)

	// PostIntegrationCreatePushover request with any body
	PostIntegrationCreatePushoverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreatePushoverResponse, error)

	PostIntegrationCreatePushoverWithResponse(ctx context.Context, body PostIntegrationCreatePushoverJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreatePushoverResponse, error)

	// PostIntegrationCreateSignifai request with any body
	PostIntegrationCreateSignifaiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateSignifaiResponse, error)

	PostIntegrationCreateSignifaiWithResponse(ctx context.Context, body PostIntegrationCreateSignifaiJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateSignifaiResponse, error)

	// PostIntegrationCreateSlack request with any body
	PostIntegrationCreateSlackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateSlackResponse, error)

	PostIntegrationCreateSlackWithResponse(ctx context.Context, body PostIntegrationCreateSlackJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateSlackResponse, error)

	// PostIntegrationCreateStatus request with any body
	PostIntegrationCreateStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateStatusResponse, error)

	PostIntegrationCreateStatusWithResponse(ctx context.Context, body PostIntegrationCreateStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateStatusResponse, error)

	// PostIntegrationCreateStatuspage request with any body
	PostIntegrationCreateStatuspageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateStatuspageResponse, error)

	PostIntegrationCreateStatuspageWithResponse(ctx context.Context, body PostIntegrationCreateStatuspageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateStatuspageResponse, error)

	// PostIntegrationCreateTwitter request with any body
	PostIntegrationCreateTwitterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateTwitterResponse, error)

	PostIntegrationCreateTwitterWithResponse(ctx context.Context, body PostIntegrationCreateTwitterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateTwitterResponse, error)

	// PostIntegrationCreateVictorops request with any body
	PostIntegrationCreateVictoropsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateVictoropsResponse, error)

	PostIntegrationCreateVictoropsWithResponse(ctx context.Context, body PostIntegrationCreateVictoropsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateVictoropsResponse, error)

	// PostIntegrationCreateWavefront request with any body
	PostIntegrationCreateWavefrontWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateWavefrontResponse, error)

	PostIntegrationCreateWavefrontWithResponse(ctx context.Context, body PostIntegrationCreateWavefrontJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateWavefrontResponse, error)

	// PostIntegrationCreateWebhook request with any body
	PostIntegrationCreateWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateWebhookResponse, error)

	PostIntegrationCreateWebhookWithResponse(ctx context.Context, body PostIntegrationCreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateWebhookResponse, error)

	// PostIntegrationCreateZapier request with any body
	PostIntegrationCreateZapierWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateZapierResponse, error)

	PostIntegrationCreateZapierWithResponse(ctx context.Context, body PostIntegrationCreateZapierJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateZapierResponse, error)

	// DeleteIntegrationDetail request
	DeleteIntegrationDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteIntegrationDetailResponse, error)

	// GetIntegrationDetail request
	GetIntegrationDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetIntegrationDetailResponse, error)

	// PatchIntegrationDetail request with any body
	PatchIntegrationDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchIntegrationDetailResponse, error)

	PatchIntegrationDetailWithResponse(ctx context.Context, pk string, body PatchIntegrationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchIntegrationDetailResponse, error)

	// PutIntegrationDetail request with any body
	PutIntegrationDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIntegrationDetailResponse, error)

	PutIntegrationDetailWithResponse(ctx context.Context, pk string, body PutIntegrationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIntegrationDetailResponse, error)

	// GetOutagelist request
	GetOutagelistWithResponse(ctx context.Context, params *GetOutagelistParams, reqEditors ...RequestEditorFn) (*GetOutagelistResponse, error)

	// GetOutageDetail request
	GetOutageDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetOutageDetailResponse, error)

	// GetMonitoringServerList request
	GetMonitoringServerListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMonitoringServerListResponse, error)

	// GetPushnotificationlist request
	GetPushnotificationlistWithResponse(ctx context.Context, params *GetPushnotificationlistParams, reqEditors ...RequestEditorFn) (*GetPushnotificationlistResponse, error)

	// PostPushnotificationlist request with any body
	PostPushnotificationlistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPushnotificationlistResponse, error)

	PostPushnotificationlistWithResponse(ctx context.Context, body PostPushnotificationlistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPushnotificationlistResponse, error)

	// DeletePushNotificationDetail request
	DeletePushNotificationDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeletePushNotificationDetailResponse, error)

	// GetPushNotificationDetail request
	GetPushNotificationDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetPushNotificationDetailResponse, error)

	// PatchPushNotificationDetail request with any body
	PatchPushNotificationDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPushNotificationDetailResponse, error)

	PatchPushNotificationDetailWithResponse(ctx context.Context, pk string, body PatchPushNotificationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPushNotificationDetailResponse, error)

	// PutPushNotificationDetail request with any body
	PutPushNotificationDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPushNotificationDetailResponse, error)

	PutPushNotificationDetailWithResponse(ctx context.Context, pk string, body PutPushNotificationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPushNotificationDetailResponse, error)

	// GetScheduledreportlist request
	GetScheduledreportlistWithResponse(ctx context.Context, params *GetScheduledreportlistParams, reqEditors ...RequestEditorFn) (*GetScheduledreportlistResponse, error)

	// PostScheduledreportlist request with any body
	PostScheduledreportlistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostScheduledreportlistResponse, error)

	PostScheduledreportlistWithResponse(ctx context.Context, body PostScheduledreportlistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostScheduledreportlistResponse, error)

	// DeleteScheduledReportDetail request
	DeleteScheduledReportDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteScheduledReportDetailResponse, error)

	// GetScheduledReportDetail request
	GetScheduledReportDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetScheduledReportDetailResponse, error)

	// PatchScheduledReportDetail request with any body
	PatchScheduledReportDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchScheduledReportDetailResponse, error)

	PatchScheduledReportDetailWithResponse(ctx context.Context, pk string, body PatchScheduledReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchScheduledReportDetailResponse, error)

	// PutScheduledReportDetail request with any body
	PutScheduledReportDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutScheduledReportDetailResponse, error)

	PutScheduledReportDetailWithResponse(ctx context.Context, pk string, body PutScheduledReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutScheduledReportDetailResponse, error)

	// GetSlareportlist request
	GetSlareportlistWithResponse(ctx context.Context, params *GetSlareportlistParams, reqEditors ...RequestEditorFn) (*GetSlareportlistResponse, error)

	// PostSlareportlist request with any body
	PostSlareportlistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSlareportlistResponse, error)

	PostSlareportlistWithResponse(ctx context.Context, body PostSlareportlistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSlareportlistResponse, error)

	// DeleteSlaReportDetail request
	DeleteSlaReportDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteSlaReportDetailResponse, error)

	// GetSlaReportDetail request
	GetSlaReportDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetSlaReportDetailResponse, error)

	// PatchSlaReportDetail request with any body
	PatchSlaReportDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSlaReportDetailResponse, error)

	PatchSlaReportDetailWithResponse(ctx context.Context, pk string, body PatchSlaReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSlaReportDetailResponse, error)

	// PutSlaReportDetail request with any body
	PutSlaReportDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSlaReportDetailResponse, error)

	PutSlaReportDetailWithResponse(ctx context.Context, pk string, body PutSlaReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSlaReportDetailResponse, error)

	// GetSlaReportStats request
	GetSlaReportStatsWithResponse(ctx context.Context, pk string, params *GetSlaReportStatsParams, reqEditors ...RequestEditorFn) (*GetSlaReportStatsResponse, error)

	// GetStatuspagelist request
	GetStatuspagelistWithResponse(ctx context.Context, params *GetStatuspagelistParams, reqEditors ...RequestEditorFn) (*GetStatuspagelistResponse, error)

	// PostStatuspagelist request with any body
	PostStatuspagelistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStatuspagelistResponse, error)

	PostStatuspagelistWithResponse(ctx context.Context, body PostStatuspagelistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStatuspagelistResponse, error)

	// DeleteStatuspageDetail request
	DeleteStatuspageDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteStatuspageDetailResponse, error)

	// GetStatuspageDetail request
	GetStatuspageDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetStatuspageDetailResponse, error)

	// PatchStatuspageDetail request with any body
	PatchStatuspageDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchStatuspageDetailResponse, error)

	PatchStatuspageDetailWithResponse(ctx context.Context, pk string, body PatchStatuspageDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchStatuspageDetailResponse, error)

	// PutStatuspageDetail request with any body
	PutStatuspageDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutStatuspageDetailResponse, error)

	PutStatuspageDetailWithResponse(ctx context.Context, pk string, body PutStatuspageDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutStatuspageDetailResponse, error)

	// GetStatuspageCurrentStatus request
	GetStatuspageCurrentStatusWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetStatuspageCurrentStatusResponse, error)

	// GetStatuspageHistory request
	GetStatuspageHistoryWithResponse(ctx context.Context, pk string, params *GetStatuspageHistoryParams, reqEditors ...RequestEditorFn) (*GetStatuspageHistoryResponse, error)

	// GetComponentslist request
	GetComponentslistWithResponse(ctx context.Context, statuspageId string, params *GetComponentslistParams, reqEditors ...RequestEditorFn) (*GetComponentslistResponse, error)

	// PostComponentslist request with any body
	PostComponentslistWithBodyWithResponse(ctx context.Context, statuspageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostComponentslistResponse, error)

	PostComponentslistWithResponse(ctx context.Context, statuspageId string, body PostComponentslistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostComponentslistResponse, error)

	// DeleteComponentDetail request
	DeleteComponentDetailWithResponse(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*DeleteComponentDetailResponse, error)

	// GetComponentDetail request
	GetComponentDetailWithResponse(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*GetComponentDetailResponse, error)

	// PatchComponentDetail request with any body
	PatchComponentDetailWithBodyWithResponse(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchComponentDetailResponse, error)

	PatchComponentDetailWithResponse(ctx context.Context, statuspageId string, pk string, body PatchComponentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchComponentDetailResponse, error)

	// PutComponentDetail request with any body
	PutComponentDetailWithBodyWithResponse(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutComponentDetailResponse, error)

	PutComponentDetailWithResponse(ctx context.Context, statuspageId string, pk string, body PutComponentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutComponentDetailResponse, error)

	// GetIncidentlist request
	GetIncidentlistWithResponse(ctx context.Context, statuspageId string, params *GetIncidentlistParams, reqEditors ...RequestEditorFn) (*GetIncidentlistResponse, error)

	// PostIncidentlist request with any body
	PostIncidentlistWithBodyWithResponse(ctx context.Context, statuspageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIncidentlistResponse, error)

	PostIncidentlistWithResponse(ctx context.Context, statuspageId string, body PostIncidentlistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIncidentlistResponse, error)

	// DeleteIncidentDetail request
	DeleteIncidentDetailWithResponse(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*DeleteIncidentDetailResponse, error)

	// GetIncidentDetail request
	GetIncidentDetailWithResponse(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*GetIncidentDetailResponse, error)

	// PatchIncidentDetail request with any body
	PatchIncidentDetailWithBodyWithResponse(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchIncidentDetailResponse, error)

	PatchIncidentDetailWithResponse(ctx context.Context, statuspageId string, pk string, body PatchIncidentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchIncidentDetailResponse, error)

	// PutIncidentDetail request with any body
	PutIncidentDetailWithBodyWithResponse(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIncidentDetailResponse, error)

	PutIncidentDetailWithResponse(ctx context.Context, statuspageId string, pk string, body PutIncidentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIncidentDetailResponse, error)

	// GetMetricslist request
	GetMetricslistWithResponse(ctx context.Context, statuspageId string, params *GetMetricslistParams, reqEditors ...RequestEditorFn) (*GetMetricslistResponse, error)

	// PostMetricslist request with any body
	PostMetricslistWithBodyWithResponse(ctx context.Context, statuspageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMetricslistResponse, error)

	PostMetricslistWithResponse(ctx context.Context, statuspageId string, body PostMetricslistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMetricslistResponse, error)

	// DeleteMetricDetail request
	DeleteMetricDetailWithResponse(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*DeleteMetricDetailResponse, error)

	// GetMetricDetail request
	GetMetricDetailWithResponse(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*GetMetricDetailResponse, error)

	// PatchMetricDetail request with any body
	PatchMetricDetailWithBodyWithResponse(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchMetricDetailResponse, error)

	PatchMetricDetailWithResponse(ctx context.Context, statuspageId string, pk string, body PatchMetricDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchMetricDetailResponse, error)

	// PutMetricDetail request with any body
	PutMetricDetailWithBodyWithResponse(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMetricDetailResponse, error)

	PutMetricDetailWithResponse(ctx context.Context, statuspageId string, pk string, body PutMetricDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMetricDetailResponse, error)

	// GetUserlist request
	GetUserlistWithResponse(ctx context.Context, params *GetUserlistParams, reqEditors ...RequestEditorFn) (*GetUserlistResponse, error)

	// PostUserlist request with any body
	PostUserlistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserlistResponse, error)

	PostUserlistWithResponse(ctx context.Context, body PostUserlistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserlistResponse, error)

	// DeleteUserDetail request
	DeleteUserDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteUserDetailResponse, error)

	// GetUserDetail request
	GetUserDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetUserDetailResponse, error)

	// PatchUserDetail request with any body
	PatchUserDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUserDetailResponse, error)

	PatchUserDetailWithResponse(ctx context.Context, pk string, body PatchUserDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUserDetailResponse, error)

	// PutUserDetail request with any body
	PutUserDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUserDetailResponse, error)

	PutUserDetailWithResponse(ctx context.Context, pk string, body PutUserDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUserDetailResponse, error)

	// PostUserDeactivate request
	PostUserDeactivateWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*PostUserDeactivateResponse, error)

	// PostUserReactivate request
	PostUserReactivateWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*PostUserReactivateResponse, error)
}

type GetAlertlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *int         `json:"count,omitempty"`
		Next     *string      `json:"next"`
		Previous *string      `json:"previous"`
		Results  *[]Incidents `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAlertlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertAlertRootCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAlertAlertRootCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertAlertRootCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Incidents
}

// Status returns HTTPResponse.Status
func (r GetAlertDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAlertIgnoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAlertIgnoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAlertIgnoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAuthListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthAccountUsageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAuthAccountUsageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthAccountUsageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthTokenWithTOTP
}

// Status returns HTTPResponse.Status
func (r PostAuthLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetAuthMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthResetPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PasswordReset
}

// Status returns HTTPResponse.Status
func (r GetAuthResetPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthResetPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthResetPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PasswordReset
}

// Status returns HTTPResponse.Status
func (r PostAuthResetPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthResetPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSendMagicLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MagicLink
}

// Status returns HTTPResponse.Status
func (r PostSendMagicLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSendMagicLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthSubaccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Subaccount
}

// Status returns HTTPResponse.Status
func (r GetAuthSubaccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthSubaccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthSubaccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Subaccount
}

// Status returns HTTPResponse.Status
func (r PostAuthSubaccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthSubaccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthSubaccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Subaccount
}

// Status returns HTTPResponse.Status
func (r GetAuthSubaccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthSubaccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchAuthSubaccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Subaccount
}

// Status returns HTTPResponse.Status
func (r PatchAuthSubaccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchAuthSubaccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthSubaccountPacksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubaccountPacks
}

// Status returns HTTPResponse.Status
func (r PostAuthSubaccountPacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthSubaccountPacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostValidateMagicLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostValidateMagicLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostValidateMagicLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServicetaglistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *int        `json:"count,omitempty"`
		Next     *string     `json:"next"`
		Previous *string     `json:"previous"`
		Results  *[]CheckTag `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetServicetaglistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServicetaglistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServicetaglistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckTag
}

// Status returns HTTPResponse.Status
func (r PostServicetaglistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServicetaglistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServiceTagDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteServiceTagDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServiceTagDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceTagDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckTag
}

// Status returns HTTPResponse.Status
func (r GetServiceTagDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceTagDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceTagDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckTag
}

// Status returns HTTPResponse.Status
func (r PatchServiceTagDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceTagDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutServiceTagDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckTag
}

// Status returns HTTPResponse.Status
func (r PutServiceTagDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutServiceTagDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServicelistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *int      `json:"count,omitempty"`
		Next     *string   `json:"next"`
		Previous *string   `json:"previous"`
		Results  *[]Checks `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetServicelistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServicelistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateApiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksAPI
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateApiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateApiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateBlacklistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksBLACKLIST
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateBlacklistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateBlacklistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateDnsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksDNS
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateDnsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateDnsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksGROUP
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateHeartbeatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksHEARTBEAT
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateHeartbeatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateHeartbeatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateHttpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksHTTP
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateHttpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateHttpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateIcmpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksICMP
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateIcmpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateIcmpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateImapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksIMAP
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateImapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateImapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateMalwareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksMALWARE
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateMalwareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateMalwareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateNtpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksNTP
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateNtpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateNtpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreatePopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksPOP
}

// Status returns HTTPResponse.Status
func (r PostServiceCreatePopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreatePopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateRumResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksRUM
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateRumResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateRumResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateRum2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksRUM2
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateRum2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateRum2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateSmtpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksSMTP
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateSmtpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateSmtpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateSshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksSSH
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateSshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateSshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateSslCertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksSSLCERT
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateSslCertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateSslCertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateTcpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksTCP
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateTcpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateTcpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksTRANSACTION
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateUdpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksUDP
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateUdpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateUdpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksWEBHOOK
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateWhoisResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksWHOIS
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateWhoisResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateWhoisResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceBulkEscalationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksBulkUpdateEscalations
}

// Status returns HTTPResponse.Status
func (r PatchServiceBulkEscalationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceBulkEscalationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceBulkMaintenanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksBulkUpdateMaintenance
}

// Status returns HTTPResponse.Status
func (r PatchServiceBulkMaintenanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceBulkMaintenanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceBulkPauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BulkChecksAction
}

// Status returns HTTPResponse.Status
func (r PatchServiceBulkPauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceBulkPauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceBulkResumeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BulkChecksAction
}

// Status returns HTTPResponse.Status
func (r PatchServiceBulkResumeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceBulkResumeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceBulkStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksBulkStats
}

// Status returns HTTPResponse.Status
func (r GetServiceBulkStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceBulkStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksBulkUpdate
}

// Status returns HTTPResponse.Status
func (r PatchServiceBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceShowServiceDefsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceShowServiceDefsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceShowServiceDefsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceShowLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceShowLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceShowLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServiceDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteServiceDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServiceDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Checks
}

// Status returns HTTPResponse.Status
func (r GetServiceDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Checks
}

// Status returns HTTPResponse.Status
func (r PatchServiceDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutServiceDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Checks
}

// Status returns HTTPResponse.Status
func (r PutServiceDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutServiceDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceAddContactGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckContactGroups
}

// Status returns HTTPResponse.Status
func (r PatchServiceAddContactGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceAddContactGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceAddLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckLocations
}

// Status returns HTTPResponse.Status
func (r PatchServiceAddLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceAddLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceAddTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckTags
}

// Status returns HTTPResponse.Status
func (r PatchServiceAddTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceAddTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceAnalysisResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceAnalysisResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceAnalysisResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceCurrentStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceCurrentStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceCurrentStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceSetEscalationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckEscalations
}

// Status returns HTTPResponse.Status
func (r PatchServiceSetEscalationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceSetEscalationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceSetMaintenanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckMaintenance
}

// Status returns HTTPResponse.Status
func (r PatchServiceSetMaintenanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceSetMaintenanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServicePauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostServicePauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServicePauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceReplaceContactGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckContactGroups
}

// Status returns HTTPResponse.Status
func (r PatchServiceReplaceContactGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceReplaceContactGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceReplaceLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckLocations
}

// Status returns HTTPResponse.Status
func (r PatchServiceReplaceLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceReplaceLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceReplaceTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckTags
}

// Status returns HTTPResponse.Status
func (r PatchServiceReplaceTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceReplaceTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceResponseTimeDatapointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseTime
}

// Status returns HTTPResponse.Status
func (r GetServiceResponseTimeDatapointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceResponseTimeDatapointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceResumeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostServiceResumeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceResumeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckStats
}

// Status returns HTTPResponse.Status
func (r GetServiceStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactgrouplistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *int            `json:"count,omitempty"`
		Next     *string         `json:"next"`
		Previous *string         `json:"previous"`
		Results  *[]ContactGroup `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetContactgrouplistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactgrouplistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostContactgrouplistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactGroup
}

// Status returns HTTPResponse.Status
func (r PostContactgrouplistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostContactgrouplistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteContactGroupDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteContactGroupDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteContactGroupDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactGroupDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactGroup
}

// Status returns HTTPResponse.Status
func (r GetContactGroupDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactGroupDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchContactGroupDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactGroup
}

// Status returns HTTPResponse.Status
func (r PatchContactGroupDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchContactGroupDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutContactGroupDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactGroup
}

// Status returns HTTPResponse.Status
func (r PutContactGroupDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutContactGroupDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchContactGroupSetOnCallHoursResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactGroupOnCallSchedule
}

// Status returns HTTPResponse.Status
func (r PatchContactGroupSetOnCallHoursResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchContactGroupSetOnCallHoursResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDashboardlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *int         `json:"count,omitempty"`
		Next     *string      `json:"next"`
		Previous *string      `json:"previous"`
		Results  *[]Dashboard `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetDashboardlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDashboardlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Dashboard
}

// Status returns HTTPResponse.Status
func (r PostDashboardlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDashboardlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDashboardDefaultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Dashboard
}

// Status returns HTTPResponse.Status
func (r GetDashboardDefaultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardDefaultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDashboardDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDashboardDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDashboardDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDashboardDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Dashboard
}

// Status returns HTTPResponse.Status
func (r GetDashboardDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchDashboardDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Dashboard
}

// Status returns HTTPResponse.Status
func (r PatchDashboardDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchDashboardDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutDashboardDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Dashboard
}

// Status returns HTTPResponse.Status
func (r PutDashboardDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutDashboardDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDashboardStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DashboardStats
}

// Status returns HTTPResponse.Status
func (r GetDashboardStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIntegrationlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *int           `json:"count,omitempty"`
		Next     *string        `json:"next"`
		Previous *string        `json:"previous"`
		Results  *[]Integration `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetIntegrationlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIntegrationlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateCachetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationCachet
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateCachetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateCachetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateDatadogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationDatadog
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateDatadogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateDatadogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateGeckoboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationGeckoboard
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateGeckoboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateGeckoboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateJiraservicedeskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationJiraservicedesk
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateJiraservicedeskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateJiraservicedeskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateKlipfolioResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationKlipfolio
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateKlipfolioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateKlipfolioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateLibratoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationLibrato
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateLibratoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateLibratoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateMicrosoftTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationMicrosoftTeams
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateMicrosoftTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateMicrosoftTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateOpsgenieResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationOpsgenie
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateOpsgenieResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateOpsgenieResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreatePagerdutyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationPagerduty
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreatePagerdutyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreatePagerdutyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreatePushbulletResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationPushbullet
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreatePushbulletResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreatePushbulletResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreatePushoverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationPushover
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreatePushoverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreatePushoverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateSignifaiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationSignifai
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateSignifaiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateSignifaiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateSlackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationSlack
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateSlackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateSlackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationStatus
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateStatuspageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationStatuspage
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateStatuspageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateStatuspageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateTwitterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationTwitter
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateTwitterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateTwitterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateVictoropsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationVictorops
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateVictoropsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateVictoropsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateWavefrontResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationWavefront
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateWavefrontResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateWavefrontResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationWebhook
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateZapierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationZapier
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateZapierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateZapierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIntegrationDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIntegrationDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIntegrationDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIntegrationDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
}

// Status returns HTTPResponse.Status
func (r GetIntegrationDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIntegrationDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchIntegrationDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
}

// Status returns HTTPResponse.Status
func (r PatchIntegrationDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchIntegrationDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIntegrationDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
}

// Status returns HTTPResponse.Status
func (r PutIntegrationDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIntegrationDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOutagelistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *int       `json:"count,omitempty"`
		Next     *string    `json:"next"`
		Previous *string    `json:"previous"`
		Results  *[]Outages `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetOutagelistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOutagelistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOutageDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Outages
}

// Status returns HTTPResponse.Status
func (r GetOutageDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOutageDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMonitoringServerListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetMonitoringServerListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMonitoringServerListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPushnotificationlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *int                             `json:"count,omitempty"`
		Next     *string                          `json:"next"`
		Previous *string                          `json:"previous"`
		Results  *[]PushNotificationProfileCreate `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPushnotificationlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPushnotificationlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPushnotificationlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PushNotificationProfileCreate
}

// Status returns HTTPResponse.Status
func (r PostPushnotificationlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPushnotificationlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePushNotificationDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePushNotificationDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePushNotificationDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPushNotificationDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PushNotificationProfile
}

// Status returns HTTPResponse.Status
func (r GetPushNotificationDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPushNotificationDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchPushNotificationDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PushNotificationProfile
}

// Status returns HTTPResponse.Status
func (r PatchPushNotificationDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchPushNotificationDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPushNotificationDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PushNotificationProfile
}

// Status returns HTTPResponse.Status
func (r PutPushNotificationDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPushNotificationDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScheduledreportlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *int               `json:"count,omitempty"`
		Next     *string            `json:"next"`
		Previous *string            `json:"previous"`
		Results  *[]ScheduledReport `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetScheduledreportlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScheduledreportlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostScheduledreportlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledReport
}

// Status returns HTTPResponse.Status
func (r PostScheduledreportlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostScheduledreportlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteScheduledReportDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteScheduledReportDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteScheduledReportDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScheduledReportDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledReport
}

// Status returns HTTPResponse.Status
func (r GetScheduledReportDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScheduledReportDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchScheduledReportDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledReport
}

// Status returns HTTPResponse.Status
func (r PatchScheduledReportDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchScheduledReportDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutScheduledReportDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledReport
}

// Status returns HTTPResponse.Status
func (r PutScheduledReportDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutScheduledReportDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSlareportlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *int         `json:"count,omitempty"`
		Next     *string      `json:"next"`
		Previous *string      `json:"previous"`
		Results  *[]SLAReport `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSlareportlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSlareportlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSlareportlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SLAReport
}

// Status returns HTTPResponse.Status
func (r PostSlareportlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSlareportlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSlaReportDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSlaReportDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSlaReportDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSlaReportDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SLAReport
}

// Status returns HTTPResponse.Status
func (r GetSlaReportDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSlaReportDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSlaReportDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SLAReport
}

// Status returns HTTPResponse.Status
func (r PatchSlaReportDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSlaReportDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSlaReportDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SLAReport
}

// Status returns HTTPResponse.Status
func (r PutSlaReportDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSlaReportDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSlaReportStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SLAReportStats
}

// Status returns HTTPResponse.Status
func (r GetSlaReportStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSlaReportStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatuspagelistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *int          `json:"count,omitempty"`
		Next     *string       `json:"next"`
		Previous *string       `json:"previous"`
		Results  *[]StatusPage `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetStatuspagelistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatuspagelistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostStatuspagelistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusPage
}

// Status returns HTTPResponse.Status
func (r PostStatuspagelistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostStatuspagelistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStatuspageDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteStatuspageDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStatuspageDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatuspageDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusPage
}

// Status returns HTTPResponse.Status
func (r GetStatuspageDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatuspageDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchStatuspageDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusPage
}

// Status returns HTTPResponse.Status
func (r PatchStatuspageDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchStatuspageDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutStatuspageDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusPage
}

// Status returns HTTPResponse.Status
func (r PutStatuspageDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutStatuspageDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatuspageCurrentStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusPageCurrentStatus
}

// Status returns HTTPResponse.Status
func (r GetStatuspageCurrentStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatuspageCurrentStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatuspageHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusPageHistory
}

// Status returns HTTPResponse.Status
func (r GetStatuspageHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatuspageHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComponentslistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *int         `json:"count,omitempty"`
		Next     *string      `json:"next"`
		Previous *string      `json:"previous"`
		Results  *[]Component `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetComponentslistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComponentslistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostComponentslistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Component
}

// Status returns HTTPResponse.Status
func (r PostComponentslistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostComponentslistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteComponentDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteComponentDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteComponentDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComponentDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Component
}

// Status returns HTTPResponse.Status
func (r GetComponentDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComponentDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchComponentDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Component
}

// Status returns HTTPResponse.Status
func (r PatchComponentDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchComponentDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutComponentDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Component
}

// Status returns HTTPResponse.Status
func (r PutComponentDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutComponentDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *int        `json:"count,omitempty"`
		Next     *string     `json:"next"`
		Previous *string     `json:"previous"`
		Results  *[]Incident `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetIncidentlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIncidentlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Incident
}

// Status returns HTTPResponse.Status
func (r PostIncidentlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIncidentlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Incident
}

// Status returns HTTPResponse.Status
func (r GetIncidentDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchIncidentDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Incident
}

// Status returns HTTPResponse.Status
func (r PatchIncidentDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchIncidentDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIncidentDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Incident
}

// Status returns HTTPResponse.Status
func (r PutIncidentDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIncidentDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMetricslistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *int      `json:"count,omitempty"`
		Next     *string   `json:"next"`
		Previous *string   `json:"previous"`
		Results  *[]Metric `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMetricslistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMetricslistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMetricslistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Metric
}

// Status returns HTTPResponse.Status
func (r PostMetricslistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMetricslistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMetricDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteMetricDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMetricDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMetricDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Metric
}

// Status returns HTTPResponse.Status
func (r GetMetricDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMetricDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchMetricDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Metric
}

// Status returns HTTPResponse.Status
func (r PatchMetricDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchMetricDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutMetricDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Metric
}

// Status returns HTTPResponse.Status
func (r PutMetricDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutMetricDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *int    `json:"count,omitempty"`
		Next     *string `json:"next"`
		Previous *string `json:"previous"`
		Results  *[]User `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUserlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r PostUserlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetUserDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchUserDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r PatchUserDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchUserDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUserDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r PutUserDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUserDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserDeactivateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUserDeactivateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserDeactivateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserReactivateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUserReactivateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserReactivateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAlertlistWithResponse request returning *GetAlertlistResponse
func (c *ClientWithResponses) GetAlertlistWithResponse(ctx context.Context, params *GetAlertlistParams, reqEditors ...RequestEditorFn) (*GetAlertlistResponse, error) {
	rsp, err := c.GetAlertlist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertlistResponse(rsp)
}

// GetAlertAlertRootCauseWithResponse request returning *GetAlertAlertRootCauseResponse
func (c *ClientWithResponses) GetAlertAlertRootCauseWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetAlertAlertRootCauseResponse, error) {
	rsp, err := c.GetAlertAlertRootCause(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertAlertRootCauseResponse(rsp)
}

// GetAlertDetailWithResponse request returning *GetAlertDetailResponse
func (c *ClientWithResponses) GetAlertDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetAlertDetailResponse, error) {
	rsp, err := c.GetAlertDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertDetailResponse(rsp)
}

// PostAlertIgnoreWithResponse request returning *PostAlertIgnoreResponse
func (c *ClientWithResponses) PostAlertIgnoreWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*PostAlertIgnoreResponse, error) {
	rsp, err := c.PostAlertIgnore(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAlertIgnoreResponse(rsp)
}

// GetAuthListWithResponse request returning *GetAuthListResponse
func (c *ClientWithResponses) GetAuthListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthListResponse, error) {
	rsp, err := c.GetAuthList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthListResponse(rsp)
}

// GetAuthAccountUsageWithResponse request returning *GetAuthAccountUsageResponse
func (c *ClientWithResponses) GetAuthAccountUsageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthAccountUsageResponse, error) {
	rsp, err := c.GetAuthAccountUsage(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthAccountUsageResponse(rsp)
}

// PostAuthLoginWithBodyWithResponse request with arbitrary body returning *PostAuthLoginResponse
func (c *ClientWithResponses) PostAuthLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthLoginResponse, error) {
	rsp, err := c.PostAuthLoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthLoginResponse(rsp)
}

func (c *ClientWithResponses) PostAuthLoginWithResponse(ctx context.Context, body PostAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthLoginResponse, error) {
	rsp, err := c.PostAuthLogin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthLoginResponse(rsp)
}

// GetAuthMeWithResponse request returning *GetAuthMeResponse
func (c *ClientWithResponses) GetAuthMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthMeResponse, error) {
	rsp, err := c.GetAuthMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthMeResponse(rsp)
}

// GetAuthResetPasswordWithResponse request returning *GetAuthResetPasswordResponse
func (c *ClientWithResponses) GetAuthResetPasswordWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthResetPasswordResponse, error) {
	rsp, err := c.GetAuthResetPassword(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthResetPasswordResponse(rsp)
}

// PostAuthResetPasswordWithBodyWithResponse request with arbitrary body returning *PostAuthResetPasswordResponse
func (c *ClientWithResponses) PostAuthResetPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthResetPasswordResponse, error) {
	rsp, err := c.PostAuthResetPasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthResetPasswordResponse(rsp)
}

func (c *ClientWithResponses) PostAuthResetPasswordWithResponse(ctx context.Context, body PostAuthResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthResetPasswordResponse, error) {
	rsp, err := c.PostAuthResetPassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthResetPasswordResponse(rsp)
}

// PostSendMagicLinkWithBodyWithResponse request with arbitrary body returning *PostSendMagicLinkResponse
func (c *ClientWithResponses) PostSendMagicLinkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendMagicLinkResponse, error) {
	rsp, err := c.PostSendMagicLinkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendMagicLinkResponse(rsp)
}

func (c *ClientWithResponses) PostSendMagicLinkWithResponse(ctx context.Context, body PostSendMagicLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSendMagicLinkResponse, error) {
	rsp, err := c.PostSendMagicLink(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendMagicLinkResponse(rsp)
}

// GetAuthSubaccountsWithResponse request returning *GetAuthSubaccountsResponse
func (c *ClientWithResponses) GetAuthSubaccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthSubaccountsResponse, error) {
	rsp, err := c.GetAuthSubaccounts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthSubaccountsResponse(rsp)
}

// PostAuthSubaccountsWithBodyWithResponse request with arbitrary body returning *PostAuthSubaccountsResponse
func (c *ClientWithResponses) PostAuthSubaccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthSubaccountsResponse, error) {
	rsp, err := c.PostAuthSubaccountsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthSubaccountsResponse(rsp)
}

func (c *ClientWithResponses) PostAuthSubaccountsWithResponse(ctx context.Context, body PostAuthSubaccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthSubaccountsResponse, error) {
	rsp, err := c.PostAuthSubaccounts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthSubaccountsResponse(rsp)
}

// GetAuthSubaccountWithResponse request returning *GetAuthSubaccountResponse
func (c *ClientWithResponses) GetAuthSubaccountWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetAuthSubaccountResponse, error) {
	rsp, err := c.GetAuthSubaccount(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthSubaccountResponse(rsp)
}

// PatchAuthSubaccountWithBodyWithResponse request with arbitrary body returning *PatchAuthSubaccountResponse
func (c *ClientWithResponses) PatchAuthSubaccountWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAuthSubaccountResponse, error) {
	rsp, err := c.PatchAuthSubaccountWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAuthSubaccountResponse(rsp)
}

func (c *ClientWithResponses) PatchAuthSubaccountWithResponse(ctx context.Context, pk string, body PatchAuthSubaccountJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAuthSubaccountResponse, error) {
	rsp, err := c.PatchAuthSubaccount(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAuthSubaccountResponse(rsp)
}

// PostAuthSubaccountPacksWithBodyWithResponse request with arbitrary body returning *PostAuthSubaccountPacksResponse
func (c *ClientWithResponses) PostAuthSubaccountPacksWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthSubaccountPacksResponse, error) {
	rsp, err := c.PostAuthSubaccountPacksWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthSubaccountPacksResponse(rsp)
}

func (c *ClientWithResponses) PostAuthSubaccountPacksWithResponse(ctx context.Context, pk string, body PostAuthSubaccountPacksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthSubaccountPacksResponse, error) {
	rsp, err := c.PostAuthSubaccountPacks(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthSubaccountPacksResponse(rsp)
}

// PostValidateMagicLinkWithResponse request returning *PostValidateMagicLinkResponse
func (c *ClientWithResponses) PostValidateMagicLinkWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostValidateMagicLinkResponse, error) {
	rsp, err := c.PostValidateMagicLink(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostValidateMagicLinkResponse(rsp)
}

// GetServicetaglistWithResponse request returning *GetServicetaglistResponse
func (c *ClientWithResponses) GetServicetaglistWithResponse(ctx context.Context, params *GetServicetaglistParams, reqEditors ...RequestEditorFn) (*GetServicetaglistResponse, error) {
	rsp, err := c.GetServicetaglist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServicetaglistResponse(rsp)
}

// PostServicetaglistWithBodyWithResponse request with arbitrary body returning *PostServicetaglistResponse
func (c *ClientWithResponses) PostServicetaglistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServicetaglistResponse, error) {
	rsp, err := c.PostServicetaglistWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServicetaglistResponse(rsp)
}

func (c *ClientWithResponses) PostServicetaglistWithResponse(ctx context.Context, body PostServicetaglistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServicetaglistResponse, error) {
	rsp, err := c.PostServicetaglist(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServicetaglistResponse(rsp)
}

// DeleteServiceTagDetailWithResponse request returning *DeleteServiceTagDetailResponse
func (c *ClientWithResponses) DeleteServiceTagDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteServiceTagDetailResponse, error) {
	rsp, err := c.DeleteServiceTagDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServiceTagDetailResponse(rsp)
}

// GetServiceTagDetailWithResponse request returning *GetServiceTagDetailResponse
func (c *ClientWithResponses) GetServiceTagDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetServiceTagDetailResponse, error) {
	rsp, err := c.GetServiceTagDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceTagDetailResponse(rsp)
}

// PatchServiceTagDetailWithBodyWithResponse request with arbitrary body returning *PatchServiceTagDetailResponse
func (c *ClientWithResponses) PatchServiceTagDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceTagDetailResponse, error) {
	rsp, err := c.PatchServiceTagDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceTagDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceTagDetailWithResponse(ctx context.Context, pk string, body PatchServiceTagDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceTagDetailResponse, error) {
	rsp, err := c.PatchServiceTagDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceTagDetailResponse(rsp)
}

// PutServiceTagDetailWithBodyWithResponse request with arbitrary body returning *PutServiceTagDetailResponse
func (c *ClientWithResponses) PutServiceTagDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutServiceTagDetailResponse, error) {
	rsp, err := c.PutServiceTagDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutServiceTagDetailResponse(rsp)
}

func (c *ClientWithResponses) PutServiceTagDetailWithResponse(ctx context.Context, pk string, body PutServiceTagDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutServiceTagDetailResponse, error) {
	rsp, err := c.PutServiceTagDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutServiceTagDetailResponse(rsp)
}

// GetServicelistWithResponse request returning *GetServicelistResponse
func (c *ClientWithResponses) GetServicelistWithResponse(ctx context.Context, params *GetServicelistParams, reqEditors ...RequestEditorFn) (*GetServicelistResponse, error) {
	rsp, err := c.GetServicelist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServicelistResponse(rsp)
}

// PostServiceCreateApiWithBodyWithResponse request with arbitrary body returning *PostServiceCreateApiResponse
func (c *ClientWithResponses) PostServiceCreateApiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateApiResponse, error) {
	rsp, err := c.PostServiceCreateApiWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateApiResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateApiWithResponse(ctx context.Context, body PostServiceCreateApiJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateApiResponse, error) {
	rsp, err := c.PostServiceCreateApi(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateApiResponse(rsp)
}

// PostServiceCreateBlacklistWithBodyWithResponse request with arbitrary body returning *PostServiceCreateBlacklistResponse
func (c *ClientWithResponses) PostServiceCreateBlacklistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateBlacklistResponse, error) {
	rsp, err := c.PostServiceCreateBlacklistWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateBlacklistResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateBlacklistWithResponse(ctx context.Context, body PostServiceCreateBlacklistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateBlacklistResponse, error) {
	rsp, err := c.PostServiceCreateBlacklist(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateBlacklistResponse(rsp)
}

// PostServiceCreateDnsWithBodyWithResponse request with arbitrary body returning *PostServiceCreateDnsResponse
func (c *ClientWithResponses) PostServiceCreateDnsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateDnsResponse, error) {
	rsp, err := c.PostServiceCreateDnsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateDnsResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateDnsWithResponse(ctx context.Context, body PostServiceCreateDnsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateDnsResponse, error) {
	rsp, err := c.PostServiceCreateDns(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateDnsResponse(rsp)
}

// PostServiceCreateGroupWithBodyWithResponse request with arbitrary body returning *PostServiceCreateGroupResponse
func (c *ClientWithResponses) PostServiceCreateGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateGroupResponse, error) {
	rsp, err := c.PostServiceCreateGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateGroupResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateGroupWithResponse(ctx context.Context, body PostServiceCreateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateGroupResponse, error) {
	rsp, err := c.PostServiceCreateGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateGroupResponse(rsp)
}

// PostServiceCreateHeartbeatWithBodyWithResponse request with arbitrary body returning *PostServiceCreateHeartbeatResponse
func (c *ClientWithResponses) PostServiceCreateHeartbeatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateHeartbeatResponse, error) {
	rsp, err := c.PostServiceCreateHeartbeatWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateHeartbeatResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateHeartbeatWithResponse(ctx context.Context, body PostServiceCreateHeartbeatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateHeartbeatResponse, error) {
	rsp, err := c.PostServiceCreateHeartbeat(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateHeartbeatResponse(rsp)
}

// PostServiceCreateHttpWithBodyWithResponse request with arbitrary body returning *PostServiceCreateHttpResponse
func (c *ClientWithResponses) PostServiceCreateHttpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateHttpResponse, error) {
	rsp, err := c.PostServiceCreateHttpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateHttpResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateHttpWithResponse(ctx context.Context, body PostServiceCreateHttpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateHttpResponse, error) {
	rsp, err := c.PostServiceCreateHttp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateHttpResponse(rsp)
}

// PostServiceCreateIcmpWithBodyWithResponse request with arbitrary body returning *PostServiceCreateIcmpResponse
func (c *ClientWithResponses) PostServiceCreateIcmpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateIcmpResponse, error) {
	rsp, err := c.PostServiceCreateIcmpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateIcmpResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateIcmpWithResponse(ctx context.Context, body PostServiceCreateIcmpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateIcmpResponse, error) {
	rsp, err := c.PostServiceCreateIcmp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateIcmpResponse(rsp)
}

// PostServiceCreateImapWithBodyWithResponse request with arbitrary body returning *PostServiceCreateImapResponse
func (c *ClientWithResponses) PostServiceCreateImapWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateImapResponse, error) {
	rsp, err := c.PostServiceCreateImapWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateImapResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateImapWithResponse(ctx context.Context, body PostServiceCreateImapJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateImapResponse, error) {
	rsp, err := c.PostServiceCreateImap(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateImapResponse(rsp)
}

// PostServiceCreateMalwareWithBodyWithResponse request with arbitrary body returning *PostServiceCreateMalwareResponse
func (c *ClientWithResponses) PostServiceCreateMalwareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateMalwareResponse, error) {
	rsp, err := c.PostServiceCreateMalwareWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateMalwareResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateMalwareWithResponse(ctx context.Context, body PostServiceCreateMalwareJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateMalwareResponse, error) {
	rsp, err := c.PostServiceCreateMalware(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateMalwareResponse(rsp)
}

// PostServiceCreateNtpWithBodyWithResponse request with arbitrary body returning *PostServiceCreateNtpResponse
func (c *ClientWithResponses) PostServiceCreateNtpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateNtpResponse, error) {
	rsp, err := c.PostServiceCreateNtpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateNtpResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateNtpWithResponse(ctx context.Context, body PostServiceCreateNtpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateNtpResponse, error) {
	rsp, err := c.PostServiceCreateNtp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateNtpResponse(rsp)
}

// PostServiceCreatePopWithBodyWithResponse request with arbitrary body returning *PostServiceCreatePopResponse
func (c *ClientWithResponses) PostServiceCreatePopWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreatePopResponse, error) {
	rsp, err := c.PostServiceCreatePopWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreatePopResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreatePopWithResponse(ctx context.Context, body PostServiceCreatePopJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreatePopResponse, error) {
	rsp, err := c.PostServiceCreatePop(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreatePopResponse(rsp)
}

// PostServiceCreateRumWithBodyWithResponse request with arbitrary body returning *PostServiceCreateRumResponse
func (c *ClientWithResponses) PostServiceCreateRumWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateRumResponse, error) {
	rsp, err := c.PostServiceCreateRumWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateRumResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateRumWithResponse(ctx context.Context, body PostServiceCreateRumJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateRumResponse, error) {
	rsp, err := c.PostServiceCreateRum(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateRumResponse(rsp)
}

// PostServiceCreateRum2WithBodyWithResponse request with arbitrary body returning *PostServiceCreateRum2Response
func (c *ClientWithResponses) PostServiceCreateRum2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateRum2Response, error) {
	rsp, err := c.PostServiceCreateRum2WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateRum2Response(rsp)
}

func (c *ClientWithResponses) PostServiceCreateRum2WithResponse(ctx context.Context, body PostServiceCreateRum2JSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateRum2Response, error) {
	rsp, err := c.PostServiceCreateRum2(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateRum2Response(rsp)
}

// PostServiceCreateSmtpWithBodyWithResponse request with arbitrary body returning *PostServiceCreateSmtpResponse
func (c *ClientWithResponses) PostServiceCreateSmtpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateSmtpResponse, error) {
	rsp, err := c.PostServiceCreateSmtpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateSmtpResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateSmtpWithResponse(ctx context.Context, body PostServiceCreateSmtpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateSmtpResponse, error) {
	rsp, err := c.PostServiceCreateSmtp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateSmtpResponse(rsp)
}

// PostServiceCreateSshWithBodyWithResponse request with arbitrary body returning *PostServiceCreateSshResponse
func (c *ClientWithResponses) PostServiceCreateSshWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateSshResponse, error) {
	rsp, err := c.PostServiceCreateSshWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateSshResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateSshWithResponse(ctx context.Context, body PostServiceCreateSshJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateSshResponse, error) {
	rsp, err := c.PostServiceCreateSsh(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateSshResponse(rsp)
}

// PostServiceCreateSslCertWithBodyWithResponse request with arbitrary body returning *PostServiceCreateSslCertResponse
func (c *ClientWithResponses) PostServiceCreateSslCertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateSslCertResponse, error) {
	rsp, err := c.PostServiceCreateSslCertWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateSslCertResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateSslCertWithResponse(ctx context.Context, body PostServiceCreateSslCertJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateSslCertResponse, error) {
	rsp, err := c.PostServiceCreateSslCert(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateSslCertResponse(rsp)
}

// PostServiceCreateTcpWithBodyWithResponse request with arbitrary body returning *PostServiceCreateTcpResponse
func (c *ClientWithResponses) PostServiceCreateTcpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateTcpResponse, error) {
	rsp, err := c.PostServiceCreateTcpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateTcpResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateTcpWithResponse(ctx context.Context, body PostServiceCreateTcpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateTcpResponse, error) {
	rsp, err := c.PostServiceCreateTcp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateTcpResponse(rsp)
}

// PostServiceCreateTransactionWithBodyWithResponse request with arbitrary body returning *PostServiceCreateTransactionResponse
func (c *ClientWithResponses) PostServiceCreateTransactionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateTransactionResponse, error) {
	rsp, err := c.PostServiceCreateTransactionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateTransactionResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateTransactionWithResponse(ctx context.Context, body PostServiceCreateTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateTransactionResponse, error) {
	rsp, err := c.PostServiceCreateTransaction(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateTransactionResponse(rsp)
}

// PostServiceCreateUdpWithBodyWithResponse request with arbitrary body returning *PostServiceCreateUdpResponse
func (c *ClientWithResponses) PostServiceCreateUdpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateUdpResponse, error) {
	rsp, err := c.PostServiceCreateUdpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateUdpResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateUdpWithResponse(ctx context.Context, body PostServiceCreateUdpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateUdpResponse, error) {
	rsp, err := c.PostServiceCreateUdp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateUdpResponse(rsp)
}

// PostServiceCreateWebhookWithBodyWithResponse request with arbitrary body returning *PostServiceCreateWebhookResponse
func (c *ClientWithResponses) PostServiceCreateWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateWebhookResponse, error) {
	rsp, err := c.PostServiceCreateWebhookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateWebhookResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateWebhookWithResponse(ctx context.Context, body PostServiceCreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateWebhookResponse, error) {
	rsp, err := c.PostServiceCreateWebhook(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateWebhookResponse(rsp)
}

// PostServiceCreateWhoisWithBodyWithResponse request with arbitrary body returning *PostServiceCreateWhoisResponse
func (c *ClientWithResponses) PostServiceCreateWhoisWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateWhoisResponse, error) {
	rsp, err := c.PostServiceCreateWhoisWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateWhoisResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateWhoisWithResponse(ctx context.Context, body PostServiceCreateWhoisJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateWhoisResponse, error) {
	rsp, err := c.PostServiceCreateWhois(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateWhoisResponse(rsp)
}

// PatchServiceBulkEscalationsWithBodyWithResponse request with arbitrary body returning *PatchServiceBulkEscalationsResponse
func (c *ClientWithResponses) PatchServiceBulkEscalationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceBulkEscalationsResponse, error) {
	rsp, err := c.PatchServiceBulkEscalationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceBulkEscalationsResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceBulkEscalationsWithResponse(ctx context.Context, body PatchServiceBulkEscalationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceBulkEscalationsResponse, error) {
	rsp, err := c.PatchServiceBulkEscalations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceBulkEscalationsResponse(rsp)
}

// PatchServiceBulkMaintenanceWithBodyWithResponse request with arbitrary body returning *PatchServiceBulkMaintenanceResponse
func (c *ClientWithResponses) PatchServiceBulkMaintenanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceBulkMaintenanceResponse, error) {
	rsp, err := c.PatchServiceBulkMaintenanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceBulkMaintenanceResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceBulkMaintenanceWithResponse(ctx context.Context, body PatchServiceBulkMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceBulkMaintenanceResponse, error) {
	rsp, err := c.PatchServiceBulkMaintenance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceBulkMaintenanceResponse(rsp)
}

// PatchServiceBulkPauseWithBodyWithResponse request with arbitrary body returning *PatchServiceBulkPauseResponse
func (c *ClientWithResponses) PatchServiceBulkPauseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceBulkPauseResponse, error) {
	rsp, err := c.PatchServiceBulkPauseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceBulkPauseResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceBulkPauseWithResponse(ctx context.Context, body PatchServiceBulkPauseJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceBulkPauseResponse, error) {
	rsp, err := c.PatchServiceBulkPause(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceBulkPauseResponse(rsp)
}

// PatchServiceBulkResumeWithBodyWithResponse request with arbitrary body returning *PatchServiceBulkResumeResponse
func (c *ClientWithResponses) PatchServiceBulkResumeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceBulkResumeResponse, error) {
	rsp, err := c.PatchServiceBulkResumeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceBulkResumeResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceBulkResumeWithResponse(ctx context.Context, body PatchServiceBulkResumeJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceBulkResumeResponse, error) {
	rsp, err := c.PatchServiceBulkResume(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceBulkResumeResponse(rsp)
}

// GetServiceBulkStatsWithResponse request returning *GetServiceBulkStatsResponse
func (c *ClientWithResponses) GetServiceBulkStatsWithResponse(ctx context.Context, params *GetServiceBulkStatsParams, reqEditors ...RequestEditorFn) (*GetServiceBulkStatsResponse, error) {
	rsp, err := c.GetServiceBulkStats(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceBulkStatsResponse(rsp)
}

// PatchServiceBulkUpdateWithBodyWithResponse request with arbitrary body returning *PatchServiceBulkUpdateResponse
func (c *ClientWithResponses) PatchServiceBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceBulkUpdateResponse, error) {
	rsp, err := c.PatchServiceBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceBulkUpdateWithResponse(ctx context.Context, body PatchServiceBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceBulkUpdateResponse, error) {
	rsp, err := c.PatchServiceBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceBulkUpdateResponse(rsp)
}

// GetServiceShowServiceDefsWithResponse request returning *GetServiceShowServiceDefsResponse
func (c *ClientWithResponses) GetServiceShowServiceDefsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServiceShowServiceDefsResponse, error) {
	rsp, err := c.GetServiceShowServiceDefs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceShowServiceDefsResponse(rsp)
}

// GetServiceShowLocationsWithResponse request returning *GetServiceShowLocationsResponse
func (c *ClientWithResponses) GetServiceShowLocationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServiceShowLocationsResponse, error) {
	rsp, err := c.GetServiceShowLocations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceShowLocationsResponse(rsp)
}

// DeleteServiceDetailWithResponse request returning *DeleteServiceDetailResponse
func (c *ClientWithResponses) DeleteServiceDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteServiceDetailResponse, error) {
	rsp, err := c.DeleteServiceDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServiceDetailResponse(rsp)
}

// GetServiceDetailWithResponse request returning *GetServiceDetailResponse
func (c *ClientWithResponses) GetServiceDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetServiceDetailResponse, error) {
	rsp, err := c.GetServiceDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceDetailResponse(rsp)
}

// PatchServiceDetailWithBodyWithResponse request with arbitrary body returning *PatchServiceDetailResponse
func (c *ClientWithResponses) PatchServiceDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceDetailResponse, error) {
	rsp, err := c.PatchServiceDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceDetailWithResponse(ctx context.Context, pk string, body PatchServiceDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceDetailResponse, error) {
	rsp, err := c.PatchServiceDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceDetailResponse(rsp)
}

// PutServiceDetailWithBodyWithResponse request with arbitrary body returning *PutServiceDetailResponse
func (c *ClientWithResponses) PutServiceDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutServiceDetailResponse, error) {
	rsp, err := c.PutServiceDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutServiceDetailResponse(rsp)
}

func (c *ClientWithResponses) PutServiceDetailWithResponse(ctx context.Context, pk string, body PutServiceDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutServiceDetailResponse, error) {
	rsp, err := c.PutServiceDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutServiceDetailResponse(rsp)
}

// PatchServiceAddContactGroupsWithBodyWithResponse request with arbitrary body returning *PatchServiceAddContactGroupsResponse
func (c *ClientWithResponses) PatchServiceAddContactGroupsWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceAddContactGroupsResponse, error) {
	rsp, err := c.PatchServiceAddContactGroupsWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceAddContactGroupsResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceAddContactGroupsWithResponse(ctx context.Context, pk string, body PatchServiceAddContactGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceAddContactGroupsResponse, error) {
	rsp, err := c.PatchServiceAddContactGroups(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceAddContactGroupsResponse(rsp)
}

// PatchServiceAddLocationsWithBodyWithResponse request with arbitrary body returning *PatchServiceAddLocationsResponse
func (c *ClientWithResponses) PatchServiceAddLocationsWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceAddLocationsResponse, error) {
	rsp, err := c.PatchServiceAddLocationsWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceAddLocationsResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceAddLocationsWithResponse(ctx context.Context, pk string, body PatchServiceAddLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceAddLocationsResponse, error) {
	rsp, err := c.PatchServiceAddLocations(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceAddLocationsResponse(rsp)
}

// PatchServiceAddTagsWithBodyWithResponse request with arbitrary body returning *PatchServiceAddTagsResponse
func (c *ClientWithResponses) PatchServiceAddTagsWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceAddTagsResponse, error) {
	rsp, err := c.PatchServiceAddTagsWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceAddTagsResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceAddTagsWithResponse(ctx context.Context, pk string, body PatchServiceAddTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceAddTagsResponse, error) {
	rsp, err := c.PatchServiceAddTags(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceAddTagsResponse(rsp)
}

// GetServiceAnalysisWithResponse request returning *GetServiceAnalysisResponse
func (c *ClientWithResponses) GetServiceAnalysisWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetServiceAnalysisResponse, error) {
	rsp, err := c.GetServiceAnalysis(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceAnalysisResponse(rsp)
}

// GetServiceCurrentStatusWithResponse request returning *GetServiceCurrentStatusResponse
func (c *ClientWithResponses) GetServiceCurrentStatusWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetServiceCurrentStatusResponse, error) {
	rsp, err := c.GetServiceCurrentStatus(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceCurrentStatusResponse(rsp)
}

// PatchServiceSetEscalationsWithBodyWithResponse request with arbitrary body returning *PatchServiceSetEscalationsResponse
func (c *ClientWithResponses) PatchServiceSetEscalationsWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceSetEscalationsResponse, error) {
	rsp, err := c.PatchServiceSetEscalationsWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceSetEscalationsResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceSetEscalationsWithResponse(ctx context.Context, pk string, body PatchServiceSetEscalationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceSetEscalationsResponse, error) {
	rsp, err := c.PatchServiceSetEscalations(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceSetEscalationsResponse(rsp)
}

// PatchServiceSetMaintenanceWithBodyWithResponse request with arbitrary body returning *PatchServiceSetMaintenanceResponse
func (c *ClientWithResponses) PatchServiceSetMaintenanceWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceSetMaintenanceResponse, error) {
	rsp, err := c.PatchServiceSetMaintenanceWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceSetMaintenanceResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceSetMaintenanceWithResponse(ctx context.Context, pk string, body PatchServiceSetMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceSetMaintenanceResponse, error) {
	rsp, err := c.PatchServiceSetMaintenance(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceSetMaintenanceResponse(rsp)
}

// PostServicePauseWithResponse request returning *PostServicePauseResponse
func (c *ClientWithResponses) PostServicePauseWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*PostServicePauseResponse, error) {
	rsp, err := c.PostServicePause(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServicePauseResponse(rsp)
}

// PatchServiceReplaceContactGroupsWithBodyWithResponse request with arbitrary body returning *PatchServiceReplaceContactGroupsResponse
func (c *ClientWithResponses) PatchServiceReplaceContactGroupsWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceReplaceContactGroupsResponse, error) {
	rsp, err := c.PatchServiceReplaceContactGroupsWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceReplaceContactGroupsResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceReplaceContactGroupsWithResponse(ctx context.Context, pk string, body PatchServiceReplaceContactGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceReplaceContactGroupsResponse, error) {
	rsp, err := c.PatchServiceReplaceContactGroups(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceReplaceContactGroupsResponse(rsp)
}

// PatchServiceReplaceLocationsWithBodyWithResponse request with arbitrary body returning *PatchServiceReplaceLocationsResponse
func (c *ClientWithResponses) PatchServiceReplaceLocationsWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceReplaceLocationsResponse, error) {
	rsp, err := c.PatchServiceReplaceLocationsWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceReplaceLocationsResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceReplaceLocationsWithResponse(ctx context.Context, pk string, body PatchServiceReplaceLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceReplaceLocationsResponse, error) {
	rsp, err := c.PatchServiceReplaceLocations(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceReplaceLocationsResponse(rsp)
}

// PatchServiceReplaceTagsWithBodyWithResponse request with arbitrary body returning *PatchServiceReplaceTagsResponse
func (c *ClientWithResponses) PatchServiceReplaceTagsWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceReplaceTagsResponse, error) {
	rsp, err := c.PatchServiceReplaceTagsWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceReplaceTagsResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceReplaceTagsWithResponse(ctx context.Context, pk string, body PatchServiceReplaceTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceReplaceTagsResponse, error) {
	rsp, err := c.PatchServiceReplaceTags(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceReplaceTagsResponse(rsp)
}

// GetServiceResponseTimeDatapointsWithResponse request returning *GetServiceResponseTimeDatapointsResponse
func (c *ClientWithResponses) GetServiceResponseTimeDatapointsWithResponse(ctx context.Context, pk string, params *GetServiceResponseTimeDatapointsParams, reqEditors ...RequestEditorFn) (*GetServiceResponseTimeDatapointsResponse, error) {
	rsp, err := c.GetServiceResponseTimeDatapoints(ctx, pk, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceResponseTimeDatapointsResponse(rsp)
}

// PostServiceResumeWithResponse request returning *PostServiceResumeResponse
func (c *ClientWithResponses) PostServiceResumeWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*PostServiceResumeResponse, error) {
	rsp, err := c.PostServiceResume(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceResumeResponse(rsp)
}

// GetServiceStatsWithResponse request returning *GetServiceStatsResponse
func (c *ClientWithResponses) GetServiceStatsWithResponse(ctx context.Context, pk string, params *GetServiceStatsParams, reqEditors ...RequestEditorFn) (*GetServiceStatsResponse, error) {
	rsp, err := c.GetServiceStats(ctx, pk, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceStatsResponse(rsp)
}

// GetContactgrouplistWithResponse request returning *GetContactgrouplistResponse
func (c *ClientWithResponses) GetContactgrouplistWithResponse(ctx context.Context, params *GetContactgrouplistParams, reqEditors ...RequestEditorFn) (*GetContactgrouplistResponse, error) {
	rsp, err := c.GetContactgrouplist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactgrouplistResponse(rsp)
}

// PostContactgrouplistWithBodyWithResponse request with arbitrary body returning *PostContactgrouplistResponse
func (c *ClientWithResponses) PostContactgrouplistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContactgrouplistResponse, error) {
	rsp, err := c.PostContactgrouplistWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContactgrouplistResponse(rsp)
}

func (c *ClientWithResponses) PostContactgrouplistWithResponse(ctx context.Context, body PostContactgrouplistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContactgrouplistResponse, error) {
	rsp, err := c.PostContactgrouplist(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContactgrouplistResponse(rsp)
}

// DeleteContactGroupDetailWithResponse request returning *DeleteContactGroupDetailResponse
func (c *ClientWithResponses) DeleteContactGroupDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteContactGroupDetailResponse, error) {
	rsp, err := c.DeleteContactGroupDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteContactGroupDetailResponse(rsp)
}

// GetContactGroupDetailWithResponse request returning *GetContactGroupDetailResponse
func (c *ClientWithResponses) GetContactGroupDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetContactGroupDetailResponse, error) {
	rsp, err := c.GetContactGroupDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactGroupDetailResponse(rsp)
}

// PatchContactGroupDetailWithBodyWithResponse request with arbitrary body returning *PatchContactGroupDetailResponse
func (c *ClientWithResponses) PatchContactGroupDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchContactGroupDetailResponse, error) {
	rsp, err := c.PatchContactGroupDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchContactGroupDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchContactGroupDetailWithResponse(ctx context.Context, pk string, body PatchContactGroupDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchContactGroupDetailResponse, error) {
	rsp, err := c.PatchContactGroupDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchContactGroupDetailResponse(rsp)
}

// PutContactGroupDetailWithBodyWithResponse request with arbitrary body returning *PutContactGroupDetailResponse
func (c *ClientWithResponses) PutContactGroupDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutContactGroupDetailResponse, error) {
	rsp, err := c.PutContactGroupDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutContactGroupDetailResponse(rsp)
}

func (c *ClientWithResponses) PutContactGroupDetailWithResponse(ctx context.Context, pk string, body PutContactGroupDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutContactGroupDetailResponse, error) {
	rsp, err := c.PutContactGroupDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutContactGroupDetailResponse(rsp)
}

// PatchContactGroupSetOnCallHoursWithBodyWithResponse request with arbitrary body returning *PatchContactGroupSetOnCallHoursResponse
func (c *ClientWithResponses) PatchContactGroupSetOnCallHoursWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchContactGroupSetOnCallHoursResponse, error) {
	rsp, err := c.PatchContactGroupSetOnCallHoursWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchContactGroupSetOnCallHoursResponse(rsp)
}

func (c *ClientWithResponses) PatchContactGroupSetOnCallHoursWithResponse(ctx context.Context, pk string, body PatchContactGroupSetOnCallHoursJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchContactGroupSetOnCallHoursResponse, error) {
	rsp, err := c.PatchContactGroupSetOnCallHours(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchContactGroupSetOnCallHoursResponse(rsp)
}

// GetDashboardlistWithResponse request returning *GetDashboardlistResponse
func (c *ClientWithResponses) GetDashboardlistWithResponse(ctx context.Context, params *GetDashboardlistParams, reqEditors ...RequestEditorFn) (*GetDashboardlistResponse, error) {
	rsp, err := c.GetDashboardlist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardlistResponse(rsp)
}

// PostDashboardlistWithBodyWithResponse request with arbitrary body returning *PostDashboardlistResponse
func (c *ClientWithResponses) PostDashboardlistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDashboardlistResponse, error) {
	rsp, err := c.PostDashboardlistWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDashboardlistResponse(rsp)
}

func (c *ClientWithResponses) PostDashboardlistWithResponse(ctx context.Context, body PostDashboardlistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDashboardlistResponse, error) {
	rsp, err := c.PostDashboardlist(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDashboardlistResponse(rsp)
}

// GetDashboardDefaultWithResponse request returning *GetDashboardDefaultResponse
func (c *ClientWithResponses) GetDashboardDefaultWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDashboardDefaultResponse, error) {
	rsp, err := c.GetDashboardDefault(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardDefaultResponse(rsp)
}

// DeleteDashboardDetailWithResponse request returning *DeleteDashboardDetailResponse
func (c *ClientWithResponses) DeleteDashboardDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteDashboardDetailResponse, error) {
	rsp, err := c.DeleteDashboardDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDashboardDetailResponse(rsp)
}

// GetDashboardDetailWithResponse request returning *GetDashboardDetailResponse
func (c *ClientWithResponses) GetDashboardDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetDashboardDetailResponse, error) {
	rsp, err := c.GetDashboardDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardDetailResponse(rsp)
}

// PatchDashboardDetailWithBodyWithResponse request with arbitrary body returning *PatchDashboardDetailResponse
func (c *ClientWithResponses) PatchDashboardDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchDashboardDetailResponse, error) {
	rsp, err := c.PatchDashboardDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchDashboardDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchDashboardDetailWithResponse(ctx context.Context, pk string, body PatchDashboardDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchDashboardDetailResponse, error) {
	rsp, err := c.PatchDashboardDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchDashboardDetailResponse(rsp)
}

// PutDashboardDetailWithBodyWithResponse request with arbitrary body returning *PutDashboardDetailResponse
func (c *ClientWithResponses) PutDashboardDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDashboardDetailResponse, error) {
	rsp, err := c.PutDashboardDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDashboardDetailResponse(rsp)
}

func (c *ClientWithResponses) PutDashboardDetailWithResponse(ctx context.Context, pk string, body PutDashboardDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDashboardDetailResponse, error) {
	rsp, err := c.PutDashboardDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDashboardDetailResponse(rsp)
}

// GetDashboardStatsWithResponse request returning *GetDashboardStatsResponse
func (c *ClientWithResponses) GetDashboardStatsWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetDashboardStatsResponse, error) {
	rsp, err := c.GetDashboardStats(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardStatsResponse(rsp)
}

// GetIntegrationlistWithResponse request returning *GetIntegrationlistResponse
func (c *ClientWithResponses) GetIntegrationlistWithResponse(ctx context.Context, params *GetIntegrationlistParams, reqEditors ...RequestEditorFn) (*GetIntegrationlistResponse, error) {
	rsp, err := c.GetIntegrationlist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIntegrationlistResponse(rsp)
}

// PostIntegrationCreateCachetWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateCachetResponse
func (c *ClientWithResponses) PostIntegrationCreateCachetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateCachetResponse, error) {
	rsp, err := c.PostIntegrationCreateCachetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateCachetResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateCachetWithResponse(ctx context.Context, body PostIntegrationCreateCachetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateCachetResponse, error) {
	rsp, err := c.PostIntegrationCreateCachet(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateCachetResponse(rsp)
}

// PostIntegrationCreateDatadogWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateDatadogResponse
func (c *ClientWithResponses) PostIntegrationCreateDatadogWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateDatadogResponse, error) {
	rsp, err := c.PostIntegrationCreateDatadogWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateDatadogResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateDatadogWithResponse(ctx context.Context, body PostIntegrationCreateDatadogJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateDatadogResponse, error) {
	rsp, err := c.PostIntegrationCreateDatadog(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateDatadogResponse(rsp)
}

// PostIntegrationCreateGeckoboardWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateGeckoboardResponse
func (c *ClientWithResponses) PostIntegrationCreateGeckoboardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateGeckoboardResponse, error) {
	rsp, err := c.PostIntegrationCreateGeckoboardWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateGeckoboardResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateGeckoboardWithResponse(ctx context.Context, body PostIntegrationCreateGeckoboardJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateGeckoboardResponse, error) {
	rsp, err := c.PostIntegrationCreateGeckoboard(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateGeckoboardResponse(rsp)
}

// PostIntegrationCreateJiraservicedeskWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateJiraservicedeskResponse
func (c *ClientWithResponses) PostIntegrationCreateJiraservicedeskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateJiraservicedeskResponse, error) {
	rsp, err := c.PostIntegrationCreateJiraservicedeskWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateJiraservicedeskResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateJiraservicedeskWithResponse(ctx context.Context, body PostIntegrationCreateJiraservicedeskJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateJiraservicedeskResponse, error) {
	rsp, err := c.PostIntegrationCreateJiraservicedesk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateJiraservicedeskResponse(rsp)
}

// PostIntegrationCreateKlipfolioWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateKlipfolioResponse
func (c *ClientWithResponses) PostIntegrationCreateKlipfolioWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateKlipfolioResponse, error) {
	rsp, err := c.PostIntegrationCreateKlipfolioWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateKlipfolioResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateKlipfolioWithResponse(ctx context.Context, body PostIntegrationCreateKlipfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateKlipfolioResponse, error) {
	rsp, err := c.PostIntegrationCreateKlipfolio(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateKlipfolioResponse(rsp)
}

// PostIntegrationCreateLibratoWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateLibratoResponse
func (c *ClientWithResponses) PostIntegrationCreateLibratoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateLibratoResponse, error) {
	rsp, err := c.PostIntegrationCreateLibratoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateLibratoResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateLibratoWithResponse(ctx context.Context, body PostIntegrationCreateLibratoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateLibratoResponse, error) {
	rsp, err := c.PostIntegrationCreateLibrato(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateLibratoResponse(rsp)
}

// PostIntegrationCreateMicrosoftTeamsWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateMicrosoftTeamsResponse
func (c *ClientWithResponses) PostIntegrationCreateMicrosoftTeamsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateMicrosoftTeamsResponse, error) {
	rsp, err := c.PostIntegrationCreateMicrosoftTeamsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateMicrosoftTeamsResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateMicrosoftTeamsWithResponse(ctx context.Context, body PostIntegrationCreateMicrosoftTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateMicrosoftTeamsResponse, error) {
	rsp, err := c.PostIntegrationCreateMicrosoftTeams(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateMicrosoftTeamsResponse(rsp)
}

// PostIntegrationCreateOpsgenieWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateOpsgenieResponse
func (c *ClientWithResponses) PostIntegrationCreateOpsgenieWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateOpsgenieResponse, error) {
	rsp, err := c.PostIntegrationCreateOpsgenieWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateOpsgenieResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateOpsgenieWithResponse(ctx context.Context, body PostIntegrationCreateOpsgenieJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateOpsgenieResponse, error) {
	rsp, err := c.PostIntegrationCreateOpsgenie(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateOpsgenieResponse(rsp)
}

// PostIntegrationCreatePagerdutyWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreatePagerdutyResponse
func (c *ClientWithResponses) PostIntegrationCreatePagerdutyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreatePagerdutyResponse, error) {
	rsp, err := c.PostIntegrationCreatePagerdutyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreatePagerdutyResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreatePagerdutyWithResponse(ctx context.Context, body PostIntegrationCreatePagerdutyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreatePagerdutyResponse, error) {
	rsp, err := c.PostIntegrationCreatePagerduty(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreatePagerdutyResponse(rsp)
}

// PostIntegrationCreatePushbulletWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreatePushbulletResponse
func (c *ClientWithResponses) PostIntegrationCreatePushbulletWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreatePushbulletResponse, error) {
	rsp, err := c.PostIntegrationCreatePushbulletWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreatePushbulletResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreatePushbulletWithResponse(ctx context.Context, body PostIntegrationCreatePushbulletJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreatePushbulletResponse, error) {
	rsp, err := c.PostIntegrationCreatePushbullet(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreatePushbulletResponse(rsp)
}

// PostIntegrationCreatePushoverWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreatePushoverResponse
func (c *ClientWithResponses) PostIntegrationCreatePushoverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreatePushoverResponse, error) {
	rsp, err := c.PostIntegrationCreatePushoverWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreatePushoverResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreatePushoverWithResponse(ctx context.Context, body PostIntegrationCreatePushoverJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreatePushoverResponse, error) {
	rsp, err := c.PostIntegrationCreatePushover(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreatePushoverResponse(rsp)
}

// PostIntegrationCreateSignifaiWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateSignifaiResponse
func (c *ClientWithResponses) PostIntegrationCreateSignifaiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateSignifaiResponse, error) {
	rsp, err := c.PostIntegrationCreateSignifaiWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateSignifaiResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateSignifaiWithResponse(ctx context.Context, body PostIntegrationCreateSignifaiJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateSignifaiResponse, error) {
	rsp, err := c.PostIntegrationCreateSignifai(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateSignifaiResponse(rsp)
}

// PostIntegrationCreateSlackWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateSlackResponse
func (c *ClientWithResponses) PostIntegrationCreateSlackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateSlackResponse, error) {
	rsp, err := c.PostIntegrationCreateSlackWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateSlackResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateSlackWithResponse(ctx context.Context, body PostIntegrationCreateSlackJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateSlackResponse, error) {
	rsp, err := c.PostIntegrationCreateSlack(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateSlackResponse(rsp)
}

// PostIntegrationCreateStatusWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateStatusResponse
func (c *ClientWithResponses) PostIntegrationCreateStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateStatusResponse, error) {
	rsp, err := c.PostIntegrationCreateStatusWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateStatusResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateStatusWithResponse(ctx context.Context, body PostIntegrationCreateStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateStatusResponse, error) {
	rsp, err := c.PostIntegrationCreateStatus(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateStatusResponse(rsp)
}

// PostIntegrationCreateStatuspageWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateStatuspageResponse
func (c *ClientWithResponses) PostIntegrationCreateStatuspageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateStatuspageResponse, error) {
	rsp, err := c.PostIntegrationCreateStatuspageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateStatuspageResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateStatuspageWithResponse(ctx context.Context, body PostIntegrationCreateStatuspageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateStatuspageResponse, error) {
	rsp, err := c.PostIntegrationCreateStatuspage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateStatuspageResponse(rsp)
}

// PostIntegrationCreateTwitterWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateTwitterResponse
func (c *ClientWithResponses) PostIntegrationCreateTwitterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateTwitterResponse, error) {
	rsp, err := c.PostIntegrationCreateTwitterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateTwitterResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateTwitterWithResponse(ctx context.Context, body PostIntegrationCreateTwitterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateTwitterResponse, error) {
	rsp, err := c.PostIntegrationCreateTwitter(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateTwitterResponse(rsp)
}

// PostIntegrationCreateVictoropsWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateVictoropsResponse
func (c *ClientWithResponses) PostIntegrationCreateVictoropsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateVictoropsResponse, error) {
	rsp, err := c.PostIntegrationCreateVictoropsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateVictoropsResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateVictoropsWithResponse(ctx context.Context, body PostIntegrationCreateVictoropsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateVictoropsResponse, error) {
	rsp, err := c.PostIntegrationCreateVictorops(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateVictoropsResponse(rsp)
}

// PostIntegrationCreateWavefrontWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateWavefrontResponse
func (c *ClientWithResponses) PostIntegrationCreateWavefrontWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateWavefrontResponse, error) {
	rsp, err := c.PostIntegrationCreateWavefrontWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateWavefrontResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateWavefrontWithResponse(ctx context.Context, body PostIntegrationCreateWavefrontJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateWavefrontResponse, error) {
	rsp, err := c.PostIntegrationCreateWavefront(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateWavefrontResponse(rsp)
}

// PostIntegrationCreateWebhookWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateWebhookResponse
func (c *ClientWithResponses) PostIntegrationCreateWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateWebhookResponse, error) {
	rsp, err := c.PostIntegrationCreateWebhookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateWebhookResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateWebhookWithResponse(ctx context.Context, body PostIntegrationCreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateWebhookResponse, error) {
	rsp, err := c.PostIntegrationCreateWebhook(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateWebhookResponse(rsp)
}

// PostIntegrationCreateZapierWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateZapierResponse
func (c *ClientWithResponses) PostIntegrationCreateZapierWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateZapierResponse, error) {
	rsp, err := c.PostIntegrationCreateZapierWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateZapierResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateZapierWithResponse(ctx context.Context, body PostIntegrationCreateZapierJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateZapierResponse, error) {
	rsp, err := c.PostIntegrationCreateZapier(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateZapierResponse(rsp)
}

// DeleteIntegrationDetailWithResponse request returning *DeleteIntegrationDetailResponse
func (c *ClientWithResponses) DeleteIntegrationDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteIntegrationDetailResponse, error) {
	rsp, err := c.DeleteIntegrationDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIntegrationDetailResponse(rsp)
}

// GetIntegrationDetailWithResponse request returning *GetIntegrationDetailResponse
func (c *ClientWithResponses) GetIntegrationDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetIntegrationDetailResponse, error) {
	rsp, err := c.GetIntegrationDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIntegrationDetailResponse(rsp)
}

// PatchIntegrationDetailWithBodyWithResponse request with arbitrary body returning *PatchIntegrationDetailResponse
func (c *ClientWithResponses) PatchIntegrationDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchIntegrationDetailResponse, error) {
	rsp, err := c.PatchIntegrationDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchIntegrationDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchIntegrationDetailWithResponse(ctx context.Context, pk string, body PatchIntegrationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchIntegrationDetailResponse, error) {
	rsp, err := c.PatchIntegrationDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchIntegrationDetailResponse(rsp)
}

// PutIntegrationDetailWithBodyWithResponse request with arbitrary body returning *PutIntegrationDetailResponse
func (c *ClientWithResponses) PutIntegrationDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIntegrationDetailResponse, error) {
	rsp, err := c.PutIntegrationDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIntegrationDetailResponse(rsp)
}

func (c *ClientWithResponses) PutIntegrationDetailWithResponse(ctx context.Context, pk string, body PutIntegrationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIntegrationDetailResponse, error) {
	rsp, err := c.PutIntegrationDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIntegrationDetailResponse(rsp)
}

// GetOutagelistWithResponse request returning *GetOutagelistResponse
func (c *ClientWithResponses) GetOutagelistWithResponse(ctx context.Context, params *GetOutagelistParams, reqEditors ...RequestEditorFn) (*GetOutagelistResponse, error) {
	rsp, err := c.GetOutagelist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOutagelistResponse(rsp)
}

// GetOutageDetailWithResponse request returning *GetOutageDetailResponse
func (c *ClientWithResponses) GetOutageDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetOutageDetailResponse, error) {
	rsp, err := c.GetOutageDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOutageDetailResponse(rsp)
}

// GetMonitoringServerListWithResponse request returning *GetMonitoringServerListResponse
func (c *ClientWithResponses) GetMonitoringServerListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMonitoringServerListResponse, error) {
	rsp, err := c.GetMonitoringServerList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMonitoringServerListResponse(rsp)
}

// GetPushnotificationlistWithResponse request returning *GetPushnotificationlistResponse
func (c *ClientWithResponses) GetPushnotificationlistWithResponse(ctx context.Context, params *GetPushnotificationlistParams, reqEditors ...RequestEditorFn) (*GetPushnotificationlistResponse, error) {
	rsp, err := c.GetPushnotificationlist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPushnotificationlistResponse(rsp)
}

// PostPushnotificationlistWithBodyWithResponse request with arbitrary body returning *PostPushnotificationlistResponse
func (c *ClientWithResponses) PostPushnotificationlistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPushnotificationlistResponse, error) {
	rsp, err := c.PostPushnotificationlistWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPushnotificationlistResponse(rsp)
}

func (c *ClientWithResponses) PostPushnotificationlistWithResponse(ctx context.Context, body PostPushnotificationlistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPushnotificationlistResponse, error) {
	rsp, err := c.PostPushnotificationlist(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPushnotificationlistResponse(rsp)
}

// DeletePushNotificationDetailWithResponse request returning *DeletePushNotificationDetailResponse
func (c *ClientWithResponses) DeletePushNotificationDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeletePushNotificationDetailResponse, error) {
	rsp, err := c.DeletePushNotificationDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePushNotificationDetailResponse(rsp)
}

// GetPushNotificationDetailWithResponse request returning *GetPushNotificationDetailResponse
func (c *ClientWithResponses) GetPushNotificationDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetPushNotificationDetailResponse, error) {
	rsp, err := c.GetPushNotificationDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPushNotificationDetailResponse(rsp)
}

// PatchPushNotificationDetailWithBodyWithResponse request with arbitrary body returning *PatchPushNotificationDetailResponse
func (c *ClientWithResponses) PatchPushNotificationDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPushNotificationDetailResponse, error) {
	rsp, err := c.PatchPushNotificationDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPushNotificationDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchPushNotificationDetailWithResponse(ctx context.Context, pk string, body PatchPushNotificationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPushNotificationDetailResponse, error) {
	rsp, err := c.PatchPushNotificationDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPushNotificationDetailResponse(rsp)
}

// PutPushNotificationDetailWithBodyWithResponse request with arbitrary body returning *PutPushNotificationDetailResponse
func (c *ClientWithResponses) PutPushNotificationDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPushNotificationDetailResponse, error) {
	rsp, err := c.PutPushNotificationDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPushNotificationDetailResponse(rsp)
}

func (c *ClientWithResponses) PutPushNotificationDetailWithResponse(ctx context.Context, pk string, body PutPushNotificationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPushNotificationDetailResponse, error) {
	rsp, err := c.PutPushNotificationDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPushNotificationDetailResponse(rsp)
}

// GetScheduledreportlistWithResponse request returning *GetScheduledreportlistResponse
func (c *ClientWithResponses) GetScheduledreportlistWithResponse(ctx context.Context, params *GetScheduledreportlistParams, reqEditors ...RequestEditorFn) (*GetScheduledreportlistResponse, error) {
	rsp, err := c.GetScheduledreportlist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScheduledreportlistResponse(rsp)
}

// PostScheduledreportlistWithBodyWithResponse request with arbitrary body returning *PostScheduledreportlistResponse
func (c *ClientWithResponses) PostScheduledreportlistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostScheduledreportlistResponse, error) {
	rsp, err := c.PostScheduledreportlistWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScheduledreportlistResponse(rsp)
}

func (c *ClientWithResponses) PostScheduledreportlistWithResponse(ctx context.Context, body PostScheduledreportlistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostScheduledreportlistResponse, error) {
	rsp, err := c.PostScheduledreportlist(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScheduledreportlistResponse(rsp)
}

// DeleteScheduledReportDetailWithResponse request returning *DeleteScheduledReportDetailResponse
func (c *ClientWithResponses) DeleteScheduledReportDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteScheduledReportDetailResponse, error) {
	rsp, err := c.DeleteScheduledReportDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteScheduledReportDetailResponse(rsp)
}

// GetScheduledReportDetailWithResponse request returning *GetScheduledReportDetailResponse
func (c *ClientWithResponses) GetScheduledReportDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetScheduledReportDetailResponse, error) {
	rsp, err := c.GetScheduledReportDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScheduledReportDetailResponse(rsp)
}

// PatchScheduledReportDetailWithBodyWithResponse request with arbitrary body returning *PatchScheduledReportDetailResponse
func (c *ClientWithResponses) PatchScheduledReportDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchScheduledReportDetailResponse, error) {
	rsp, err := c.PatchScheduledReportDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScheduledReportDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchScheduledReportDetailWithResponse(ctx context.Context, pk string, body PatchScheduledReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchScheduledReportDetailResponse, error) {
	rsp, err := c.PatchScheduledReportDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScheduledReportDetailResponse(rsp)
}

// PutScheduledReportDetailWithBodyWithResponse request with arbitrary body returning *PutScheduledReportDetailResponse
func (c *ClientWithResponses) PutScheduledReportDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutScheduledReportDetailResponse, error) {
	rsp, err := c.PutScheduledReportDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutScheduledReportDetailResponse(rsp)
}

func (c *ClientWithResponses) PutScheduledReportDetailWithResponse(ctx context.Context, pk string, body PutScheduledReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutScheduledReportDetailResponse, error) {
	rsp, err := c.PutScheduledReportDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutScheduledReportDetailResponse(rsp)
}

// GetSlareportlistWithResponse request returning *GetSlareportlistResponse
func (c *ClientWithResponses) GetSlareportlistWithResponse(ctx context.Context, params *GetSlareportlistParams, reqEditors ...RequestEditorFn) (*GetSlareportlistResponse, error) {
	rsp, err := c.GetSlareportlist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSlareportlistResponse(rsp)
}

// PostSlareportlistWithBodyWithResponse request with arbitrary body returning *PostSlareportlistResponse
func (c *ClientWithResponses) PostSlareportlistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSlareportlistResponse, error) {
	rsp, err := c.PostSlareportlistWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSlareportlistResponse(rsp)
}

func (c *ClientWithResponses) PostSlareportlistWithResponse(ctx context.Context, body PostSlareportlistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSlareportlistResponse, error) {
	rsp, err := c.PostSlareportlist(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSlareportlistResponse(rsp)
}

// DeleteSlaReportDetailWithResponse request returning *DeleteSlaReportDetailResponse
func (c *ClientWithResponses) DeleteSlaReportDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteSlaReportDetailResponse, error) {
	rsp, err := c.DeleteSlaReportDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSlaReportDetailResponse(rsp)
}

// GetSlaReportDetailWithResponse request returning *GetSlaReportDetailResponse
func (c *ClientWithResponses) GetSlaReportDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetSlaReportDetailResponse, error) {
	rsp, err := c.GetSlaReportDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSlaReportDetailResponse(rsp)
}

// PatchSlaReportDetailWithBodyWithResponse request with arbitrary body returning *PatchSlaReportDetailResponse
func (c *ClientWithResponses) PatchSlaReportDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSlaReportDetailResponse, error) {
	rsp, err := c.PatchSlaReportDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSlaReportDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchSlaReportDetailWithResponse(ctx context.Context, pk string, body PatchSlaReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSlaReportDetailResponse, error) {
	rsp, err := c.PatchSlaReportDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSlaReportDetailResponse(rsp)
}

// PutSlaReportDetailWithBodyWithResponse request with arbitrary body returning *PutSlaReportDetailResponse
func (c *ClientWithResponses) PutSlaReportDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSlaReportDetailResponse, error) {
	rsp, err := c.PutSlaReportDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSlaReportDetailResponse(rsp)
}

func (c *ClientWithResponses) PutSlaReportDetailWithResponse(ctx context.Context, pk string, body PutSlaReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSlaReportDetailResponse, error) {
	rsp, err := c.PutSlaReportDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSlaReportDetailResponse(rsp)
}

// GetSlaReportStatsWithResponse request returning *GetSlaReportStatsResponse
func (c *ClientWithResponses) GetSlaReportStatsWithResponse(ctx context.Context, pk string, params *GetSlaReportStatsParams, reqEditors ...RequestEditorFn) (*GetSlaReportStatsResponse, error) {
	rsp, err := c.GetSlaReportStats(ctx, pk, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSlaReportStatsResponse(rsp)
}

// GetStatuspagelistWithResponse request returning *GetStatuspagelistResponse
func (c *ClientWithResponses) GetStatuspagelistWithResponse(ctx context.Context, params *GetStatuspagelistParams, reqEditors ...RequestEditorFn) (*GetStatuspagelistResponse, error) {
	rsp, err := c.GetStatuspagelist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatuspagelistResponse(rsp)
}

// PostStatuspagelistWithBodyWithResponse request with arbitrary body returning *PostStatuspagelistResponse
func (c *ClientWithResponses) PostStatuspagelistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStatuspagelistResponse, error) {
	rsp, err := c.PostStatuspagelistWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStatuspagelistResponse(rsp)
}

func (c *ClientWithResponses) PostStatuspagelistWithResponse(ctx context.Context, body PostStatuspagelistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStatuspagelistResponse, error) {
	rsp, err := c.PostStatuspagelist(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStatuspagelistResponse(rsp)
}

// DeleteStatuspageDetailWithResponse request returning *DeleteStatuspageDetailResponse
func (c *ClientWithResponses) DeleteStatuspageDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteStatuspageDetailResponse, error) {
	rsp, err := c.DeleteStatuspageDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStatuspageDetailResponse(rsp)
}

// GetStatuspageDetailWithResponse request returning *GetStatuspageDetailResponse
func (c *ClientWithResponses) GetStatuspageDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetStatuspageDetailResponse, error) {
	rsp, err := c.GetStatuspageDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatuspageDetailResponse(rsp)
}

// PatchStatuspageDetailWithBodyWithResponse request with arbitrary body returning *PatchStatuspageDetailResponse
func (c *ClientWithResponses) PatchStatuspageDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchStatuspageDetailResponse, error) {
	rsp, err := c.PatchStatuspageDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchStatuspageDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchStatuspageDetailWithResponse(ctx context.Context, pk string, body PatchStatuspageDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchStatuspageDetailResponse, error) {
	rsp, err := c.PatchStatuspageDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchStatuspageDetailResponse(rsp)
}

// PutStatuspageDetailWithBodyWithResponse request with arbitrary body returning *PutStatuspageDetailResponse
func (c *ClientWithResponses) PutStatuspageDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutStatuspageDetailResponse, error) {
	rsp, err := c.PutStatuspageDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutStatuspageDetailResponse(rsp)
}

func (c *ClientWithResponses) PutStatuspageDetailWithResponse(ctx context.Context, pk string, body PutStatuspageDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutStatuspageDetailResponse, error) {
	rsp, err := c.PutStatuspageDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutStatuspageDetailResponse(rsp)
}

// GetStatuspageCurrentStatusWithResponse request returning *GetStatuspageCurrentStatusResponse
func (c *ClientWithResponses) GetStatuspageCurrentStatusWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetStatuspageCurrentStatusResponse, error) {
	rsp, err := c.GetStatuspageCurrentStatus(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatuspageCurrentStatusResponse(rsp)
}

// GetStatuspageHistoryWithResponse request returning *GetStatuspageHistoryResponse
func (c *ClientWithResponses) GetStatuspageHistoryWithResponse(ctx context.Context, pk string, params *GetStatuspageHistoryParams, reqEditors ...RequestEditorFn) (*GetStatuspageHistoryResponse, error) {
	rsp, err := c.GetStatuspageHistory(ctx, pk, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatuspageHistoryResponse(rsp)
}

// GetComponentslistWithResponse request returning *GetComponentslistResponse
func (c *ClientWithResponses) GetComponentslistWithResponse(ctx context.Context, statuspageId string, params *GetComponentslistParams, reqEditors ...RequestEditorFn) (*GetComponentslistResponse, error) {
	rsp, err := c.GetComponentslist(ctx, statuspageId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComponentslistResponse(rsp)
}

// PostComponentslistWithBodyWithResponse request with arbitrary body returning *PostComponentslistResponse
func (c *ClientWithResponses) PostComponentslistWithBodyWithResponse(ctx context.Context, statuspageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostComponentslistResponse, error) {
	rsp, err := c.PostComponentslistWithBody(ctx, statuspageId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostComponentslistResponse(rsp)
}

func (c *ClientWithResponses) PostComponentslistWithResponse(ctx context.Context, statuspageId string, body PostComponentslistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostComponentslistResponse, error) {
	rsp, err := c.PostComponentslist(ctx, statuspageId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostComponentslistResponse(rsp)
}

// DeleteComponentDetailWithResponse request returning *DeleteComponentDetailResponse
func (c *ClientWithResponses) DeleteComponentDetailWithResponse(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*DeleteComponentDetailResponse, error) {
	rsp, err := c.DeleteComponentDetail(ctx, statuspageId, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteComponentDetailResponse(rsp)
}

// GetComponentDetailWithResponse request returning *GetComponentDetailResponse
func (c *ClientWithResponses) GetComponentDetailWithResponse(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*GetComponentDetailResponse, error) {
	rsp, err := c.GetComponentDetail(ctx, statuspageId, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComponentDetailResponse(rsp)
}

// PatchComponentDetailWithBodyWithResponse request with arbitrary body returning *PatchComponentDetailResponse
func (c *ClientWithResponses) PatchComponentDetailWithBodyWithResponse(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchComponentDetailResponse, error) {
	rsp, err := c.PatchComponentDetailWithBody(ctx, statuspageId, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchComponentDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchComponentDetailWithResponse(ctx context.Context, statuspageId string, pk string, body PatchComponentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchComponentDetailResponse, error) {
	rsp, err := c.PatchComponentDetail(ctx, statuspageId, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchComponentDetailResponse(rsp)
}

// PutComponentDetailWithBodyWithResponse request with arbitrary body returning *PutComponentDetailResponse
func (c *ClientWithResponses) PutComponentDetailWithBodyWithResponse(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutComponentDetailResponse, error) {
	rsp, err := c.PutComponentDetailWithBody(ctx, statuspageId, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutComponentDetailResponse(rsp)
}

func (c *ClientWithResponses) PutComponentDetailWithResponse(ctx context.Context, statuspageId string, pk string, body PutComponentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutComponentDetailResponse, error) {
	rsp, err := c.PutComponentDetail(ctx, statuspageId, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutComponentDetailResponse(rsp)
}

// GetIncidentlistWithResponse request returning *GetIncidentlistResponse
func (c *ClientWithResponses) GetIncidentlistWithResponse(ctx context.Context, statuspageId string, params *GetIncidentlistParams, reqEditors ...RequestEditorFn) (*GetIncidentlistResponse, error) {
	rsp, err := c.GetIncidentlist(ctx, statuspageId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentlistResponse(rsp)
}

// PostIncidentlistWithBodyWithResponse request with arbitrary body returning *PostIncidentlistResponse
func (c *ClientWithResponses) PostIncidentlistWithBodyWithResponse(ctx context.Context, statuspageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIncidentlistResponse, error) {
	rsp, err := c.PostIncidentlistWithBody(ctx, statuspageId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIncidentlistResponse(rsp)
}

func (c *ClientWithResponses) PostIncidentlistWithResponse(ctx context.Context, statuspageId string, body PostIncidentlistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIncidentlistResponse, error) {
	rsp, err := c.PostIncidentlist(ctx, statuspageId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIncidentlistResponse(rsp)
}

// DeleteIncidentDetailWithResponse request returning *DeleteIncidentDetailResponse
func (c *ClientWithResponses) DeleteIncidentDetailWithResponse(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*DeleteIncidentDetailResponse, error) {
	rsp, err := c.DeleteIncidentDetail(ctx, statuspageId, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentDetailResponse(rsp)
}

// GetIncidentDetailWithResponse request returning *GetIncidentDetailResponse
func (c *ClientWithResponses) GetIncidentDetailWithResponse(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*GetIncidentDetailResponse, error) {
	rsp, err := c.GetIncidentDetail(ctx, statuspageId, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentDetailResponse(rsp)
}

// PatchIncidentDetailWithBodyWithResponse request with arbitrary body returning *PatchIncidentDetailResponse
func (c *ClientWithResponses) PatchIncidentDetailWithBodyWithResponse(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchIncidentDetailResponse, error) {
	rsp, err := c.PatchIncidentDetailWithBody(ctx, statuspageId, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchIncidentDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchIncidentDetailWithResponse(ctx context.Context, statuspageId string, pk string, body PatchIncidentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchIncidentDetailResponse, error) {
	rsp, err := c.PatchIncidentDetail(ctx, statuspageId, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchIncidentDetailResponse(rsp)
}

// PutIncidentDetailWithBodyWithResponse request with arbitrary body returning *PutIncidentDetailResponse
func (c *ClientWithResponses) PutIncidentDetailWithBodyWithResponse(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIncidentDetailResponse, error) {
	rsp, err := c.PutIncidentDetailWithBody(ctx, statuspageId, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIncidentDetailResponse(rsp)
}

func (c *ClientWithResponses) PutIncidentDetailWithResponse(ctx context.Context, statuspageId string, pk string, body PutIncidentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIncidentDetailResponse, error) {
	rsp, err := c.PutIncidentDetail(ctx, statuspageId, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIncidentDetailResponse(rsp)
}

// GetMetricslistWithResponse request returning *GetMetricslistResponse
func (c *ClientWithResponses) GetMetricslistWithResponse(ctx context.Context, statuspageId string, params *GetMetricslistParams, reqEditors ...RequestEditorFn) (*GetMetricslistResponse, error) {
	rsp, err := c.GetMetricslist(ctx, statuspageId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMetricslistResponse(rsp)
}

// PostMetricslistWithBodyWithResponse request with arbitrary body returning *PostMetricslistResponse
func (c *ClientWithResponses) PostMetricslistWithBodyWithResponse(ctx context.Context, statuspageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMetricslistResponse, error) {
	rsp, err := c.PostMetricslistWithBody(ctx, statuspageId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMetricslistResponse(rsp)
}

func (c *ClientWithResponses) PostMetricslistWithResponse(ctx context.Context, statuspageId string, body PostMetricslistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMetricslistResponse, error) {
	rsp, err := c.PostMetricslist(ctx, statuspageId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMetricslistResponse(rsp)
}

// DeleteMetricDetailWithResponse request returning *DeleteMetricDetailResponse
func (c *ClientWithResponses) DeleteMetricDetailWithResponse(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*DeleteMetricDetailResponse, error) {
	rsp, err := c.DeleteMetricDetail(ctx, statuspageId, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMetricDetailResponse(rsp)
}

// GetMetricDetailWithResponse request returning *GetMetricDetailResponse
func (c *ClientWithResponses) GetMetricDetailWithResponse(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*GetMetricDetailResponse, error) {
	rsp, err := c.GetMetricDetail(ctx, statuspageId, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMetricDetailResponse(rsp)
}

// PatchMetricDetailWithBodyWithResponse request with arbitrary body returning *PatchMetricDetailResponse
func (c *ClientWithResponses) PatchMetricDetailWithBodyWithResponse(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchMetricDetailResponse, error) {
	rsp, err := c.PatchMetricDetailWithBody(ctx, statuspageId, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchMetricDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchMetricDetailWithResponse(ctx context.Context, statuspageId string, pk string, body PatchMetricDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchMetricDetailResponse, error) {
	rsp, err := c.PatchMetricDetail(ctx, statuspageId, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchMetricDetailResponse(rsp)
}

// PutMetricDetailWithBodyWithResponse request with arbitrary body returning *PutMetricDetailResponse
func (c *ClientWithResponses) PutMetricDetailWithBodyWithResponse(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMetricDetailResponse, error) {
	rsp, err := c.PutMetricDetailWithBody(ctx, statuspageId, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMetricDetailResponse(rsp)
}

func (c *ClientWithResponses) PutMetricDetailWithResponse(ctx context.Context, statuspageId string, pk string, body PutMetricDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMetricDetailResponse, error) {
	rsp, err := c.PutMetricDetail(ctx, statuspageId, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMetricDetailResponse(rsp)
}

// GetUserlistWithResponse request returning *GetUserlistResponse
func (c *ClientWithResponses) GetUserlistWithResponse(ctx context.Context, params *GetUserlistParams, reqEditors ...RequestEditorFn) (*GetUserlistResponse, error) {
	rsp, err := c.GetUserlist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserlistResponse(rsp)
}

// PostUserlistWithBodyWithResponse request with arbitrary body returning *PostUserlistResponse
func (c *ClientWithResponses) PostUserlistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserlistResponse, error) {
	rsp, err := c.PostUserlistWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserlistResponse(rsp)
}

func (c *ClientWithResponses) PostUserlistWithResponse(ctx context.Context, body PostUserlistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserlistResponse, error) {
	rsp, err := c.PostUserlist(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserlistResponse(rsp)
}

// DeleteUserDetailWithResponse request returning *DeleteUserDetailResponse
func (c *ClientWithResponses) DeleteUserDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteUserDetailResponse, error) {
	rsp, err := c.DeleteUserDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserDetailResponse(rsp)
}

// GetUserDetailWithResponse request returning *GetUserDetailResponse
func (c *ClientWithResponses) GetUserDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetUserDetailResponse, error) {
	rsp, err := c.GetUserDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserDetailResponse(rsp)
}

// PatchUserDetailWithBodyWithResponse request with arbitrary body returning *PatchUserDetailResponse
func (c *ClientWithResponses) PatchUserDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUserDetailResponse, error) {
	rsp, err := c.PatchUserDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUserDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchUserDetailWithResponse(ctx context.Context, pk string, body PatchUserDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUserDetailResponse, error) {
	rsp, err := c.PatchUserDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUserDetailResponse(rsp)
}

// PutUserDetailWithBodyWithResponse request with arbitrary body returning *PutUserDetailResponse
func (c *ClientWithResponses) PutUserDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUserDetailResponse, error) {
	rsp, err := c.PutUserDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUserDetailResponse(rsp)
}

func (c *ClientWithResponses) PutUserDetailWithResponse(ctx context.Context, pk string, body PutUserDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUserDetailResponse, error) {
	rsp, err := c.PutUserDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUserDetailResponse(rsp)
}

// PostUserDeactivateWithResponse request returning *PostUserDeactivateResponse
func (c *ClientWithResponses) PostUserDeactivateWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*PostUserDeactivateResponse, error) {
	rsp, err := c.PostUserDeactivate(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserDeactivateResponse(rsp)
}

// PostUserReactivateWithResponse request returning *PostUserReactivateResponse
func (c *ClientWithResponses) PostUserReactivateWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*PostUserReactivateResponse, error) {
	rsp, err := c.PostUserReactivate(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserReactivateResponse(rsp)
}

// ParseGetAlertlistResponse parses an HTTP response from a GetAlertlistWithResponse call
func ParseGetAlertlistResponse(rsp *http.Response) (*GetAlertlistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *int         `json:"count,omitempty"`
			Next     *string      `json:"next"`
			Previous *string      `json:"previous"`
			Results  *[]Incidents `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAlertAlertRootCauseResponse parses an HTTP response from a GetAlertAlertRootCauseWithResponse call
func ParseGetAlertAlertRootCauseResponse(rsp *http.Response) (*GetAlertAlertRootCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertAlertRootCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAlertDetailResponse parses an HTTP response from a GetAlertDetailWithResponse call
func ParseGetAlertDetailResponse(rsp *http.Response) (*GetAlertDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Incidents
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAlertIgnoreResponse parses an HTTP response from a PostAlertIgnoreWithResponse call
func ParsePostAlertIgnoreResponse(rsp *http.Response) (*PostAlertIgnoreResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAlertIgnoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAuthListResponse parses an HTTP response from a GetAuthListWithResponse call
func ParseGetAuthListResponse(rsp *http.Response) (*GetAuthListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAuthAccountUsageResponse parses an HTTP response from a GetAuthAccountUsageWithResponse call
func ParseGetAuthAccountUsageResponse(rsp *http.Response) (*GetAuthAccountUsageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthAccountUsageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAuthLoginResponse parses an HTTP response from a PostAuthLoginWithResponse call
func ParsePostAuthLoginResponse(rsp *http.Response) (*PostAuthLoginResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthTokenWithTOTP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAuthMeResponse parses an HTTP response from a GetAuthMeWithResponse call
func ParseGetAuthMeResponse(rsp *http.Response) (*GetAuthMeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAuthResetPasswordResponse parses an HTTP response from a GetAuthResetPasswordWithResponse call
func ParseGetAuthResetPasswordResponse(rsp *http.Response) (*GetAuthResetPasswordResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthResetPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PasswordReset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAuthResetPasswordResponse parses an HTTP response from a PostAuthResetPasswordWithResponse call
func ParsePostAuthResetPasswordResponse(rsp *http.Response) (*PostAuthResetPasswordResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthResetPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PasswordReset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSendMagicLinkResponse parses an HTTP response from a PostSendMagicLinkWithResponse call
func ParsePostSendMagicLinkResponse(rsp *http.Response) (*PostSendMagicLinkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSendMagicLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MagicLink
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAuthSubaccountsResponse parses an HTTP response from a GetAuthSubaccountsWithResponse call
func ParseGetAuthSubaccountsResponse(rsp *http.Response) (*GetAuthSubaccountsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthSubaccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subaccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAuthSubaccountsResponse parses an HTTP response from a PostAuthSubaccountsWithResponse call
func ParsePostAuthSubaccountsResponse(rsp *http.Response) (*PostAuthSubaccountsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthSubaccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subaccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAuthSubaccountResponse parses an HTTP response from a GetAuthSubaccountWithResponse call
func ParseGetAuthSubaccountResponse(rsp *http.Response) (*GetAuthSubaccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthSubaccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subaccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchAuthSubaccountResponse parses an HTTP response from a PatchAuthSubaccountWithResponse call
func ParsePatchAuthSubaccountResponse(rsp *http.Response) (*PatchAuthSubaccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchAuthSubaccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subaccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAuthSubaccountPacksResponse parses an HTTP response from a PostAuthSubaccountPacksWithResponse call
func ParsePostAuthSubaccountPacksResponse(rsp *http.Response) (*PostAuthSubaccountPacksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthSubaccountPacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubaccountPacks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostValidateMagicLinkResponse parses an HTTP response from a PostValidateMagicLinkWithResponse call
func ParsePostValidateMagicLinkResponse(rsp *http.Response) (*PostValidateMagicLinkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostValidateMagicLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServicetaglistResponse parses an HTTP response from a GetServicetaglistWithResponse call
func ParseGetServicetaglistResponse(rsp *http.Response) (*GetServicetaglistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServicetaglistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *int        `json:"count,omitempty"`
			Next     *string     `json:"next"`
			Previous *string     `json:"previous"`
			Results  *[]CheckTag `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServicetaglistResponse parses an HTTP response from a PostServicetaglistWithResponse call
func ParsePostServicetaglistResponse(rsp *http.Response) (*PostServicetaglistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServicetaglistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckTag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteServiceTagDetailResponse parses an HTTP response from a DeleteServiceTagDetailWithResponse call
func ParseDeleteServiceTagDetailResponse(rsp *http.Response) (*DeleteServiceTagDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServiceTagDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServiceTagDetailResponse parses an HTTP response from a GetServiceTagDetailWithResponse call
func ParseGetServiceTagDetailResponse(rsp *http.Response) (*GetServiceTagDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceTagDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckTag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchServiceTagDetailResponse parses an HTTP response from a PatchServiceTagDetailWithResponse call
func ParsePatchServiceTagDetailResponse(rsp *http.Response) (*PatchServiceTagDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceTagDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckTag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutServiceTagDetailResponse parses an HTTP response from a PutServiceTagDetailWithResponse call
func ParsePutServiceTagDetailResponse(rsp *http.Response) (*PutServiceTagDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutServiceTagDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckTag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServicelistResponse parses an HTTP response from a GetServicelistWithResponse call
func ParseGetServicelistResponse(rsp *http.Response) (*GetServicelistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServicelistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *int      `json:"count,omitempty"`
			Next     *string   `json:"next"`
			Previous *string   `json:"previous"`
			Results  *[]Checks `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateApiResponse parses an HTTP response from a PostServiceCreateApiWithResponse call
func ParsePostServiceCreateApiResponse(rsp *http.Response) (*PostServiceCreateApiResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateApiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksAPI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateBlacklistResponse parses an HTTP response from a PostServiceCreateBlacklistWithResponse call
func ParsePostServiceCreateBlacklistResponse(rsp *http.Response) (*PostServiceCreateBlacklistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateBlacklistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksBLACKLIST
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateDnsResponse parses an HTTP response from a PostServiceCreateDnsWithResponse call
func ParsePostServiceCreateDnsResponse(rsp *http.Response) (*PostServiceCreateDnsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateDnsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksDNS
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateGroupResponse parses an HTTP response from a PostServiceCreateGroupWithResponse call
func ParsePostServiceCreateGroupResponse(rsp *http.Response) (*PostServiceCreateGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksGROUP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateHeartbeatResponse parses an HTTP response from a PostServiceCreateHeartbeatWithResponse call
func ParsePostServiceCreateHeartbeatResponse(rsp *http.Response) (*PostServiceCreateHeartbeatResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateHeartbeatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksHEARTBEAT
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateHttpResponse parses an HTTP response from a PostServiceCreateHttpWithResponse call
func ParsePostServiceCreateHttpResponse(rsp *http.Response) (*PostServiceCreateHttpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateHttpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksHTTP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateIcmpResponse parses an HTTP response from a PostServiceCreateIcmpWithResponse call
func ParsePostServiceCreateIcmpResponse(rsp *http.Response) (*PostServiceCreateIcmpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateIcmpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksICMP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateImapResponse parses an HTTP response from a PostServiceCreateImapWithResponse call
func ParsePostServiceCreateImapResponse(rsp *http.Response) (*PostServiceCreateImapResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateImapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksIMAP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateMalwareResponse parses an HTTP response from a PostServiceCreateMalwareWithResponse call
func ParsePostServiceCreateMalwareResponse(rsp *http.Response) (*PostServiceCreateMalwareResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateMalwareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksMALWARE
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateNtpResponse parses an HTTP response from a PostServiceCreateNtpWithResponse call
func ParsePostServiceCreateNtpResponse(rsp *http.Response) (*PostServiceCreateNtpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateNtpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksNTP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreatePopResponse parses an HTTP response from a PostServiceCreatePopWithResponse call
func ParsePostServiceCreatePopResponse(rsp *http.Response) (*PostServiceCreatePopResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreatePopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksPOP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateRumResponse parses an HTTP response from a PostServiceCreateRumWithResponse call
func ParsePostServiceCreateRumResponse(rsp *http.Response) (*PostServiceCreateRumResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateRumResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksRUM
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateRum2Response parses an HTTP response from a PostServiceCreateRum2WithResponse call
func ParsePostServiceCreateRum2Response(rsp *http.Response) (*PostServiceCreateRum2Response, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateRum2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksRUM2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateSmtpResponse parses an HTTP response from a PostServiceCreateSmtpWithResponse call
func ParsePostServiceCreateSmtpResponse(rsp *http.Response) (*PostServiceCreateSmtpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateSmtpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksSMTP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateSshResponse parses an HTTP response from a PostServiceCreateSshWithResponse call
func ParsePostServiceCreateSshResponse(rsp *http.Response) (*PostServiceCreateSshResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateSshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksSSH
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateSslCertResponse parses an HTTP response from a PostServiceCreateSslCertWithResponse call
func ParsePostServiceCreateSslCertResponse(rsp *http.Response) (*PostServiceCreateSslCertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateSslCertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksSSLCERT
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateTcpResponse parses an HTTP response from a PostServiceCreateTcpWithResponse call
func ParsePostServiceCreateTcpResponse(rsp *http.Response) (*PostServiceCreateTcpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateTcpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksTCP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateTransactionResponse parses an HTTP response from a PostServiceCreateTransactionWithResponse call
func ParsePostServiceCreateTransactionResponse(rsp *http.Response) (*PostServiceCreateTransactionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksTRANSACTION
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateUdpResponse parses an HTTP response from a PostServiceCreateUdpWithResponse call
func ParsePostServiceCreateUdpResponse(rsp *http.Response) (*PostServiceCreateUdpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateUdpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksUDP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateWebhookResponse parses an HTTP response from a PostServiceCreateWebhookWithResponse call
func ParsePostServiceCreateWebhookResponse(rsp *http.Response) (*PostServiceCreateWebhookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksWEBHOOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateWhoisResponse parses an HTTP response from a PostServiceCreateWhoisWithResponse call
func ParsePostServiceCreateWhoisResponse(rsp *http.Response) (*PostServiceCreateWhoisResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateWhoisResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksWHOIS
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchServiceBulkEscalationsResponse parses an HTTP response from a PatchServiceBulkEscalationsWithResponse call
func ParsePatchServiceBulkEscalationsResponse(rsp *http.Response) (*PatchServiceBulkEscalationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceBulkEscalationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksBulkUpdateEscalations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchServiceBulkMaintenanceResponse parses an HTTP response from a PatchServiceBulkMaintenanceWithResponse call
func ParsePatchServiceBulkMaintenanceResponse(rsp *http.Response) (*PatchServiceBulkMaintenanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceBulkMaintenanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksBulkUpdateMaintenance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchServiceBulkPauseResponse parses an HTTP response from a PatchServiceBulkPauseWithResponse call
func ParsePatchServiceBulkPauseResponse(rsp *http.Response) (*PatchServiceBulkPauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceBulkPauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BulkChecksAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchServiceBulkResumeResponse parses an HTTP response from a PatchServiceBulkResumeWithResponse call
func ParsePatchServiceBulkResumeResponse(rsp *http.Response) (*PatchServiceBulkResumeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceBulkResumeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BulkChecksAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServiceBulkStatsResponse parses an HTTP response from a GetServiceBulkStatsWithResponse call
func ParseGetServiceBulkStatsResponse(rsp *http.Response) (*GetServiceBulkStatsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceBulkStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksBulkStats
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchServiceBulkUpdateResponse parses an HTTP response from a PatchServiceBulkUpdateWithResponse call
func ParsePatchServiceBulkUpdateResponse(rsp *http.Response) (*PatchServiceBulkUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksBulkUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServiceShowServiceDefsResponse parses an HTTP response from a GetServiceShowServiceDefsWithResponse call
func ParseGetServiceShowServiceDefsResponse(rsp *http.Response) (*GetServiceShowServiceDefsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceShowServiceDefsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServiceShowLocationsResponse parses an HTTP response from a GetServiceShowLocationsWithResponse call
func ParseGetServiceShowLocationsResponse(rsp *http.Response) (*GetServiceShowLocationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceShowLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteServiceDetailResponse parses an HTTP response from a DeleteServiceDetailWithResponse call
func ParseDeleteServiceDetailResponse(rsp *http.Response) (*DeleteServiceDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServiceDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServiceDetailResponse parses an HTTP response from a GetServiceDetailWithResponse call
func ParseGetServiceDetailResponse(rsp *http.Response) (*GetServiceDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Checks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchServiceDetailResponse parses an HTTP response from a PatchServiceDetailWithResponse call
func ParsePatchServiceDetailResponse(rsp *http.Response) (*PatchServiceDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Checks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutServiceDetailResponse parses an HTTP response from a PutServiceDetailWithResponse call
func ParsePutServiceDetailResponse(rsp *http.Response) (*PutServiceDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutServiceDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Checks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchServiceAddContactGroupsResponse parses an HTTP response from a PatchServiceAddContactGroupsWithResponse call
func ParsePatchServiceAddContactGroupsResponse(rsp *http.Response) (*PatchServiceAddContactGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceAddContactGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckContactGroups
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchServiceAddLocationsResponse parses an HTTP response from a PatchServiceAddLocationsWithResponse call
func ParsePatchServiceAddLocationsResponse(rsp *http.Response) (*PatchServiceAddLocationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceAddLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckLocations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchServiceAddTagsResponse parses an HTTP response from a PatchServiceAddTagsWithResponse call
func ParsePatchServiceAddTagsResponse(rsp *http.Response) (*PatchServiceAddTagsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceAddTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckTags
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServiceAnalysisResponse parses an HTTP response from a GetServiceAnalysisWithResponse call
func ParseGetServiceAnalysisResponse(rsp *http.Response) (*GetServiceAnalysisResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceAnalysisResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServiceCurrentStatusResponse parses an HTTP response from a GetServiceCurrentStatusWithResponse call
func ParseGetServiceCurrentStatusResponse(rsp *http.Response) (*GetServiceCurrentStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceCurrentStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchServiceSetEscalationsResponse parses an HTTP response from a PatchServiceSetEscalationsWithResponse call
func ParsePatchServiceSetEscalationsResponse(rsp *http.Response) (*PatchServiceSetEscalationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceSetEscalationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckEscalations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchServiceSetMaintenanceResponse parses an HTTP response from a PatchServiceSetMaintenanceWithResponse call
func ParsePatchServiceSetMaintenanceResponse(rsp *http.Response) (*PatchServiceSetMaintenanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceSetMaintenanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckMaintenance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServicePauseResponse parses an HTTP response from a PostServicePauseWithResponse call
func ParsePostServicePauseResponse(rsp *http.Response) (*PostServicePauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServicePauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchServiceReplaceContactGroupsResponse parses an HTTP response from a PatchServiceReplaceContactGroupsWithResponse call
func ParsePatchServiceReplaceContactGroupsResponse(rsp *http.Response) (*PatchServiceReplaceContactGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceReplaceContactGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckContactGroups
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchServiceReplaceLocationsResponse parses an HTTP response from a PatchServiceReplaceLocationsWithResponse call
func ParsePatchServiceReplaceLocationsResponse(rsp *http.Response) (*PatchServiceReplaceLocationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceReplaceLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckLocations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchServiceReplaceTagsResponse parses an HTTP response from a PatchServiceReplaceTagsWithResponse call
func ParsePatchServiceReplaceTagsResponse(rsp *http.Response) (*PatchServiceReplaceTagsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceReplaceTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckTags
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServiceResponseTimeDatapointsResponse parses an HTTP response from a GetServiceResponseTimeDatapointsWithResponse call
func ParseGetServiceResponseTimeDatapointsResponse(rsp *http.Response) (*GetServiceResponseTimeDatapointsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceResponseTimeDatapointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseTime
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceResumeResponse parses an HTTP response from a PostServiceResumeWithResponse call
func ParsePostServiceResumeResponse(rsp *http.Response) (*PostServiceResumeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceResumeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServiceStatsResponse parses an HTTP response from a GetServiceStatsWithResponse call
func ParseGetServiceStatsResponse(rsp *http.Response) (*GetServiceStatsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckStats
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContactgrouplistResponse parses an HTTP response from a GetContactgrouplistWithResponse call
func ParseGetContactgrouplistResponse(rsp *http.Response) (*GetContactgrouplistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactgrouplistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *int            `json:"count,omitempty"`
			Next     *string         `json:"next"`
			Previous *string         `json:"previous"`
			Results  *[]ContactGroup `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostContactgrouplistResponse parses an HTTP response from a PostContactgrouplistWithResponse call
func ParsePostContactgrouplistResponse(rsp *http.Response) (*PostContactgrouplistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostContactgrouplistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteContactGroupDetailResponse parses an HTTP response from a DeleteContactGroupDetailWithResponse call
func ParseDeleteContactGroupDetailResponse(rsp *http.Response) (*DeleteContactGroupDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteContactGroupDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetContactGroupDetailResponse parses an HTTP response from a GetContactGroupDetailWithResponse call
func ParseGetContactGroupDetailResponse(rsp *http.Response) (*GetContactGroupDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactGroupDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchContactGroupDetailResponse parses an HTTP response from a PatchContactGroupDetailWithResponse call
func ParsePatchContactGroupDetailResponse(rsp *http.Response) (*PatchContactGroupDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchContactGroupDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutContactGroupDetailResponse parses an HTTP response from a PutContactGroupDetailWithResponse call
func ParsePutContactGroupDetailResponse(rsp *http.Response) (*PutContactGroupDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutContactGroupDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchContactGroupSetOnCallHoursResponse parses an HTTP response from a PatchContactGroupSetOnCallHoursWithResponse call
func ParsePatchContactGroupSetOnCallHoursResponse(rsp *http.Response) (*PatchContactGroupSetOnCallHoursResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchContactGroupSetOnCallHoursResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactGroupOnCallSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDashboardlistResponse parses an HTTP response from a GetDashboardlistWithResponse call
func ParseGetDashboardlistResponse(rsp *http.Response) (*GetDashboardlistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *int         `json:"count,omitempty"`
			Next     *string      `json:"next"`
			Previous *string      `json:"previous"`
			Results  *[]Dashboard `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDashboardlistResponse parses an HTTP response from a PostDashboardlistWithResponse call
func ParsePostDashboardlistResponse(rsp *http.Response) (*PostDashboardlistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDashboardlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Dashboard
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDashboardDefaultResponse parses an HTTP response from a GetDashboardDefaultWithResponse call
func ParseGetDashboardDefaultResponse(rsp *http.Response) (*GetDashboardDefaultResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardDefaultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Dashboard
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteDashboardDetailResponse parses an HTTP response from a DeleteDashboardDetailWithResponse call
func ParseDeleteDashboardDetailResponse(rsp *http.Response) (*DeleteDashboardDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDashboardDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDashboardDetailResponse parses an HTTP response from a GetDashboardDetailWithResponse call
func ParseGetDashboardDetailResponse(rsp *http.Response) (*GetDashboardDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Dashboard
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchDashboardDetailResponse parses an HTTP response from a PatchDashboardDetailWithResponse call
func ParsePatchDashboardDetailResponse(rsp *http.Response) (*PatchDashboardDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchDashboardDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Dashboard
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutDashboardDetailResponse parses an HTTP response from a PutDashboardDetailWithResponse call
func ParsePutDashboardDetailResponse(rsp *http.Response) (*PutDashboardDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutDashboardDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Dashboard
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDashboardStatsResponse parses an HTTP response from a GetDashboardStatsWithResponse call
func ParseGetDashboardStatsResponse(rsp *http.Response) (*GetDashboardStatsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DashboardStats
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetIntegrationlistResponse parses an HTTP response from a GetIntegrationlistWithResponse call
func ParseGetIntegrationlistResponse(rsp *http.Response) (*GetIntegrationlistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIntegrationlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *int           `json:"count,omitempty"`
			Next     *string        `json:"next"`
			Previous *string        `json:"previous"`
			Results  *[]Integration `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateCachetResponse parses an HTTP response from a PostIntegrationCreateCachetWithResponse call
func ParsePostIntegrationCreateCachetResponse(rsp *http.Response) (*PostIntegrationCreateCachetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateCachetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationCachet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateDatadogResponse parses an HTTP response from a PostIntegrationCreateDatadogWithResponse call
func ParsePostIntegrationCreateDatadogResponse(rsp *http.Response) (*PostIntegrationCreateDatadogResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateDatadogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationDatadog
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateGeckoboardResponse parses an HTTP response from a PostIntegrationCreateGeckoboardWithResponse call
func ParsePostIntegrationCreateGeckoboardResponse(rsp *http.Response) (*PostIntegrationCreateGeckoboardResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateGeckoboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationGeckoboard
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateJiraservicedeskResponse parses an HTTP response from a PostIntegrationCreateJiraservicedeskWithResponse call
func ParsePostIntegrationCreateJiraservicedeskResponse(rsp *http.Response) (*PostIntegrationCreateJiraservicedeskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateJiraservicedeskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationJiraservicedesk
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateKlipfolioResponse parses an HTTP response from a PostIntegrationCreateKlipfolioWithResponse call
func ParsePostIntegrationCreateKlipfolioResponse(rsp *http.Response) (*PostIntegrationCreateKlipfolioResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateKlipfolioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationKlipfolio
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateLibratoResponse parses an HTTP response from a PostIntegrationCreateLibratoWithResponse call
func ParsePostIntegrationCreateLibratoResponse(rsp *http.Response) (*PostIntegrationCreateLibratoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateLibratoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationLibrato
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateMicrosoftTeamsResponse parses an HTTP response from a PostIntegrationCreateMicrosoftTeamsWithResponse call
func ParsePostIntegrationCreateMicrosoftTeamsResponse(rsp *http.Response) (*PostIntegrationCreateMicrosoftTeamsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateMicrosoftTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationMicrosoftTeams
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateOpsgenieResponse parses an HTTP response from a PostIntegrationCreateOpsgenieWithResponse call
func ParsePostIntegrationCreateOpsgenieResponse(rsp *http.Response) (*PostIntegrationCreateOpsgenieResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateOpsgenieResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationOpsgenie
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreatePagerdutyResponse parses an HTTP response from a PostIntegrationCreatePagerdutyWithResponse call
func ParsePostIntegrationCreatePagerdutyResponse(rsp *http.Response) (*PostIntegrationCreatePagerdutyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreatePagerdutyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationPagerduty
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreatePushbulletResponse parses an HTTP response from a PostIntegrationCreatePushbulletWithResponse call
func ParsePostIntegrationCreatePushbulletResponse(rsp *http.Response) (*PostIntegrationCreatePushbulletResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreatePushbulletResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationPushbullet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreatePushoverResponse parses an HTTP response from a PostIntegrationCreatePushoverWithResponse call
func ParsePostIntegrationCreatePushoverResponse(rsp *http.Response) (*PostIntegrationCreatePushoverResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreatePushoverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationPushover
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateSignifaiResponse parses an HTTP response from a PostIntegrationCreateSignifaiWithResponse call
func ParsePostIntegrationCreateSignifaiResponse(rsp *http.Response) (*PostIntegrationCreateSignifaiResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateSignifaiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationSignifai
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateSlackResponse parses an HTTP response from a PostIntegrationCreateSlackWithResponse call
func ParsePostIntegrationCreateSlackResponse(rsp *http.Response) (*PostIntegrationCreateSlackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateSlackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationSlack
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateStatusResponse parses an HTTP response from a PostIntegrationCreateStatusWithResponse call
func ParsePostIntegrationCreateStatusResponse(rsp *http.Response) (*PostIntegrationCreateStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateStatuspageResponse parses an HTTP response from a PostIntegrationCreateStatuspageWithResponse call
func ParsePostIntegrationCreateStatuspageResponse(rsp *http.Response) (*PostIntegrationCreateStatuspageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateStatuspageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationStatuspage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateTwitterResponse parses an HTTP response from a PostIntegrationCreateTwitterWithResponse call
func ParsePostIntegrationCreateTwitterResponse(rsp *http.Response) (*PostIntegrationCreateTwitterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateTwitterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationTwitter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateVictoropsResponse parses an HTTP response from a PostIntegrationCreateVictoropsWithResponse call
func ParsePostIntegrationCreateVictoropsResponse(rsp *http.Response) (*PostIntegrationCreateVictoropsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateVictoropsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationVictorops
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateWavefrontResponse parses an HTTP response from a PostIntegrationCreateWavefrontWithResponse call
func ParsePostIntegrationCreateWavefrontResponse(rsp *http.Response) (*PostIntegrationCreateWavefrontResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateWavefrontResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationWavefront
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateWebhookResponse parses an HTTP response from a PostIntegrationCreateWebhookWithResponse call
func ParsePostIntegrationCreateWebhookResponse(rsp *http.Response) (*PostIntegrationCreateWebhookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationWebhook
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateZapierResponse parses an HTTP response from a PostIntegrationCreateZapierWithResponse call
func ParsePostIntegrationCreateZapierResponse(rsp *http.Response) (*PostIntegrationCreateZapierResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateZapierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationZapier
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteIntegrationDetailResponse parses an HTTP response from a DeleteIntegrationDetailWithResponse call
func ParseDeleteIntegrationDetailResponse(rsp *http.Response) (*DeleteIntegrationDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIntegrationDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIntegrationDetailResponse parses an HTTP response from a GetIntegrationDetailWithResponse call
func ParseGetIntegrationDetailResponse(rsp *http.Response) (*GetIntegrationDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIntegrationDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchIntegrationDetailResponse parses an HTTP response from a PatchIntegrationDetailWithResponse call
func ParsePatchIntegrationDetailResponse(rsp *http.Response) (*PatchIntegrationDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchIntegrationDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutIntegrationDetailResponse parses an HTTP response from a PutIntegrationDetailWithResponse call
func ParsePutIntegrationDetailResponse(rsp *http.Response) (*PutIntegrationDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutIntegrationDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOutagelistResponse parses an HTTP response from a GetOutagelistWithResponse call
func ParseGetOutagelistResponse(rsp *http.Response) (*GetOutagelistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOutagelistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *int       `json:"count,omitempty"`
			Next     *string    `json:"next"`
			Previous *string    `json:"previous"`
			Results  *[]Outages `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOutageDetailResponse parses an HTTP response from a GetOutageDetailWithResponse call
func ParseGetOutageDetailResponse(rsp *http.Response) (*GetOutageDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOutageDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Outages
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMonitoringServerListResponse parses an HTTP response from a GetMonitoringServerListWithResponse call
func ParseGetMonitoringServerListResponse(rsp *http.Response) (*GetMonitoringServerListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMonitoringServerListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPushnotificationlistResponse parses an HTTP response from a GetPushnotificationlistWithResponse call
func ParseGetPushnotificationlistResponse(rsp *http.Response) (*GetPushnotificationlistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPushnotificationlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *int                             `json:"count,omitempty"`
			Next     *string                          `json:"next"`
			Previous *string                          `json:"previous"`
			Results  *[]PushNotificationProfileCreate `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPushnotificationlistResponse parses an HTTP response from a PostPushnotificationlistWithResponse call
func ParsePostPushnotificationlistResponse(rsp *http.Response) (*PostPushnotificationlistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPushnotificationlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PushNotificationProfileCreate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePushNotificationDetailResponse parses an HTTP response from a DeletePushNotificationDetailWithResponse call
func ParseDeletePushNotificationDetailResponse(rsp *http.Response) (*DeletePushNotificationDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePushNotificationDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPushNotificationDetailResponse parses an HTTP response from a GetPushNotificationDetailWithResponse call
func ParseGetPushNotificationDetailResponse(rsp *http.Response) (*GetPushNotificationDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPushNotificationDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PushNotificationProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchPushNotificationDetailResponse parses an HTTP response from a PatchPushNotificationDetailWithResponse call
func ParsePatchPushNotificationDetailResponse(rsp *http.Response) (*PatchPushNotificationDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchPushNotificationDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PushNotificationProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutPushNotificationDetailResponse parses an HTTP response from a PutPushNotificationDetailWithResponse call
func ParsePutPushNotificationDetailResponse(rsp *http.Response) (*PutPushNotificationDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPushNotificationDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PushNotificationProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetScheduledreportlistResponse parses an HTTP response from a GetScheduledreportlistWithResponse call
func ParseGetScheduledreportlistResponse(rsp *http.Response) (*GetScheduledreportlistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScheduledreportlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *int               `json:"count,omitempty"`
			Next     *string            `json:"next"`
			Previous *string            `json:"previous"`
			Results  *[]ScheduledReport `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostScheduledreportlistResponse parses an HTTP response from a PostScheduledreportlistWithResponse call
func ParsePostScheduledreportlistResponse(rsp *http.Response) (*PostScheduledreportlistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostScheduledreportlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteScheduledReportDetailResponse parses an HTTP response from a DeleteScheduledReportDetailWithResponse call
func ParseDeleteScheduledReportDetailResponse(rsp *http.Response) (*DeleteScheduledReportDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteScheduledReportDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetScheduledReportDetailResponse parses an HTTP response from a GetScheduledReportDetailWithResponse call
func ParseGetScheduledReportDetailResponse(rsp *http.Response) (*GetScheduledReportDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScheduledReportDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchScheduledReportDetailResponse parses an HTTP response from a PatchScheduledReportDetailWithResponse call
func ParsePatchScheduledReportDetailResponse(rsp *http.Response) (*PatchScheduledReportDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchScheduledReportDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutScheduledReportDetailResponse parses an HTTP response from a PutScheduledReportDetailWithResponse call
func ParsePutScheduledReportDetailResponse(rsp *http.Response) (*PutScheduledReportDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutScheduledReportDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSlareportlistResponse parses an HTTP response from a GetSlareportlistWithResponse call
func ParseGetSlareportlistResponse(rsp *http.Response) (*GetSlareportlistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSlareportlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *int         `json:"count,omitempty"`
			Next     *string      `json:"next"`
			Previous *string      `json:"previous"`
			Results  *[]SLAReport `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSlareportlistResponse parses an HTTP response from a PostSlareportlistWithResponse call
func ParsePostSlareportlistResponse(rsp *http.Response) (*PostSlareportlistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSlareportlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SLAReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteSlaReportDetailResponse parses an HTTP response from a DeleteSlaReportDetailWithResponse call
func ParseDeleteSlaReportDetailResponse(rsp *http.Response) (*DeleteSlaReportDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSlaReportDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSlaReportDetailResponse parses an HTTP response from a GetSlaReportDetailWithResponse call
func ParseGetSlaReportDetailResponse(rsp *http.Response) (*GetSlaReportDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSlaReportDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SLAReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchSlaReportDetailResponse parses an HTTP response from a PatchSlaReportDetailWithResponse call
func ParsePatchSlaReportDetailResponse(rsp *http.Response) (*PatchSlaReportDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSlaReportDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SLAReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSlaReportDetailResponse parses an HTTP response from a PutSlaReportDetailWithResponse call
func ParsePutSlaReportDetailResponse(rsp *http.Response) (*PutSlaReportDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSlaReportDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SLAReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSlaReportStatsResponse parses an HTTP response from a GetSlaReportStatsWithResponse call
func ParseGetSlaReportStatsResponse(rsp *http.Response) (*GetSlaReportStatsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSlaReportStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SLAReportStats
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatuspagelistResponse parses an HTTP response from a GetStatuspagelistWithResponse call
func ParseGetStatuspagelistResponse(rsp *http.Response) (*GetStatuspagelistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatuspagelistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *int          `json:"count,omitempty"`
			Next     *string       `json:"next"`
			Previous *string       `json:"previous"`
			Results  *[]StatusPage `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostStatuspagelistResponse parses an HTTP response from a PostStatuspagelistWithResponse call
func ParsePostStatuspagelistResponse(rsp *http.Response) (*PostStatuspagelistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostStatuspagelistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteStatuspageDetailResponse parses an HTTP response from a DeleteStatuspageDetailWithResponse call
func ParseDeleteStatuspageDetailResponse(rsp *http.Response) (*DeleteStatuspageDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteStatuspageDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStatuspageDetailResponse parses an HTTP response from a GetStatuspageDetailWithResponse call
func ParseGetStatuspageDetailResponse(rsp *http.Response) (*GetStatuspageDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatuspageDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchStatuspageDetailResponse parses an HTTP response from a PatchStatuspageDetailWithResponse call
func ParsePatchStatuspageDetailResponse(rsp *http.Response) (*PatchStatuspageDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchStatuspageDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutStatuspageDetailResponse parses an HTTP response from a PutStatuspageDetailWithResponse call
func ParsePutStatuspageDetailResponse(rsp *http.Response) (*PutStatuspageDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutStatuspageDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatuspageCurrentStatusResponse parses an HTTP response from a GetStatuspageCurrentStatusWithResponse call
func ParseGetStatuspageCurrentStatusResponse(rsp *http.Response) (*GetStatuspageCurrentStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatuspageCurrentStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusPageCurrentStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatuspageHistoryResponse parses an HTTP response from a GetStatuspageHistoryWithResponse call
func ParseGetStatuspageHistoryResponse(rsp *http.Response) (*GetStatuspageHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatuspageHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusPageHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetComponentslistResponse parses an HTTP response from a GetComponentslistWithResponse call
func ParseGetComponentslistResponse(rsp *http.Response) (*GetComponentslistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComponentslistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *int         `json:"count,omitempty"`
			Next     *string      `json:"next"`
			Previous *string      `json:"previous"`
			Results  *[]Component `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostComponentslistResponse parses an HTTP response from a PostComponentslistWithResponse call
func ParsePostComponentslistResponse(rsp *http.Response) (*PostComponentslistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostComponentslistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Component
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteComponentDetailResponse parses an HTTP response from a DeleteComponentDetailWithResponse call
func ParseDeleteComponentDetailResponse(rsp *http.Response) (*DeleteComponentDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteComponentDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetComponentDetailResponse parses an HTTP response from a GetComponentDetailWithResponse call
func ParseGetComponentDetailResponse(rsp *http.Response) (*GetComponentDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComponentDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Component
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchComponentDetailResponse parses an HTTP response from a PatchComponentDetailWithResponse call
func ParsePatchComponentDetailResponse(rsp *http.Response) (*PatchComponentDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchComponentDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Component
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutComponentDetailResponse parses an HTTP response from a PutComponentDetailWithResponse call
func ParsePutComponentDetailResponse(rsp *http.Response) (*PutComponentDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutComponentDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Component
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetIncidentlistResponse parses an HTTP response from a GetIncidentlistWithResponse call
func ParseGetIncidentlistResponse(rsp *http.Response) (*GetIncidentlistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *int        `json:"count,omitempty"`
			Next     *string     `json:"next"`
			Previous *string     `json:"previous"`
			Results  *[]Incident `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIncidentlistResponse parses an HTTP response from a PostIncidentlistWithResponse call
func ParsePostIncidentlistResponse(rsp *http.Response) (*PostIncidentlistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIncidentlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Incident
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteIncidentDetailResponse parses an HTTP response from a DeleteIncidentDetailWithResponse call
func ParseDeleteIncidentDetailResponse(rsp *http.Response) (*DeleteIncidentDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentDetailResponse parses an HTTP response from a GetIncidentDetailWithResponse call
func ParseGetIncidentDetailResponse(rsp *http.Response) (*GetIncidentDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Incident
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchIncidentDetailResponse parses an HTTP response from a PatchIncidentDetailWithResponse call
func ParsePatchIncidentDetailResponse(rsp *http.Response) (*PatchIncidentDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchIncidentDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Incident
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutIncidentDetailResponse parses an HTTP response from a PutIncidentDetailWithResponse call
func ParsePutIncidentDetailResponse(rsp *http.Response) (*PutIncidentDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutIncidentDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Incident
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMetricslistResponse parses an HTTP response from a GetMetricslistWithResponse call
func ParseGetMetricslistResponse(rsp *http.Response) (*GetMetricslistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMetricslistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *int      `json:"count,omitempty"`
			Next     *string   `json:"next"`
			Previous *string   `json:"previous"`
			Results  *[]Metric `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMetricslistResponse parses an HTTP response from a PostMetricslistWithResponse call
func ParsePostMetricslistResponse(rsp *http.Response) (*PostMetricslistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMetricslistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Metric
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteMetricDetailResponse parses an HTTP response from a DeleteMetricDetailWithResponse call
func ParseDeleteMetricDetailResponse(rsp *http.Response) (*DeleteMetricDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMetricDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMetricDetailResponse parses an HTTP response from a GetMetricDetailWithResponse call
func ParseGetMetricDetailResponse(rsp *http.Response) (*GetMetricDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMetricDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Metric
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchMetricDetailResponse parses an HTTP response from a PatchMetricDetailWithResponse call
func ParsePatchMetricDetailResponse(rsp *http.Response) (*PatchMetricDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchMetricDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Metric
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutMetricDetailResponse parses an HTTP response from a PutMetricDetailWithResponse call
func ParsePutMetricDetailResponse(rsp *http.Response) (*PutMetricDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutMetricDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Metric
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserlistResponse parses an HTTP response from a GetUserlistWithResponse call
func ParseGetUserlistResponse(rsp *http.Response) (*GetUserlistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *int    `json:"count,omitempty"`
			Next     *string `json:"next"`
			Previous *string `json:"previous"`
			Results  *[]User `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUserlistResponse parses an HTTP response from a PostUserlistWithResponse call
func ParsePostUserlistResponse(rsp *http.Response) (*PostUserlistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteUserDetailResponse parses an HTTP response from a DeleteUserDetailWithResponse call
func ParseDeleteUserDetailResponse(rsp *http.Response) (*DeleteUserDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserDetailResponse parses an HTTP response from a GetUserDetailWithResponse call
func ParseGetUserDetailResponse(rsp *http.Response) (*GetUserDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchUserDetailResponse parses an HTTP response from a PatchUserDetailWithResponse call
func ParsePatchUserDetailResponse(rsp *http.Response) (*PatchUserDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchUserDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutUserDetailResponse parses an HTTP response from a PutUserDetailWithResponse call
func ParsePutUserDetailResponse(rsp *http.Response) (*PutUserDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUserDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUserDeactivateResponse parses an HTTP response from a PostUserDeactivateWithResponse call
func ParsePostUserDeactivateResponse(rsp *http.Response) (*PostUserDeactivateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserDeactivateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUserReactivateResponse parses an HTTP response from a PostUserReactivateWithResponse call
func ParsePostUserReactivateResponse(rsp *http.Response) (*PostUserReactivateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserReactivateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
